JavaScript — Википедия
JavaScript
Материал из Википедии — свободной энциклопедии
Текущая версия страницы пока
не проверялась
опытными участниками и может значительно отличаться от
версии
, проверенной 28 января 2019; 
проверки требуют
2 правки
.
Текущая версия страницы пока
не проверялась
опытными участниками и может значительно отличаться от
версии
, проверенной 28 января 2019; 
проверки требуют
2 правки
.
Перейти к навигации
Перейти к поиску
Не следует путать с
Java
.
Не следует путать с
JScript
.
JavaScript
Класс языка
мультипарадигмальный
:
объектно-ориентированное
(
прототипное
),
обобщённое
,
функциональное
,
императивное
,
аспектно-ориентированное
,
событийно-ориентированное
программирование
Тип исполнения
интерпретация, трансляция в
байт-код
Java
&#91;1&#93;
, JIT в машинные коды
&#91;2&#93;
Появился в
1995
Автор
Брендан Эйх
Расширение
файлов
.js
&#91;4&#93;
Выпуск
ECMAScript 2016
&#91;Спецификация 1&#93;
&#160;(14 июня 2016)
Тестовая версия
(27 июня 2010)
Система типов
утиная
Основные реализации:
SpiderMonkey
,
Rhino
,
KJS (JavaScript)
(
англ.
)
,
JavaScriptCore
,
V8
Испытал влияние
Lua
,
Self
&#91;3&#93;
,
Си
,
Scheme
&#91;3&#93;
,
Perl
&#91;3&#93;
,
Python
,
Java
&#91;3&#93;
,
AWK
&#91;3&#93;
,
HyperTalk
&#91;3&#93;
Повлиял на
Objective-J
,
Dart
,
TypeScript
Сайт
developer.mozilla.org/do…
JavaScript
Расширение
.js
&#91;4&#93;
MIME
-тип
text/javascript, application/javascript
&#91;5&#93;
&#91;6&#93;
Разработчик
Брендан Айк
Последний выпуск
ECMAScript 2018
(
июнь
2018
)
&#91;7&#93;
Тип формата
текстовый файл
с
исходным кодом
Расширен из
ECMAScript
Сайт
developer.mozilla.org/do…
JavaScript
(
/
ˈ
dʒ
ɑː
v
ɑː
ˌ
s
k
r
ɪ
p
t
/
; аббр.
JS
/ˈdʒeɪ.ɛs./
)&#160;—
мультипарадигменный
язык программирования
. Поддерживает
объектно-ориентированный
,
императивный
и
функциональный
стили. Является реализацией языка
ECMAScript
(стандарт ECMA-262
&#91;8&#93;
).
JavaScript обычно используется как встраиваемый язык для программного доступа к объектам
приложений
. Наиболее широкое применение находит в
браузерах
как язык сценариев для придания
интерактивности
веб-страницам
&#91;9&#93;
.
Основные архитектурные черты:
динамическая типизация
,
слабая типизация
,
автоматическое управление памятью
,
прототипное программирование
, функции как
объекты первого класса
.
На JavaScript оказали влияние многие языки, при разработке была цель сделать язык похожим на Java, но при этом лёгким для использования
непрограммистами
. Языком JavaScript не владеет какая-либо компания или организация, что отличает его от ряда языков программирования, используемых в веб-разработке
&#91;~ 1&#93;
&#91;10&#93;
.
Название «JavaScript» является зарегистрированным
товарным знаком
компании
Oracle Corporation
в США
&#91;11&#93;
.
Содержание
1
История
1.1
Предпосылки
1.2
JavaScript
1.3
Популярность
2
Возможности языка
3
Семантика и синтаксис
3.1
Структура языка
3.1.1
Ядро
3.1.2
Объектная модель браузера
3.1.3
Объектная модель документа
3.2
Встраивание в веб-страницы
3.2.1
Расположение внутри страницы
3.2.2
Расположение внутри тега
3.2.3
Вынесение в отдельный файл
3.2.4
Атрибуты элемента script
4
Область применения
4.1
Веб-приложения
4.1.1
AJAX
4.1.2
Comet
4.1.3
Браузерные операционные системы
4.2
Букмарклеты
4.3
Пользовательские скрипты в браузере
4.4
Серверные приложения
4.5
Мобильные приложения
4.6
Виджеты
4.7
Прикладное программное обеспечение
4.8
Манипуляция объектами приложений
4.9
Офисные приложения
4.9.1
Microsoft Office
4.9.2
OpenOffice.org
4.10
Обучение информатике
5
Версии
6
Библиотеки JavaScript
7
Отладка
8
Средства тестирования
9
Связь с другими языками
9.1
Взаимное влияние
9.1.1
JavaScript и Java
9.2
Реализация
9.3
Взаимодействие
10
Поддержка браузерами
10.1
Наборы тестов
10.2
Безопасность
10.2.1
Межсайтовые уязвимости
10.2.2
Неуместное доверие на стороне клиента
10.2.3
Ошибки в браузере, плагинах и расширениях
10.2.4
Ошибки реализации песочницы
11
См. также
12
Примечания
12.1
Спецификации
12.2
Комментарии
13
Ссылки
13.1
Документация
13.2
Справочники
13.3
Тематические ресурсы
13.4
Блоги известных авторов книг по JavaScript
История
[
править
|
править код
]
Предпосылки
[
править
|
править код
]
В
1992 году
компания
Nombas
(впоследствии приобретённая
Openwave
[en]
) начала разработку встраиваемого скриптового языка
Cmm
(Си-минус-минус), который, по замыслу разработчиков, должен был стать достаточно мощным, чтобы заменить
макросы
, сохраняя при этом схожесть с Си, чтобы разработчикам не составляло труда изучить его
&#91;12&#93;
. Главным отличием от Си была работа с памятью. В новом языке всё управление памятью осуществлялось автоматически: не было необходимости создавать
буферы
, объявлять переменные, осуществлять преобразование типов. В остальном языки сильно походили друг на друга: в частности,
Cmm
поддерживал стандартные функции и операторы Си
&#91;13&#93;
.
Cmm
был переименован в
ScriptEase
, поскольку исходное название звучало слишком негативно, а упоминание в нём Си «отпугивало» людей
&#91;12&#93;
&#91;14&#93;
.
На основе этого языка был создан
проприетарный продукт
CEnvi
. В конце ноября
1995 года
Nombas
разработала версию
CEnvi
, внедряемую в веб-страницы. Страницы, которые можно было изменять с помощью скриптового языка, получили название
Espresso Pages
&#160;— они демонстрировали использование скриптового языка для создания игры, проверки пользовательского ввода в формы и создания анимации.
Espresso Pages
позиционировались как
демоверсия
, призванная помочь представить, что случится, если в браузер будет внедрён язык
Cmm
. Работали они только в 16-битовом
Netscape Navigator
под управлением Windows
&#91;15&#93;
.
JavaScript
[
править
|
править код
]
Брендан Эйх
&#91;16&#93;
Перед
Бренданом Эйхом
, нанятым в компанию
Netscape
4 апреля
1995 года
&#91;17&#93;
, была поставлена задача внедрить язык программирования
Scheme
или что-то похожее в браузер Netscape. Поскольку требования были размыты, Эйха перевели в группу, ответственную за серверные продукты, где он проработал месяц, занимаясь улучшением протокола
HTTP
&#91;17&#93;
. В мае разработчик был переброшен обратно, в команду, занимающуюся клиентской частью (браузером), где он немедленно начал разрабатывать концепцию нового языка программирования. Менеджмент разработки браузера, включая Тома Пакина (Tom Paquin),
Михаэля Тоя
(
англ.
)
, Рика Шелла (Rick Schell), был убеждён, что Netscape должен поддерживать язык программирования, встраиваемый в
HTML
-код страницы
&#91;18&#93;
.
Марк Андрессен
Билл Джой
Помимо Брендана Эйха в разработке участвовали
&#91;17&#93;
сооснователь
&#91;19&#93;
Netscape Communications
Марк Андрессен
и сооснователь
Sun Microsystems
Билл Джой
: чтобы успеть закончить работы над языком к релизу браузера, компании заключили соглашение о сотрудничестве в разработке
&#91;20&#93;
. Они ставили перед собой цель обеспечить «язык для склеивания» составляющих частей веб-ресурса: изображений, плагинов, Java-апплетов, который был бы удобен для веб-дизайнеров и программистов, не обладающих высокой квалификацией
&#91;17&#93;
.
Первоначально язык назывался Mocha
&#91;21&#93;
&#91;22&#93;
&#91;23&#93;
, затем он был переименован в LiveScript
&#91;23&#93;
&#91;24&#93;
и предназначался как для программирования на стороне клиента, так и для программирования на стороне сервера (там он должен был называться LiveWire)
&#91;20&#93;
. На синтаксис оказали влияние языки
Си
и
Java
, и, поскольку Java в то время было
модным словом
&#91;17&#93;
&#91;20&#93;
, 4 декабря 1995 года LiveScript переименовали в JavaScript
&#91;25&#93;
, получив соответствующую лицензию у
Sun
. Анонс JavaScript со стороны представителей Netscape и Sun состоялся накануне выпуска второй
бета-версии
Netscape Navigator
&#91;17&#93;
. В нём декларируется, что 28 лидирующих ИТ-компаний выразили намерение использовать в своих будущих продуктах JavaScript как объектный скриптовый язык с открытым стандартом
&#91;26&#93;
.
В
1996 году
компания
Microsoft
выпустила аналог языка JavaScript, названный
JScript
. Анонсирован этот язык был 18 июля 1996 года
&#91;27&#93;
. Первым браузером, поддерживающим эту реализацию, был
Internet Explorer
3.0.
По инициативе компании Netscape
&#91;28&#93;
&#91;29&#93;
была проведена стандартизация языка ассоциацией
ECMA
. Стандартизированная версия имеет название
ECMAScript
, описывается стандартом
ECMA-262
. Первой версии спецификации соответствовал JavaScript версии 1.1, а также языки JScript и
ScriptEasy
&#91;12&#93;
&#91;20&#93;
.
Популярность
[
править
|
править код
]
В статье «The World’s Most Misunderstood Programming Language Has Become the World’s Most Popular Programming Language»
&#91;30&#93;
(&#160;
(рус.)
«Самый неправильно понятый язык программирования в мире стал самым популярным в мире языком программирования»)
Дуглас Крокфорд
утверждает, что лидирующую позицию JavaScript занял в связи с развитием
AJAX
, поскольку браузер стал превалирующей системой доставки приложений. Он также констатирует растущую популярность JavaScript, то, что этот язык встраивается в приложения, отмечает значимость языка.
Согласно
TIOBE Index
, базирующемуся на данных поисковых систем
Google
,
MSN
,
Yahoo!
,
Википедия
и
YouTube
, в апреле 2015 года JavaScript находился на
6
месте (год назад на
9
)
&#91;31&#93;
.
По данным
Black Duck Software
(
англ.
)
&#91;32&#93;
в разработке
открытого программного обеспечения
доля использования JavaScript росла. 36&#160;% проектов, выпуски которых состоялись с августа 2008 по август 2009&#160;гг., включают JavaScript, наиболее часто используемый язык программирования с быстрорастущей популярностью. 80&#160;% открытого программного обеспечения использует Си, C++, Java,
Shell
и JavaScript. При этом JavaScript&#160;— единственный из этих языков, чья доля использования увеличилась (более чем на 2 процента, если считать в строках кода)
&#91;33&#93;
.
JavaScript является самым популярным языком программирования, используемым для разработки веб-приложений
на стороне клиента
(
англ.
)
&#91;34&#93;
&#91;35&#93;
.
Возможности языка
[
править
|
править код
]
JavaScript является
объектно-ориентированным
языком, но используемое в языке
прототипирование
&#91;36&#93;
&#91;37&#93;
обуславливает отличия в работе с объектами по сравнению с традиционными класс-ориентированными языками. Кроме того, JavaScript имеет ряд свойств, присущих
функциональным языкам
&#160;— функции как
объекты первого класса
, объекты как списки,
карринг
,
анонимные функции
,
замыкания
&#91;38&#93;
&#160;— что придаёт языку дополнительную гибкость.
Несмотря на схожий с Си синтаксис, JavaScript по сравнению с языком
Си
имеет коренные отличия:
объекты
с возможностью
интроспекции
;
функции как
объекты первого класса
;
автоматическое
приведение типов
;
автоматическая
сборка мусора
;
анонимные функции
.
В языке отсутствуют такие полезные вещи
&#91;39&#93;
, как:
стандартная библиотека
: в частности, отсутствует
интерфейс программирования приложений
по работе с файловой системой, управлению потоками ввода-вывода, базовых типов для
бинарных данных
;
стандартные
интерфейсы
к
веб-серверам
и
базам данных
;
система управления пакетами
&#91;~ 2&#93;
, которая бы отслеживала зависимости и автоматически устанавливала их.
Семантика и синтаксис
[
править
|
править код
]
Синтаксис
языка JavaScript во многом напоминает синтаксис Си и
Java
,
семантически
же язык гораздо ближе к
Self
,
Smalltalk
или даже
Лиспу
&#91;30&#93;
&#91;40&#93;
&#91;Спецификация 2&#93;
.
В JavaScript:
все
идентификаторы
регистрозависимы,
в названиях переменных можно использовать
буквы
,
подчёркивание
,
символ доллара
,
арабские цифры
,
названия переменных не могут начинаться с цифры,
для оформления однострочных
комментариев
используются
//
, многострочные и внутристрочные комментарии начинаются с
/*
и заканчиваются
*/
.
Структура языка
[
править
|
править код
]
Структурно JavaScript можно представить в виде объединения трёх чётко различимых друг от друга частей
&#91;41&#93;
&#91;42&#93;
&#91;43&#93;
&#91;44&#93;
:
ядро (ECMAScript),
объектная модель браузера (
Browser Object Model или BOM
(
англ.
)
),
объектная модель документа (
Document Object Model или DOM
).
Если рассматривать JavaScript в отличных от браузера окружениях, то объектная модель браузера и объектная модель документа могут не поддерживаться
&#91;43&#93;
.
Объектную модель документа иногда рассматривают как отдельную от JavaScript сущность
&#91;45&#93;
&#91;46&#93;
&#91;Спецификация 3&#93;
, что согласуется с определением DOM как независимого от языка интерфейса документа
&#91;47&#93;
&#91;~ 3&#93;
. В противоположность этому ряд авторов находят BOM и DOM тесно взаимосвязанными
&#91;48&#93;
&#91;49&#93;
.
Ядро
[
править
|
править код
]
Основная статья:
ECMAScript
ECMAScript не является браузерным языком и в нём не определяются методы ввода и вывода информации
&#91;41&#93;
. Это, скорее, основа для построения скриптовых языков. Спецификация ECMAScript описывает типы данных, инструкции, ключевые и
зарезервированные
слова,
операторы
, объекты,
регулярные выражения
, не ограничивая авторов производных языков в расширении их новыми составляющими.
Объектная модель браузера
[
править
|
править код
]
Объектная модель браузера&#160;— браузер-специфичная часть языка
&#91;43&#93;
&#91;50&#93;
, являющаяся прослойкой между ядром и объектной моделью документа
&#91;51&#93;
. Основное предназначение объектной модели браузера&#160;— управление окнами браузера и обеспечение их взаимодействия. Каждое из окон браузера представляется объектом
window
, центральным объектом DOM. Объектная модель браузера на данный момент не стандартизирована
&#91;43&#93;
&#91;52&#93;
, однако спецификация находится в разработке
WHATWG
&#91;51&#93;
&#91;Спецификация 4&#93;
и
W3C
&#91;42&#93;
&#91;Спецификация 5&#93;
.
Помимо управления окнами, в рамках объектной модели браузера, браузерами обычно обеспечивается поддержка следующих сущностей
&#91;51&#93;
&#91;52&#93;
:
управление
фреймами
,
поддержка задержки в исполнении кода и зацикливания с задержкой,
системные диалоги,
управление адресом открытой страницы,
управление информацией о браузере,
управление информацией о параметрах
монитора
,
ограниченное управление историей просмотра страниц,
поддержка работы с
HTTP cookie
.
Объектная модель документа
[
править
|
править код
]
Основная статья:
Document Object Model
Объектная модель документа&#160;—
интерфейс программирования приложений
для HTML и
XML
-документов
&#91;53&#93;
. Согласно DOM, документ (например, веб-страница) может быть представлен в виде дерева объектов, обладающих рядом свойств, которые позволяют производить с ним различные манипуляции:
генерация и добавление узлов,
получение узлов,
изменение узлов,
изменение связей между узлами,
удаление узлов.
Встраивание в веб-страницы
[
править
|
править код
]
Расположение внутри страницы
[
править
|
править код
]
Для добавления JavaScript-кода на страницу, можно использовать теги &lt;script&gt;&lt;/script&gt;
&#91;Спецификация 6&#93;
, которые рекомендуется, но не обязательно, помещать внутри контейнера &lt;head&gt;. Контейнеров &lt;script&gt; в одном документе может быть сколько угодно. Атрибут «type='text/javascript'» указывать необязательно, данное значение используется по умолчанию
&#91;54&#93;
.
Скрипт, выводящий
модальное окно
с классической надписью «Hello, World!» внутри браузера:
&lt;
script
type
=
&quot;application/javascript&quot;
&gt;
alert
(
&#39;Hello, World!&#39;
);
&lt;
/script&gt;
Расположение внутри тега
[
править
|
править код
]
Спецификация HTML описывает набор атрибутов, используемых для задания обработчиков событий
&#91;Спецификация 7&#93;
. Пример использования:
&lt;
a
href
=
&quot;delete.php&quot;
onclick
=
&quot;return confirm(&#39;Вы уверены?&#39;);&quot;
&gt;
Удалить
&lt;/
a
&gt;
В приведённом примере при нажатии на ссылку функция
confirm('Вы уверены?');
вызывает модальное окно с надписью «Вы уверены?», а
return false;
блокирует переход по ссылке. Разумеется, этот код будет работать только если в браузере есть и включена поддержка JavaScript, иначе переход по ссылке произойдёт без предупреждения.
Использование кода JavaScript в контексте разметки страницы расценивается в рамках
ненавязчивого JavaScript
как плохая практика. Аналогом (при условии снабжения ссылки идентификатором alertLink)
&lt;
a
href
=
&quot;delete.php&quot;
id
=
&quot;alertLink&quot;
&gt;
Удалить
&lt;/
a
&gt;
приведённого примера может являться, например, следующий фрагмент JavaScript:
window
.
onload
=
function
()
{
var
linkWithAlert
=
document
.
getElementById
(
&quot;alertLink&quot;
);
linkWithAlert
.
onclick
=
function
()
{
return
confirm
(
&#39;Вы уверены?&#39;
);
};
};
Вынесение в отдельный файл
[
править
|
править код
]
Есть и третья возможность подключения JavaScript&#160;— написать скрипт в отдельном файле, а потом подключить его с помощью конструкции
&lt;
head
&gt;
&lt;
script
type
=
&quot;application/javascript&quot;
src
=
&quot;http://Путь_к_файлу_со_скриптом&quot;
&gt;
&lt;/
script
&gt;
&lt;/
head
&gt;
Атрибуты элемента script
[
править
|
править код
]
Элемент script, широко используемый для подключения к странице JavaScript, имеет несколько атрибутов.
необязательный
&#91;Спецификация 8&#93;
атрибут
type
для указания
MIME-типа
содержимого.
В
запросе комментариев
RFC-4329, определяющем
&#91;55&#93;
MIME-тип, соответствующий JavaScript, указано
:
&#91;5&#93;
Медиатипы
application/javascript
,
application/ecmascript
,
которые также определяются в этом документе, предназначены для практического использования, им следует отдавать предпочтение.
Оригинальный текст&#160;
(англ.)
Use of the "text" top-level type for this kind of content is known to be problematic.  This document thus defines
text/javascript
and
text/ecmascript
but marks them as "obsolete".  Use of experimental and unregistered media types, as listed in part above, is discouraged.
The media types,
application/javascript
application/ecmascript
which are also defined in this document, are intended for common use and should be used instead.
необязательный атрибут
src
, принимающий в качестве значения адрес к файлу со скриптом.
необязательный атрибут
charset
, используемый вместе с
src
для указания используемой кодировки внешнего файла.
необязательный атрибут
defer
указывает, что получение скрипта происходит асинхронно, но выполнение следует отложить до тех пор, пока страница не будет загружена целиком.
необязательный атрибут
async
указывает, что получение скрипта происходит асинхронно, а выполнение будет произведено сразу по завершению скачивания. Очерёдность выполнения скриптов не гарантируется.
При этом атрибут language (
language="JavaScript"
), несмотря на его активное использование (в 2008 году этот атрибут был наиболее часто используемым у тега
&lt;script&gt;
&#91;56&#93;
), относится к не рекомендуемым (deprecated), отсутствует в
DTD
, поэтому считается некорректным
&#91;57&#93;
.
Область применения
[
править
|
править код
]
Веб-приложения
[
править
|
править код
]
Основная статья:
Веб-приложение
JavaScript используется в клиентской части веб-приложений: клиент-серверных программ, в котором клиентом является браузер, а сервером&#160;— веб-сервер, имеющих распределённую между сервером и клиентом логику. Обмен информацией в веб-приложениях происходит по сети. Одним из преимуществ такого подхода является тот факт, что клиенты не зависят от конкретной операционной системы пользователя, поэтому веб-приложения являются кроссплатформенными сервисами.
AJAX
[
править
|
править код
]
Основная статья:
AJAX
JavaScript
в Викиучебнике
JavaScript
на Викискладе
JavaScript
в Викиновостях
JavaScript используется в
AJAX
, популярном подходе к построению интерактивных пользовательских интерфейсов веб-приложений, заключающемся в «фоновом» асинхронном обмене данными браузера с веб-сервером. В результате, при обновлении данных веб-страница не перезагружается полностью и интерфейс веб-приложения становится быстрее, чем это происходит при традиционном подходе (без применения AJAX).
Comet
[
править
|
править код
]
Основная статья:
Comet (программирование)
Comet&#160;— широкое понятие, описывающее механизм работы веб-приложений, использующих постоянные HTTP-соединения, что позволяет веб-серверу отправлять данные браузеру без дополнительного запроса со стороны браузера. Для таких приложений используются технологии, непосредственно поддерживаемые браузерами. В частности, в них широко используется JavaScript.
Браузерные операционные системы
[
править
|
править код
]
Основная статья:
WebOS
Пример сеанса eyeOS
JavaScript широко используется в
браузерных операционных системах
. Так, например, исходный код
IndraDesktop WebOS
на 75&#160;% состоит из JavaScript
&#91;58&#93;
, код браузерной операционной системы
IntOS
&#160;— на 70&#160;%
&#91;59&#93;
. Доля JavaScript в исходном коде
eyeOS
&#160;— 5&#160;%
&#91;60&#93;
, однако и в рамках этой операционной системы JavaScript играет важную роль, участвуя в визуализации на клиенте и являясь необходимым механизмом для коммуницирования клиента и сервера
&#91;61&#93;
.
Букмарклеты
[
править
|
править код
]
Основная статья:
Букмарклет
JavaScript используется для создания небольших программ, размещаемых в закладки браузера. При этом используются URL-адреса со спецификатором
javascript:
&#91;62&#93;
.
Пользовательские скрипты в браузере
[
править
|
править код
]
Пользовательские скрипты в браузере&#160;— это программы, написанные на JavaScript, выполняемые в браузере пользователя при загрузке страницы. Они позволяют автоматически заполнять формы, переформатировать страницы, скрывать нежелательное содержимое и встраивать желательное для отображения содержимое, изменять поведение клиентской части веб-приложений, добавлять элементы управления на страницу и&#160;т.&#160;д.
Для управления пользовательскими скриптами в
Mozilla Firefox
используется расширение
Greasemonkey
;
Opera
&#91;63&#93;
&#91;64&#93;
&#91;65&#93;
и
Google Chrome
&#91;66&#93;
предоставляют средства поддержки пользовательских скриптов и возможности для выполнения ряда скриптов Greasemonkey.
Серверные приложения
[
править
|
править код
]
Приложения, написанные на JavaScript, могут исполняться на серверах, использующих
Java
6 и более поздних версий
&#91;67&#93;
. Это обстоятельство используется для построения серверных приложений, позволяющих обрабатывать JavaScript на стороне сервера.
Помимо Java 6, существует ряд платформ, использующих существующие движки (интерпретаторы) JavaScript для исполнения серверных приложений. (Как правило, речь идёт о повторном использовании движков, ранее созданных для исполнения кода JavaScript в браузерах WWW.)
Платформы исполнения серверных приложений на JavaScript
Название
Используемый движок JavaScript
Языки, на&#160;которых написан движок и&#160;платформа
Лицензия
Jaxer
&#91;68&#93;
SpiderMonkey
&#91;69&#93;
C++, C
&#91;70&#93;
GPL 3
&#91;71&#93;
persevere-framework
&#91;72&#93;
Rhino
Java
&#91;73&#93;
Модифицированная лицензия BSD
&#91;74&#93;
Helma
&#91;75&#93;
Rhino
Java, JavaScript
&#91;76&#93;
BSD-подобная
Helma License 2.0
&#91;77&#93;
v8cgi
V8
C++, JavaScript
&#91;78&#93;
Лицензия BSD
&#91;79&#93;
node.js
V8
C++
&#91;80&#93;
Лицензия MIT
&#91;81&#93;
JavaScript на стороне сервера используется в проектах
Google
&#91;82&#93;
. Так например,
Google Sites
допускает подстройку с помощью JavaScript-сценариев, исполняемых движком Rhino
&#91;83&#93;
.
Мобильные приложения
[
править
|
править код
]
Перевод мобильных устройств
Palm
на использование
Palm webOS
в качестве операционной системы с
Mojo SDK
в качестве
комплекта средств разработки
&#91;84&#93;
позволяет использовать JavaScript в качестве языка разработки мобильных приложений
&#91;85&#93;
&#91;86&#93;
.
Виджеты
[
править
|
править код
]
Основная статья:
Элемент интерфейса
Виджет&#160;— вспомогательная мини-программа, графический модуль которой размещается в рабочем пространстве соответствующей
родительской программы
(
англ.
)
, служащая для украшения рабочего пространства, развлечения, решения отдельных рабочих задач или быстрого получения информации из интернета без помощи веб-браузера. JavaScript используется как для реализации виджетов, так и для реализации движков виджетов. В частности, при помощи JavaScript реализованы
Apple Dashboard
,
Microsoft Gadgets
(
англ.
)
,
Yahoo!_Widgets
(
англ.
)
,
Google Gadgets
,
Klipfolio Dashboard
(
англ.
)
.
Прикладное программное обеспечение
[
править
|
править код
]
Исходный код и скриншот JavaScript-программы, выполняемой с помощью Seed
JavaScript используется для написания
прикладного ПО
. Например,
16,4&#160;%
исходного кода
Mozilla Firefox
написано на JavaScript
&#91;87&#93;
.
Google Chrome OS
в качестве прикладного ПО использует
веб-приложения
&#91;88&#93;
.
В окружении рабочего стола
GNOME
имеется возможность создавать на JavaScript программы, оперирующие с библиотеками GNOME при помощи
Gjs
,
Seed
(
англ.
)
&#91;89&#93;
.
Манипуляция объектами приложений
[
править
|
править код
]
JavaScript также находит применение в качестве скриптового языка доступа к объектам приложений. Платформа Mozilla (
XUL
/
Gecko
) использует JavaScript. Среди сторонних продуктов, например,
Java
, начиная с версии 6, содержит встроенный интерпретатор JavaScript на базе
Rhino
&#91;67&#93;
. Сценарии JavaScript поддерживаются в таких приложениях Adobe, как
Adobe Photoshop
,
Adobe Dreamweaver
,
Adobe Illustrator
и
Adobe InDesign
.
Офисные приложения
[
править
|
править код
]
JavaScript используется в
офисных приложениях
для автоматизации рутинных действий, написания
макросов
, организации доступа со стороны веб-служб.
Microsoft Office
[
править
|
править код
]
В
Excel Services
2010 добавились
&#91;90&#93;
два новых интерфейса программирования приложений:
REST
API и JavaScript Object Model (
JSOM
).
Excel Services 2010 REST API позволяет
&#91;91&#93;
осуществлять доступ к объектам рабочих книг, таким как таблицы, диаграммы и именованные серии данных; получать изображения, HTML,
Atom
, рабочие книги; устанавливать значения и обновлять вычисления перед запрашиванием элементов
&#91;91&#93;
.
JSOM даёт возможность реагировать на действия пользователя в отношении Excel Web Access (
EWA
), программно взаимодействовать с составляющими EWA. Использование JSOM осуществляется при помощи помещения кода JavaScript на страницу, содержащую компоненты EWA
&#91;90&#93;
.
OpenOffice.org
[
править
|
править код
]
JavaScript&#160;— один из языков программирования, используемых для написания макросов в приложениях, входящих в состав OpenOffice.org
&#91;92&#93;
. В OpenOffice.org интегрирован интерпретатор JavaScript Rhino
&#91;93&#93;
. По состоянию на декабрь 2009 года поддержка JavaScript носила ограниченный характер. Ограничения, присущие
&#91;93&#93;
разработке макросов OpenOffice.org на JavaScript:
среда выполнения JavaScript поддерживает загрузку лишь тех классов Java, которые развёрнуты сценарием JavaScript;
среда выполнения JavaScript не предоставляет сообщения об ошибках, произошедших во время выполнения скрипта;
ещё не реализована поддержка интерактивной разработки JavaScript-сценариев.
В OpenOffice.org имеется редактор и отладчик JavaScript-сценариев
&#91;94&#93;
.
Обучение информатике
[
править
|
править код
]
JavaScript обладает
пропедевтической
ценностью, позволяя сочетать при обучении
информатике
интенсивную практику программирования и широту используемых технологий
&#91;95&#93;
. Преподавание данного языка в школе позволяет создать базу для изучения
веб-программирования
, использовать на уроках творческие проекты
&#91;96&#93;
. Соответствующий курс позволяет обеспечить углубленный уровень изучения информатики и его имеет смысл включать в
элективные
курсы углубленного уровня подготовки
&#91;97&#93;
.
JavaScript&#160;— подходящий язык для обучения
программированию игр
. По сравнению с альтернативами, он функционально достаточен, прост в изучении и в применении, снижает сложность для обучения, мотивирует обучаемых делиться своими играми с другими
&#91;98&#93;
.
Не включённые в книгу
Николаса Закаса
«Professional JavaScript for Web Developers» части о реализации на JavaScript классических
алгоритмов
, техник,
структур данных
, послужили
&#91;99&#93;
началу проекта
Computer science in JavaScript
&#91;~ 4&#93;
.
Версии
[
править
|
править код
]
JavaScript
Соответствующая версия JScript
Существенные изменения
1.0 (
Netscape
2.0, март 1996)
1.0 (ранние версии
IE
3.0, август 1996)
Оригинальная версия языка JavaScript.
1.1 (Netscape 3.0, август 1996)
2.0 (поздние версии IE 3.0, январь 1997)
В данной версии был реализован объект
Array
и устранены наиболее серьёзные ошибки.
1.2 (Netscape 4.0, июнь 1997)
Реализован переключатель
switch
, регулярные выражения. Практически приведён в соответствии с первой редакцией спецификации ECMA-262.
1.3 (Netscape 4.5, октябрь 1998)
3.0 (IE 4.0, октябрь 1997)
Совместим с первой редакцией ECMA-262.
1.4 (только Netscape Server)
4.0 (
Visual Studio
6, нет версии IE)
Применяется только в серверных продуктах Netscape.
5.0 (IE 5.0, март 1999)
5.1 (IE 5.01)
1.5 (Netscape 6.0, ноябрь 2000; также
поздние версии Netscape и
Mozilla
)
5.5 (IE 5.5, июль 2000)
Редакция 3 (декабрь 1999). Совместим с третьей редакцией спецификации ECMA-262.
5.6 (IE 6.0, октябрь 2001)
1.6 (
Gecko
1.8,
Firefox
1.5, ноябрь 2005)
Редакция 3 с некоторыми совместимыми улучшениями:
E4X
, дополнения к
Array
(например,
Array.prototype.forEach
), упрощения для
Array
и
String
&#91;100&#93;
1.7 (Gecko 1.8.1, Firefox 2.0, осень 2006), расширение JavaScript 1.6
Редакция 3, с добавлением всех улучшений из JavaScript 1.6,
генераторов
и
списочных выражений
(
англ.
&#160;
list comprehensions
,
[a*a for (a in iter)]
) из
Python
, блоковых областей с использованием
let
и деструктурирующего присваивания (
var [a, b] = [1, 2]
)
&#91;101&#93;
.
JScript .NET
(
ASP.NET
; нет версии IE)
(Считается, что JScript .NET разработан при участии других членов
ECMA
)
1.8 (Gecko 1.9, Firefox 3.0, осень 2008), расширение JavaScript 1.7
Новая форма записи для функций, сходная с типичными
лямбда-выражениями
,
генераторы
, новые методы итеративной обработки массивов
reduce()
и
reduceRight()
&#91;102&#93;
.
1.8.1 (Gecko 1.9.1, Firefox 3.5)
Встроенная поддержка JSON, метод
getPrototypeOf()
у
Object
, методы
trim()
,
trimLeft()
,
trimRight()
у
String
&#91;103&#93;
2.0
Редакция 4 (разработка не закончена
&#91;104&#93;
, название зарезервировано ECMA, но не было использовано для публикации
&#91;Спецификация 9&#93;
)
Редакция 5 (ранее известная под названием ECMAScript 3.1
&#91;104&#93;
. Финальная версия принята 3 декабря 2009 года
&#91;105&#93;
&#91;106&#93;
.)
Библиотеки JavaScript
[
править
|
править код
]
Основная статья:
Библиотека JavaScript
Для обеспечения высокого
уровня абстракции
и достижения приемлемой степени
кросс-браузерности
при разработке веб-приложений используются библиотеки JavaScript. Они представляют собой набор многократно используемых объектов и функций. Среди известных JavaScript библиотек можно отметить
React.js
,
Vue.js
,
Ember.js
,
Adobe Spry
,
AngularJS
,
Dojo
,
Extjs
,
jQuery
,
Mootools
,
Prototype
,
Qooxdoo
(
англ.
)
,
Underscore
и
Node.js
.
Отладка
[
править
|
править код
]
В JavaScript доступ к отладчикам становится особенно полезным при разработке крупных нетривиальных программ из-за различий в реализациях разных браузеров (в частности, в отношении
объектной модели документа
). Полезно иметь доступ к отладчику для каждого из браузеров, в которых будет работать
веб-приложение
.
По состоянию на ноябрь 2009 года,
Internet Explorer
,
Opera
,
Firefox
,
Safari
, и
Google Chrome
имеют отладчики сценариев.
Internet Explorer имеет три отладчика:
Microsoft Visual Studio
&#160;— самый полный из них, за ним следует
Microsoft Script Editor
(
англ.
)
(компонент
Microsoft Office
&#91;107&#93;
), и, наконец, свободный Microsoft Script Debugger, гораздо более простой, чем два других. Бесплатный Microsoft Visual Web Developer Express предоставляет ограниченную версию с отладочной функцией JavaScript в Microsoft Visual Studio. В восьмой версии в IE вместе с инструментами для разработчиков появился встроенный отладчик.
В Opera также имеется собственный отладчик&#160;—
Opera Dragonfly
&#91;108&#93;
.
Разрабатываемые веб-приложения в Firefox можно отлаживать при помощи встроенных инструментов Firefox Developer Tools.
В Safari входит отладчик JavaScript
WebKit Web Inspector
&#91;109&#93;
. Этот же отладчик доступен и в других браузерах, использующих
WebKit
: Google Chrome,
Arora
,
Rekonq
,
Midori
и др.
Средства тестирования
[
править
|
править код
]
Большинство
фреймворков автоматизированного тестирования
(
англ.
)
JavaScript-кода предполагают запуск тестов в браузере. Это осуществляется при помощи HTML-страницы, являющейся
контекстом тестирования
(
англ.
)
, которая, в свою очередь загружает всё необходимое для осуществления тестирования. Первыми такими фреймворками были
JsUnit
(
англ.
)
(создан в 2001 году),
Selenium
(создан в 2004 году)
&#91;110&#93;
. Альтернатива&#160;— запуск тестов из командной строки. В этом случае используются окружения, отличные от браузера, например, Rhino
&#91;111&#93;
. Одним из первых инструментов такого рода является Crosscheck, позволяющий тестировать код, эмулируя поведение Internet Explorer 6 и Firefox версий 1.0 и 1.5
&#91;112&#93;
. Другой пример фреймворка автоматизированного тестирования JavaScript-кода, не использующего браузер для запуска тестов&#160;— библиотека env.js, созданная Джоном Резигом. Она использует Rhino и при этом содержит эмуляцию окружения браузера и DOM
&#91;113&#93;
.
Blue Ridge, плагин к фреймворку веб-приложений
Ruby on Rails
, позволяет осуществлять
модульное тестирование
JavaScript-кода как в браузере, так и вне его. Это достигается за счёт использования фреймворка автоматизированного тестирования Screw.Unit и Rhino с env.js
&#91;114&#93;
.
Главная проблема систем тестирования, не использующих браузеры, в том, что они используют эмуляции, а не реальные окружения, в которых выполняется код. Это приводит к тому, что успешное прохождение тестов не гарантирует того, что код корректно отработает в браузере
&#91;115&#93;
&#91;116&#93;
. Проблемой систем тестирования, использующих браузер, является сложность работы с ними, необходимость осуществления рутинных неавтоматизированных действий
&#91;117&#93;
. Для решения этого JsTestDriver, фреймворк автоматизированного тестирования, разрабатываемый Google, использует сервер, взаимодействующий с браузерами для осуществления тестирования
&#91;118&#93;
. Сходным образом ведёт себя Selenium Remote Control, входящий во фреймворк автоматизированного тестирования Selenium: он включает в себя сервер, запускающий и завершающий браузеры и действующий как HTTP-прокси для запросов к ним
&#91;119&#93;
. Кроме того, в Selenium содержится Selenium Grid, позволяющий осуществлять одновременное тестирование JavaScript-кода на разных компьютерах с разными окружениями, уменьшая время выполнения тестов
&#91;120&#93;
. Testswarm, имеющее поддержку фреймворков автоматизированного тестирования JavaScript-кода QUnit (библиотека
jQuery
), UnitTestJS (библиотека
Prototype
), JSSpec (библиотека
MooTools
), JsUnit, Selenium и Dojo Objective Harness, представляет собой распределённое средство поддержки
непрерывной интеграции
&#91;121&#93;
.
Негативное свойство, которым может обладать фреймворк автоматизированного тестирования JavaScript-кода&#160;— наличие зависимостей. Это создаёт риск отказа в работе тестируемого кода, успешно проходящего тесты, в среде с отсутствием этих зависимостей. Например, исходная версия JsUnitTest, фреймворка, созданного и использовавшегося для тестирования библиотеки Prototype, зависела от самой Prototype, изменяющего свойства объектов в глобальной области видимости
&#91;122&#93;
. Включение в
библиотеку JavaScript
инструмента тестирования&#160;— распространённая практика. Так YUI Test 3 является частью
Yahoo! UI Library
и может быть безопасно использован для тестирования произвольного JavaScript-кода
&#91;123&#93;
. QUnit&#160;— фреймворк автоматизированного тестирования, созданный разработчиками jQuery
&#91;124&#93;
.
Связь с другими языками
[
править
|
править код
]
Взаимное влияние
[
править
|
править код
]
Стандартизация JavaScript потребовала уйти от проблем с торговыми марками, поэтому стандарт ECMA 262 называет язык ECMAScript, три редакции которого были опубликованы с начала работы над ним в ноябре 1996 года.
Objective-J
&#160;— это строгое компактное надмножество JavaScript, в котором к JavaScript добавлено:
традиционное наследование,
динамическая диспетчеризация методов
в стиле
Smalltalk
/
Objective-C
,
псевдостатичная типизация.
VBScript
от
Microsoft
, подобно JavaScript, может выполняться на стороне клиента в веб-страницах. VBScript имеет синтаксис, производный от
Visual Basic
и поддерживается только в
Internet Explorer
.
JSON
, или объектная нотация JavaScript, это формат обмена данными общего назначения, определённый как подмножество JavaScript.
Scheme
также является родственным JavaScript языком, поскольку оба представляют богатые возможности функционального программирования: JavaScript является динамическим языком, поддерживает гибкие массивы, может легко симулировать s-выражения, имеет поддержку
лямбда-выражений
&#91;125&#93;
.
JavaScript и Java
[
править
|
править код
]
Общим заблуждением является то, что JavaScript аналогичен или тесно связан с
Java
, это не так
&#91;30&#93;
. Оба языка имеют C-подобный синтаксис, являются объектно-ориентированными и как правило широко используются в клиентских веб-приложениях. Из важных различий можно отметить:
Java реализует ООП подход, основанный на
классах
, JavaScript&#160;— на
прототипах
;
Java имеет
статическую типизацию
, JavaScript&#160;—
динамическую типизацию
;
Java загружается из скомпилированного байт-кода; JavaScript интерпретируется напрямую из файла (но часто с незаметной
JIT
-компиляцией).
Реализация
[
править
|
править код
]
На JavaScript реализованы интерпретаторы ряда языков программирования, что позволяет использовать для них как среду выполнения веб-браузер. Им можно найти применение, например, в образовательных целях
&#91;126&#93;
.
HotRuby&#160;—
свободная
реализация виртуальной машины
Ruby
на JavaScript и
Flash
. Позволяет выполнять
байткод
, полученный в результате компиляции
YARV
. Реализует большую часть грамматики Руби. Пока не реализован механизм исключений и большая часть встроенных функций и классов
&#91;127&#93;
. При помощи HotRuby на веб-страницах можно использовать руби-скрипты. Для этого руби-код следует поместить в блок:
&lt;
script
type
=
&quot;text/ruby&quot;
&gt;
…
&lt;/
script
&gt;
HotRuby выделит его, пошлёт на компиляцию удалённому скрипту и затем отобразит результаты работы на странице
&#91;128&#93;
. Данная реализация позволяет осуществлять доступ из Руби к объектам JavaScript
&#91;129&#93;
.
Таблица реализаций языков программирования на JavaScript
Язык
Название реализации
Основные авторы
Лицензия
JavaScript
s-mr
&#91;130&#93;
Andrei Formiga
New BSD
PostScript
WPS
&#91;131&#93;
Tom Hlavaty
?
PDF
Ассемблер
для
MOS Technology 6502
6502asm
&#91;132&#93;
Stian Soreng
GPL
Objective-J
Cappuccino
&#91;133&#93;
Ross Boucher
LGPL
Haskell
ycr2js
&#91;134&#93;
Tom Shackell, Neil Mitchell, Andrew Wilkinson, Mike Dodds, Bob Davie, Dimitry Golubovsky
simple permissive license
Prolog
Monash Toy Prolog
&#91;135&#93;
Lloyd Allison
?
ioctl
&#91;136&#93;
Jan Grant
?
Cat
Cat Interpreter
&#91;137&#93;
Christopher Diggins
Общественное достояние
Scheme
BiwaScheme
&#91;138&#93;
Yutaka Hara
MIT
BASIC
Quite BASIC
&#91;139&#93;
Nikko Strom
бесплатная
проприетарная
Lily
(
англ.
)
Lily
&#91;140&#93;
Bill Orcutt
MIT
Forth
wForth
&#91;141&#93;
K Jacobson
?
PHP
phype
&#91;142&#93;
casperbp, hjelmen0
Artistic license
(
англ.
)
&#91;143&#93;
Python 3
Brython
&#91;144&#93;
?
?
Oberon 07
oberonjs
&#91;145&#93;
Vlad Folts
MIT
Взаимодействие
[
править
|
править код
]
В некоторых языках программирования существуют средства поддержки взаимодействия с JavaScript-кодом.
Для
PHP
имеется пакет HTML Javascript, предоставляющий интерфейс создания простых JavaScript-программ
&#91;146&#93;
.
Соответствующий пакет для
Tcl
называется&#160;::javascript. Он предоставляет команды генерации кода HTML и JavaScript
&#91;147&#93;
.
Пакет для
Perl
Data::JavaScript позволяет переносить структуры данных Perl в JavaScript-код
&#91;148&#93;
.
Поддержка браузерами
[
править
|
править код
]
Информация в этом разделе устарела.
Вы можете помочь проекту,
обновив его
и убрав после этого данный шаблон.
На сегодняшний день поддержку JavaScript обеспечивают современные версии всех наиболее часто используемых браузеров. В
Internet Explorer
,
Opera
,
Mozilla Firefox
,
Safari
,
Google Chrome
имеется полная поддержка третьей редакции ECMA-262. При этом в Mozilla Firefox предпринята попытка осуществления поддержки четвёртой редакции спецификации, а первым браузером, в котором появилась неполная поддержка спецификации 3.1, явился Internet Explorer 8
&#91;149&#93;
.
Допущенные разработчиками популярных браузеров ошибки в реализации спецификации, как правило, незначительны
&#91;150&#93;
. По состоянию на ноябрь 2009 года объектная модель документа имеет более ограниченную поддержку
&#91;151&#93;
.
По мнению создателя языка, поддержка в Internet Explorer компанией Microsoft одного из существующих и применяющихся в других браузерах быстрых
движков JavaScript
способно привести к появлению приложений, работающих с
трёхмерной графикой
, написанных на JavaScript 3D-игр, использованию JavaScript в задачах, в которых ранее применялась технология
Adobe Flash
&#91;152&#93;
.
Наборы тестов
[
править
|
править код
]
Регрессионное тестирование
соответствия браузеров третьей редакции спецификации ECMA-262 может осуществляться
&#91;153&#93;
&#91;154&#93;
с помощью разработанного Google инструмента для тестирования соответствия спецификации ECMAScript
Sputnik
[en]
, включающего более пяти тысяч
вариантов тестирования
&#91;155&#93;
и получившего название по имени российской команды Google
&#91;155&#93;
, а также написанной Юрием Зайцевым оболочки sputniktests-webrunner
&#91;156&#93;
или сервиса Google
&#91;157&#93;
. Варианты тестирования, входящие в Sputnik обновляются в связи с выходом пятой редакции спецификации ECMA-262, отражая изменения по сравнению с её предыдущей редакцией
&#91;158&#93;
.
ECMAScript 5 Conformance Suite
&#91;159&#93;
представляет собой набор тестов, выпущенный Microsoft под
лицензией BSD
&#91;160&#93;
, для проверки соответствия реализации языка ECMAScript его пятой редакции спецификации. По состоянию на 12 марта 2010 года в пакете насчитывалось 1236 вариантов тестирования, он имел версию 0.2
альфа
и количество загрузок за три месяца составляло 178
&#91;161&#93;
.
Для проверки корректности реализаций JavaScript имеется набор тестов JavaScript Test Suite, выпущенных Mozilla
&#91;162&#93;
&#91;163&#93;
.
Безопасность
[
править
|
править код
]
JavaScript позволяет потенциальным авторам вредоносного кода запускать его на любом компьютере сети: для этого достаточно открыть на нём веб-страницу. Это обуславливает наличие двух принципиальных ограничений:
JavaScript-программы выполняются в
песочнице
, в которой они могут выполнять только ограниченный круг действий, а не задачи программирования общего назначения (например, создание файлов, работа с
сокетами
)
&#91;164&#93;
,
для JavaScript-кода применяется
политика общего происхождения
, в соответствии с которой скрипт, встроенный в страницу, не может получить доступ к ряду свойств объектов другой страницы (в частности, к большинству свойств объекта
document
) при отличии в
протоколе
,
хосте
и номере
порта
этих страниц
&#91;165&#93;
.
Помимо этого, разработчики браузеров вносят дополнительные ограничения в ответ на имеющие место злоупотребления. Так появился, в частности, запрет на открытие окна, размер одной стороны которого меньше ста
пикселей
&#91;164&#93;
.
Межсайтовые уязвимости
[
править
|
править код
]
Основные статьи:
Межсайтовый скриптинг
,
Подделка межсайтовых запросов
Общая проблема, касающаяся JavaScript&#160;—
межсайтовый скриптинг
или XSS, нарушение политики общего происхождения. Уязвимости XSS имеют место в ситуациях, когда злоумышленник имеет возможность поместить скрипт на страницу, демонстрирующуюся пользователю. В этом случае скрипт получает доступ к сайту с правами этого пользователя, что в ряде случаев открывает возможность отсылки конфиденциальной информации, осуществление нежелательных
транзакций
.
Уязвимости XSS также происходят из-за ошибок, допущенных разработчиками браузеров
&#91;166&#93;
.
Другим типом межсайтовой уязвимости является подделка межсайтовых запросов или CSRF. Она заключается в возможности сайта злоумышленника заставить браузер пользователя осуществить нежелательное действие на целевом сайте (например, банковский перевод денег). Такая возможность имеется, если целевой сайт полагается только на
HTTP cookie
или запросы авторизации. В этом случае запросы, инициализированные кодом сайта злоумышленника выполняются так же как запросы пользователя, если он
авторизован
на целевом сайте. Одним из средств защиты от CSRF является осуществление
аутентификации
при любом запросе, который приводит к необратимым последствиям. Также может помочь анализ
HTTP referer
.
Неуместное доверие на стороне клиента
[
править
|
править код
]
Разработчики клиентских приложений, вне зависимости от того, используют они JavaScript или нет, должны осознавать, что последние могут находиться под контролем злоумышленников. Поэтому любая проверка на стороне клиента может быть обойдена, JavaScript может быть как запущен, так и нет. Код, подвергнувшийся
обфускации
может стать объектом
обратной разработки
; данные формы могут быть посланы на сервер, минуя
валидацию
, осуществляемую с помощью JavaScript; скрипты могут быть отключены частично, поэтому, например, надёжную защиту от сохранения изображений с помощью JavaScript осуществить нельзя
&#91;167&#93;
; чрезвычайно неосмотрительно внедрять пароль в JavaScript, исполняемый на клиенте, где он может быть найден злоумышленником.
Ошибки в браузере, плагинах и расширениях
[
править
|
править код
]
JavaScript предоставляет интерфейс к широкому спектру возможностей браузера, некоторые из которых могут содержать ошибки, приводящие, например, к
переполнению буфера
. Это позволяет писать скрипты, приводящие к исполнению произвольного кода на пользовательской системе.
Подобные ошибки выявлялись у часто используемых браузеров, включая Mozilla Firefox
&#91;168&#93;
, Internet Explorer
&#91;169&#93;
, Safari
&#91;170&#93;
. При выявлении потенциально опасных ошибок в браузере и наличия сведений о реализованных
эксплойтах
фирма-производитель и эксперты по безопасности рекомендуют отключать JavaScript до выхода
патча
&#91;171&#93;
&#91;172&#93;
.
Плагины
, такие как
плееры
,
Macromedia Flash
и ряд
ActiveX
компонент, доступных по умолчанию в Internet Explorer, могут также содержать ошибки, эксплуатируемые с помощью JavaScript, что уже случалось ранее
&#91;173&#93;
&#91;174&#93;
.
Расширения Mozilla Firefox
не изолированы друг от друга: одно расширение может исправлять другое, что может использоваться злоумышленниками. На конференции
SecurityByte &amp; Owasp AppSec Asia 2009
Роберто Сагги Ливерани (Roberto Suggi Liverani) и Ник Фримэн (Nick Freeman) продемонстрировали три
эксплойта
в популярных расширениях Firefox, загруженные с сайта более 30 миллионов раз
&#91;175&#93;
.
Ошибки реализации песочницы
[
править
|
править код
]
Браузеры могут запускать JavaScript вне песочницы с привилегиями, необходимыми, например, для создания и удаления файлов. Однако такие привилегии не должны даваться коду из веба.
Неправильное наделение привилегиями JavaScript из веба служило причиной уязвимостей как Internet Explorer
&#91;176&#93;
, так и Mozilla Firefox
&#91;177&#93;
.
Microsoft Windows
позволяет файлам с кодом JavaScript запускаться как обычным программам без того, чтобы быть помещёнными в песочницу. Это делает возможным создание
троянских программ
&#91;178&#93;
.
См. также
[
править
|
править код
]
JavaScript
в Викиучебнике
JavaScript
на Викискладе
JavaScript
в Викиновостях
CoffeeScript
Библиотека JavaScript
TypeScript
Примечания
[
править
|
править код
]
↑
Alexei White.
&#32;
Major JavaScript Engines
&#32;&#47;&#47;&#32;JavaScript Programmer's Reference.&#160;— Indianapolis, IN 46256: Wiley Publishing, Inc., 2009.&#160;— P.&#160;12—13.&#160;— (Programmer's Reference).&#160;—
ISBN 978-0-470-34472-9
.
↑
Nicholas C. Zakas.
&#32;
Next-Generation JavaScript Engines
&#32;&#47;&#47;&#32;High Performance JavaScript&#32;&#47;&#32;Editor: Mary E. Treseler.&#160;— 1st ed.&#160;— 1005 Gravenstein Highway North, Sebastopol, CA 95472:
O’Reilly Media
, 2010.&#160;— P.&#160;xiii.&#160;—
ISBN 978-0-596-80279-0
.
↑
1
2
3
4
5
6
Dr. Axel Rauschmayer.
&#32;
The Nature of JavaScript
&#32;&#47;&#47;&#32;
Speaking JavaScript
.&#160;— First Edition.&#160;— O’Reilly Media, 2014.&#160;— P.&#160;41.&#160;—
ISBN 978-1-449-36503-5
.
↑
1
2
https://www.iana.org/assignments/media-types/application/javascript
↑
1
2
Hoehrmann B.
&#32;
RFC4329
&#160;
(англ.)
&#32;(txt).&#32; Рабочая группа сетевых технологий
специальной комиссии интернет-разработок
&#32;(Апрель 2006).&#160;— Текст запроса комментариев RFC4329.&#32;
Проверено 28 сентября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
18.2.1 Элемент SCRIPT
&#160;
(англ.)
.&#32;
Спецификация HTML 4.01
.&#32; W3C&#32;(24 декабря 1999 г.).&#160;— Описание элемента Script.&#32;
Проверено 25 сентября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
ECMAScript 2018 Language Specification
↑
ECMAScript Language Specification
&#160;
(неопр.)
.
↑
Флэнаган Д.
&#32;JavaScript. Карманный справочник. Сделайте веб-страницы интерактивными!&#32;&#47;&#32;Перевод А.Г. Сысонюк.&#160;— Москва.: Издательский дом "Вильямс", 2015.&#160;— С.&#160;320.&#160;—
1000 экз.
&#160;—
ISBN 978-5-8459-1948-9
(рус.).
↑
Д. Рейсиг.
&#32;
4. Инструменты отладки и тестирования
&#32;&#47;&#47;&#32;JavaScript. Профессиональные приёмы программирования&#32;&#61;&#32;Pro JavaScript™ Techniques&#32;&#47;&#32;Перевод Н. Вильчинский.&#160;—
СПб.
:
Питер
, 2008.&#160;— С.&#160;76.&#160;— (Библиотека программиста).&#160;—
2500 экз.
&#160;—
ISBN 978-5-91180-904-1
.
↑
Trademark Snap Shot Prosecution History for Review Correspondence
&#160;
(англ.)
.&#32; United States Patent and Trademark Office.&#32;
Проверено 22 июня 2011.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
1
2
3
History of scripting
&#160;
(англ.)
.&#32; Nombas.&#32;
Архивировано
2&#160;февраля 2006&#160;года.
↑
Ford S., Wells D., Wells N.
&#32;
Web Programming Languages
&#160;
(англ.)
&#32;(1&#160;September 1997).&#32;
Проверено 17 ноября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Zakas, Nicholas
&#32;
History and evolution of Javascript
&#160;
(англ.)
.&#32;
Проверено 17 ноября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Noorda, Brent
&#32;
information blitz
&#160;
(англ.)
&#32;(27&#160;November 1995).&#160;— Страница, содержащая письмо президента Nombas Брента Ноорда с анонсированием Espresso Pages.&#32;
Проверено 17 ноября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
JavaScript. Библия пользователя
&#32;&#61;&#32;JavaScript. Bible&#32;&#47;&#32;Денни Гудман (Danny Goodman), Майкл Моррисон (Michael Morrison); пер. с англ.
И. В. Василенко
.&#160;— 5-е изд.&#160;— Москва, Санкт-Петербург, Киев: Дилектика, 2006.&#160;— С.&#160;3, 26.&#160;— 1184&#160;с.&#160;—
3000 экз.
&#160;—
ISBN 5-8459-1027-7
.
↑
1
2
3
4
5
6
Hamilton, Naomi
&#32;
The A-Z of Programming Languages: JavaScript
&#160;
(англ.)
.&#32;
a-z of programming languages
.&#32; ComputerWorld&#32;(31&#160;July 2008).&#32;
Проверено 18 ноября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Eich, Brendan
&#32;
Popularity
&#160;
(англ.)
&#160;
(недоступная ссылка)
&#32;(3&#160;April 2008).&#32;
Проверено 18 ноября 2009.
&#32;
Архивировано
7&#160;апреля 2008&#160;года.
↑
Frommer, Dan
&#32;
Marc Andreessen Joins Facebook Board
&#160;
(англ.)
&#32;(30&#160;June 2008).&#32;
Проверено 18 ноября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
1
2
3
4
Zakas N.
&#32;
A Short History
&#32;&#47;&#47;&#32;Professional JavaScript for Web Developers.&#160;— 2nd ed.&#160;— USA, Canada: Wiley Publishing, Inc., 2009.&#160;— P.&#160;1, 2.&#160;—
ISBN 978-0-470-22780-0
.
↑
Brendan Eich.
&#32;
Popularity
&#160;
(англ.)
.&#32; личный блог&#32;(3 апр 2008).&#32;
Проверено 18 мар 2015.
↑
Brendan Eich.
&#32;
New JavaScript Engine Module Owner
&#160;
(англ.)
.&#32; личный блог&#32;(21 июн 2011).&#32;
Проверено 18 мар 2015.
↑
1
2
JavaScript. Карманный справочник. Необходимый код и команды
&#32;&#61;&#32;JavaScript. Phrasebook. Essential code and commands&#32;&#47;&#32;Кристиан Уэнц (Cristian Wenz); пер. с англ.
И. В. Берштейн
.&#160;— Москва, Санкт-Петербург, Киев: ООО "И. Д. Вильямс", 2008.&#160;— С.&#160;18.&#160;— 272&#160;с.&#160;—
2000 экз.
&#160;—
ISBN 978-5-8459-1186-5
.
↑
Paul Krill.
&#32;
JavaScript creator ponders past, future
.&#32;
Mozilla's Brendan Eich describes JavaScript's history, the upcoming upgrade, and disagreements with Microsoft
&#160;
(англ.)
.
&#32; InfoWorld&#32;(23&#160;June 2008)
.
&#160;— «Eich: That’s right. It was all within six months from May till December (1995) that it was Mocha and then LiveScript. And then in early December, Netscape and Sun did a license agreement and it became JavaScript.».&#32;
Проверено 3 мая 2015.
↑
Bellis, Mary
&#32;
The History of JavaScript
&#160;
(англ.)
.&#32;
About.com Guide
&#32;(30&#160;June 2008).&#32;
Проверено 18 ноября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Netscape and Sun Announce Javascript(TM), the Open, Cross-Platform Object Scripting Language for Enterprise Networks and the Internet
&#160;
(англ.)
&#160;
(недоступная ссылка)
.&#32; Netscape Communications, Sun Microsystems.&#160;— Анонс JavaScript.&#32;
Проверено 17 ноября 2009.
&#32;
Архивировано
16&#160;декабря 1996&#160;года.
↑
Microsoft Announces ActiveX Scripting
&#160;
(англ.)
.&#32; Microsoft&#32;(18&#160;July 1996).&#160;— Анонс JScript.&#32;
Проверено 17 ноября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Silwa C.
&#32;
Scripting standard coming
&#160;
(англ.)
&#160;// Network World&#160;: журнал.&#160;— IDG Network World Inc, 1996.&#160;—
Vol. 13
,
no. 49
.&#160;—
P. 10
.
↑
Сибах, Питер
&#32;
Знакомимся с ECMAscript
&#160;
(неопр.)
.&#32;
developerWorks Россия
.&#32; IBM&#32;(13&#160;июня 2007).&#32;
Проверено 19 ноября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
1
2
3
Crockford, Douglas
&#32;
The World's Most Misunderstood Programming Language Has Become the World's Most Popular Programming Language
&#160;
(англ.)
&#32;(3&#160;March 2008).&#32;
Проверено 25 октября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
TIOBE Programming Community Index for April 2015
&#160;
(англ.)
.&#32; TIOBE Software BV&#32;(April 2015).&#32;
Проверено 9 мая 2015.
↑
Open Source Project Data
&#160;
(англ.)
.&#32; Black Duck Software.&#32;
Проверено 25 октября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
JavaScript and PHP Use Growing in Open Source, Says Black Duck Software
&#160;
(англ.)
.&#32; Black Duck Software&#32;(12&#160;August 2009).&#32;
Проверено 25 октября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Javascript Usage Statistics
&#160;
(англ.)
.&#32; builtwith.com&#32;(29&#160;July 2010).&#32;
Проверено 29 июля 2010.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Usage of client-side programming languages for websites
&#160;
(англ.)
.&#32; W³Techs&#32;(29&#160;July 2010).&#32;
Проверено 29 июля 2010.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Learning Javascript with Object Graphs. Objects and Prototype Chains
↑
Learning Javascript with Object Graphs (Part II). Pure Prototypal Objects
↑
Learning Javascript with Object Graphs. Visualizing Closures
↑
Kris Kowal.
&#32;
CommonJS effort sets JavaScript on path for world domination
&#160;
(англ.)
&#32;(1&#160;December 2009).&#32;
Проверено 1 декабря 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Mikkonen T., Taivalsaari A.
&#32;
Using JavaScript as a Real Programming Language
&#160;
(англ.)
.&#160;— USA: Sun Microsystems Laboratories, 2007.&#32;
Архивировано
15&#160;июня 2011&#160;года.
↑
1
2
Zakas N.
&#32;
1. What is JavaScript?
&#32;&#47;&#47;&#32;Professional JavaScript for Web Developers.&#160;— 2nd ed.&#160;— USA, Canada: Wiley Publishing, Inc., 2009.&#160;— P.&#160;3.&#160;—
ISBN 978-0-470-22780-0
.
↑
1
2
Zakas, Nicholas
&#32;
Web definitions: DOM, Ajax, and more
&#160;
(англ.)
.&#32;
блог Николаса Закаса
&#32;(29&#160;September 2009).&#160;— Статья, проясняющая разницу между понятиями, относящимися к веб-разработке, в которой, в частности, обосновывается, почему DOM и BOM наряду с ECMAScript рассматриваются как составные части JavaScript.&#32;
Проверено 9 декабря 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
1
2
3
4
Chapman, Stephen
&#32;
The Browser Object Model. Introduction
&#160;
(англ.)
.&#32;
Проверено 1 февраля 2010.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Kvk, Raja
&#32;
JavaScript Vs DOM Vs BOM, relationship explained
&#160;
(англ.)
&#32;(18&#160;December 2009).&#32;
Проверено 18 декабря 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Souders S.
&#32;
1. Understanding AJAX Performance
&#32;&#47;&#47;&#32;Even Faster Web Sites: Performance Best Practices for Web Developers.&#160;— 1st ed.&#160;— USA: O'Reilly Media, 2009.&#160;— P.&#160;1—6.&#160;—
ISBN 0596522304
.
↑
Дэвид Флэнаган.
&#32;
15.4.6. Независимые от языка DOM-интерфейсы
&#32;&#47;&#47;&#32;JavaScript. Подробное руководство&#32;&#61;&#32;JavaScript. The Definite Guide&#32;&#47;&#32;Перевод А. Киселева.&#160;— 5-е изд.&#160;—
СПб.
:
«Символ-Плюс»
, 2008.&#160;— С.&#160;332—334.&#160;—
ISBN 5-93286-103-7
.
↑
Stockwell, Christian
&#32;
IE8 Performance
&#160;
(англ.)
&#32;(26&#160;August 2008).&#32;
Проверено 6 ноября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Powell T., Schneider F.
&#32;
Chapter 9: JavaScript Object Models
&#32;&#47;&#47;&#32;JavaScript 2.0: The Complete Reference.&#160;— 2nd ed.&#160;— USA: McGraw-Hill/Osborne, 2004.&#160;— 976&#160;p.&#160;—
ISBN 0072253576
.
↑
Chapman, Stephen
&#32;
The Browser Object Model. The Basics
&#160;
(англ.)
.&#32;
Проверено 1 февраля 2010.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Chapman, Stephen
&#32;
The Browser Object Model
&#160;
(англ.)
.&#32;
Проверено 9 декабря 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
1
2
3
Koch P.-P.
&#32;
Chapter 6. BOM
&#32;&#47;&#47;&#32;ppk on JavaScript.&#160;— 1st ed.&#160;— New Riders Press, 2006.&#160;— 528&#160;p.&#160;—
ISBN 0321423305
.
↑
1
2
Zakas N.
&#32;
8. The Browser Object Model
&#32;&#47;&#47;&#32;Professional JavaScript for Web Developers.&#160;— 2nd ed.&#160;— USA, Canada: Wiley Publishing, Inc., 2009.&#160;— P.&#160;201—229.&#160;—
ISBN 978-0-470-22780-0
.
↑
Zakas N.
&#32;
10. The Document Object Model
&#32;&#47;&#47;&#32;Professional JavaScript for Web Developers.&#160;— 2nd ed.&#160;— USA, Canada: Wiley Publishing, Inc., 2009.&#160;— P.&#160;261—317.&#160;—
ISBN 978-0-470-22780-0
.
↑
4.11.1 The script element
&#160;
(англ.)
.&#32;
Спецификация HTML5
.&#32; W3C&#32;(28 октября 2014 г.).&#32;
Проверено 11 июня 2015.
↑
Application Media Types
&#160;
(англ.)
.&#32;
Администрация адресного пространства Интернет
.&#160;— Соответствие типов содержимого MIME-типам.&#32;
Проверено 28 сентября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Wilson B.
&#32;
MAMA: HEAD structure
&#160;
(англ.)
.&#32;
Opera Developer Community
.&#32; Opera Software&#32;(14 ноября 2008).&#160;— Статистика используемых элементов в секции head веб-документов.&#32;
Проверено 14 октября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Перечень атрибутов
&#160;
(англ.)
.&#32;
Спецификация HTML 4.01
.&#32; W3C&#32;(24 декабря 1999 г.).&#160;— Сводная таблица атрибутов HTML.&#32;
Проверено 25 сентября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
IndraDesktop WebOS Code Analysis
&#160;
(англ.)
.&#32; Ohloh.&#160;— Анализ исходного кода IndraDesktop WebOS.&#32;
Проверено 8 апреля 2010.
↑
IntOS Web Operating System Code Analysis
&#160;
(англ.)
.&#32; Ohloh.&#160;— Анализ исходного кода IntOS Web Operating System.&#32;
Проверено 8 апреля 2010.
↑
eyeos Code Analysis
&#160;
(англ.)
.&#32; Ohloh.&#160;— Анализ исходного кода eyeos.&#32;
Проверено 8 апреля 2010.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
eyeOS Team.
&#32;
5.2 The JavaScript side and the PHP side
&#32;&#47;&#47;&#32;
eyeos developer manual
.&#160;— P.&#160;23.
↑
Дэвид Флэнаган.
&#32;
13.4.1. Букмарклеты
&#32;&#47;&#47;&#32;JavaScript. Подробное руководство&#32;&#61;&#32;JavaScript. The Definite Guide&#32;&#47;&#32;Перевод А. Киселева.&#160;— 5-е изд.&#160;—
СПб.
:
«Символ-Плюс»
, 2008.&#160;— С.&#160;267.&#160;—
ISBN 5-93286-103-7
.
↑
User javascript
&#160;
(англ.)
.&#32;
Opera tutorial
.&#32; Opera Software.&#32;
Проверено 27 ноября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
UJS Manager for Opera makes it easy to manage userscripts
&#160;
(англ.)
&#32;(25&#160;November 2009).&#32;
Проверено 27 ноября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Examples of use. Greasemonkey scripts
&#160;
(англ.)
.&#32;
Opera tutorial
.&#32; Opera Software.&#32;
Проверено 27 ноября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
User Scripts
&#160;
(англ.)
.&#32;
The Chromium Projects
.&#32;
Проверено 4 июня 2010.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
1
2
Java™ SE 6 Release Notes
&#160;
(англ.)
.&#32; Sun Microsystems, Inc..&#160;— Анализ исходного кода Mozilla Firefox.&#32;
Проверено 19 ноября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Create entire apps using JavaScript and Ajax
&#160;
(англ.)
.&#32; Aptana Inc&#32;(2009).&#32;
Проверено 22 декабря 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Aptana: Jaxer Guide: Introduction
&#160;
(англ.)
.&#32; Aptana Inc.&#32;
Проверено 22 декабря 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Jaxer Code Analysis
&#160;
(англ.)
.&#32; Ohloh.&#160;— Анализ исходного кода Jaxer.&#32;
Проверено 23 декабря 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Johnson, Ryan
&#32;
Aptana License for Jaxer
&#160;
(англ.)
.&#32;
Source code Git repository
.&#32; Aptana Inc&#32;(12&#160;August 2009).&#32;
Проверено 22 декабря 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Persevere helps you rapidly develop data-driven JavaScript-based rich internet applications.
&#160;
(англ.)
.&#32; Persevere&#32;(2008).&#32;
Проверено 22 декабря 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
persevere-framework Code Analysis
&#160;
(англ.)
.&#32; Ohloh.&#160;— Анализ исходного кода persevere-framework.&#32;
Проверено 22 декабря 2009.
↑
kriszyp.
&#32;
License
&#160;
(англ.)
.&#32;
Source code SVN repository
.&#32; Persevere&#32;(31&#160;October 2008).&#32;
Проверено 22 декабря 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
helma.org
&#160;
(англ.)
.&#32; Helma.org.&#32;
Проверено 22 декабря 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Helma Code Analysis
&#160;
(англ.)
.&#32; Ohloh.&#160;— Анализ исходного кода Helma.&#32;
Проверено 22 декабря 2009.
↑
Helma License version 2.0
&#160;
(англ.)
.&#32; Helma.org.&#32;
Проверено 22 декабря 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
v8cgi Code Analysis
&#160;
(англ.)
.&#32; Ohloh.&#160;— Анализ исходного кода v8cgi.&#32;
Проверено 22 декабря 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Zara, Ondrej
&#32;
License
&#160;
(англ.)
.&#32;
Source code SVN repository
&#32;(3&#160;September 2009).&#32;
Проверено 22 декабря 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
node.js Code Analysis
&#160;
(англ.)
.&#32; Ohloh.&#160;— Анализ исходного кода node.js.&#32;
Проверено 13 января 2010.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Dahl, Ryan
&#32;
License
&#160;
(англ.)
.&#32;
Source code GIT repository
&#32;(26&#160;May 2009).&#32;
Проверено 13 января 2010.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Yegge, Steve
&#32;
Rhino on Rails
&#160;
(англ.)
&#32;(26&#160;June 2007).&#32;
Проверено 22 декабря 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Yegge, Steve
&#32;
Rhinos and Tigers
&#160;
(англ.)
&#32;(14&#160;June 2008).&#32;
Проверено 22 декабря 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Kairer, Ryan
&#32;
Palm Announces the Palm webOS
&#160;
(англ.)
&#32;(8&#160;January 2009).&#32;
Проверено 16 октября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Целиков, Дмитрий
&#32;
Анонсировано первое руководство для программирования в среде Palm webOS
&#160;
(неопр.)
&#32;(18 февраля 2009).&#32;
Проверено 16 октября 2009.
↑
Allen M.
&#32;Palm webOS.&#160;— 1st ed.&#160;— O'Reilly Media, 2009.&#160;— 464&#160;p.&#160;—
ISBN 978-0-596-15525-4
.
↑
.
Mozilla Firefox Code Analysis
&#160;
(англ.)
.&#32; Ohloh.&#160;— Анализ исходного кода Mozilla Firefox.&#32;
Проверено 16 октября 2011.
↑
Sunder Pichai, Linus Upson.
&#32;
Представляем операционную систему Google Chrome
&#160;
(рус.)
.&#32; Блог Google Россия&#32;(8&#160;июля 2009).&#32;
Проверено 20 ноября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Winship, Dan
&#32;
JavaScript - GNOME live!
&#160;
(англ.)
.&#32; GNOME.&#32;
Проверено 28 декабря 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
1
2
Stich, Christian
&#32;
Introducing the JavaScript Object Model for Excel Services in SharePoint 2010
&#160;
(англ.)
&#32;(30&#160;November 2009).&#32;
Проверено 1 декабря 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
1
2
Stich, Christian
&#32;
Simple Access to Spreadsheet Data Using the Excel Services 2010 REST API
&#160;
(англ.)
&#32;(4&#160;November 2009).&#32;
Проверено 1 декабря 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Dr Mark Alexander Bain.
&#32;
Accessing the OOo IDE
&#32;&#47;&#47;&#32;Learn OpenOffice.org Spreadsheet Macro Programming: OOoBasic and Calc automation&#32;&#47;&#32;Reviewer: Andrew Pitonyak.&#160;— 1st.&#160;— Birmingham: Packt Publishing, 2006.&#160;— P.&#160;8—11.&#160;— (From Technologies to Solutions).&#160;—
ISBN 1847190979
.
↑
1
2
Writing Office Scripts in JavaScript
&#160;
(англ.)
.&#32; OpenOffice.org.&#32;
Проверено 22 декабря 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Writing Macros
&#160;
(англ.)
.&#32; OpenOffice.org.&#32;
Проверено 22 декабря 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Reed D.
&#32;Rethinking CS0 with JavaScript&#160;
(англ.)
&#160;// Technical Symposium on Computer Science Education. Proceedings of the thirty-second SIGCSE technical symposium on Computer Science Education.&#160;— Charlotte, North Carolina, United States: ACM, 2001.&#160;—
P. 100—104
.&#160;—
ISBN 1-58113-329-4
.
↑
Драч А. Н.
&#32;
Повышение педагогического мастерства в области ИКТ-образования в процессе преподавания JavaScript на факультативных занятиях
&#160;// Информационные технологии в образовании — 2008&#160;: Сборник научных трудов участников VII научно-практической конференции-выставки 30 — 31 октября 2008 г..&#160;— Ростов-на-Дону: Ростиздат, 2008.&#160;—
С. 63
.&#160;—
ISBN 978-5-7509-0971-1
.
↑
Босова И.Н.
&#32;
Разработка образовательных программ по информатике на вариативной основе и индивидуальных учебных планов
&#160;// Информационные технологии в образовании — 2009&#160;: Сборник научных трудов участников IX научно-практической конференции-выставки 29 — 30 октября 2009 г..&#160;— Ростов-на-Дону: Ростиздат, 2009.&#160;—
С. 25—26
.&#160;—
ISBN 978-5-7509-0971-1
.
↑
Wu P.
&#32;Teaching basic game programming using JavaScript&#160;
(англ.)
&#160;// Journal of Computing Sciences in Colleges. Papers of the Second Anual CCSC Southwestern Conference.&#160;— Consortium for Computing Sciences in Colleges, USA: ACM, 2009.&#160;—
Vol. 24
,
iss. 4
.&#160;—
P. 211—220
.&#160;—
ISSN
1937-4771
.
↑
Zakas, Nikolas
&#32;
Computer science in JavaScript: Linked list
&#160;
(англ.)
.&#32;
Computer Science
&#32;(13&#160;April 2009).&#32;
Проверено 12 ноября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
New in JavaScript 1.6
&#160;
(англ.)
.&#32;
Mozilla Developer Center
.&#160;— Новое в JavaScript версии 1.6.&#32;
Проверено 5 октября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
New in JavaScript 1.7
&#160;
(англ.)
.&#32;
Mozilla Developer Center
.&#160;— Новое в JavaScript версии 1.7.&#32;
Проверено 5 октября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
New in JavaScript 1.8
&#160;
(англ.)
.&#32;
Mozilla Developer Center
.&#160;— Новое в JavaScript версии 1.8.&#32;
Проверено 15 февраля 2010.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
New in JavaScript 1.8.1
&#160;
(англ.)
.&#32;
Mozilla Developer Center
.&#160;— Новое в JavaScript версии 1.8.1.&#32;
Проверено 15 февраля 2010.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
1
2
Final draft of ECMA-262 — the ECMAScript language standard — has been published
&#160;
(англ.)
.&#32; ECMA.&#160;— Анонс окончательного варианта проекта пятой редакции ECMA-262.&#32;
Проверено 25 сентября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Horwat, Waldemar
&#32;
ES5 is an ECMA standard
&#160;
(англ.)
.&#32;
Список рассылки Mozilla
&#32;(4&#160;December 2009).&#160;— Сообщение об официальном принятии ECMAScript 5 в качестве стандарта ECMA.&#32;
Проверено 9 декабря 2009.
↑
djwm.
&#32;
New version of JavaScript approved
&#160;
(англ.)
&#32;(7&#160;December 2009).&#32;
Проверено 9 декабря 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
About the programming environment
&#160;
(англ.)
.&#32;
Microsoft Developer Network
.&#32; Microsoft.&#32;
Проверено 5 ноября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Opera DragonFly
&#160;
(неопр.)
.&#32; Opera Software.&#32;
Проверено 19 декабря 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Hatcher, Timothy
&#32;
Introducing Drosera
&#160;
(англ.)
&#32;(28&#160;June 2006).&#32;
Проверено 5 ноября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Christian Johansen.
&#32;
Chapter 1. Automated Testing
&#32;&#47;&#47;&#32;Test Driven JavaScript Development.&#160;— Addison-Wesley Professional, 2010.&#160;— P.&#160;3.&#160;— (Rough Cuts).&#160;—
ISBN 0-321-68391-9
, 978-0-321-68391-5.
↑
Christian Johansen.
&#32;
3.1.4. Features of xUnit Test Frameworks. The Test Runner
&#32;&#47;&#47;&#32;Test Driven JavaScript Development.&#160;— Addison-Wesley Professional, 2010.&#160;— P.&#160;24, 25.&#160;— (Rough Cuts).&#160;—
ISBN 0-321-68391-9
, 978-0-321-68391-5.
↑
Christian Johansen.
&#32;
3.3.1. Crosscheck
&#32;&#47;&#47;&#32;Test Driven JavaScript Development.&#160;— Addison-Wesley Professional, 2010.&#160;— P.&#160;28.&#160;— (Rough Cuts).&#160;—
ISBN 0-321-68391-9
, 978-0-321-68391-5.
↑
Christian Johansen.
&#32;
3.3.2. env.js
&#32;&#47;&#47;&#32;Test Driven JavaScript Development.&#160;— Addison-Wesley Professional, 2010.&#160;— P.&#160;28, 29.&#160;— (Rough Cuts).&#160;—
ISBN 0-321-68391-9
, 978-0-321-68391-5.
↑
Christian Johansen.
&#32;
3.3.3. Blue Ridge
&#32;&#47;&#47;&#32;Test Driven JavaScript Development.&#160;— Addison-Wesley Professional, 2010.&#160;— P.&#160;29.&#160;— (Rough Cuts).&#160;—
ISBN 0-321-68391-9
, 978-0-321-68391-5.
↑
Christian Johansen.
&#32;
3.3.4. The Issue With Headless Test Runners
&#32;&#47;&#47;&#32;Test Driven JavaScript Development.&#160;— Addison-Wesley Professional, 2010.&#160;— P.&#160;29.&#160;— (Rough Cuts).&#160;—
ISBN 0-321-68391-9
, 978-0-321-68391-5.
↑
C. Titus Brown, Gheorghe Gheorghiu, Jason Huggins.
&#32;
3.1. A Brief History of Selenium
&#32;&#47;&#47;&#32;An Introduction to Testing Web Applications with twill and Selenium.&#160;— O'Reilly Media, Inc, 2007.&#160;— 60&#160;p.
↑
Christian Johansen.
&#32;
3.4. One Test Runner To Rule Them All
&#32;&#47;&#47;&#32;Test Driven JavaScript Development.&#160;— Addison-Wesley Professional, 2010.&#160;— P.&#160;29.&#160;— (Rough Cuts).&#160;—
ISBN 0-321-68391-9
, 978-0-321-68391-5.
↑
Christian Johansen.
&#32;
3.4.1. How JsTestDriver Works
&#32;&#47;&#47;&#32;Test Driven JavaScript Development.&#160;— Addison-Wesley Professional, 2010.&#160;— P.&#160;29.&#160;— (Rough Cuts).&#160;—
ISBN 0-321-68391-9
, 978-0-321-68391-5.
↑
Selenium Remote-Control
&#160;
(англ.)
.&#32; seleniumhq.org.&#32;
Проверено 16 марта 2010.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Ismayle de Sousa Santos;&#32;Pedro de Alcântara dos Santos Neto.
&#32;
Automação de testes funcionais com o Selenium
&#160;
(порт.)
&#32;(pdf).&#32;
Проверено 16 марта 2010.
↑
Резиг, Джон
&#32;
TestSwarm
&#160;
(англ.)
&#160;
(недоступная ссылка)
&#32;(25&#160;August 2009).&#32;
Проверено 16 марта 2010.
&#32;
Архивировано
14&#160;февраля 2010&#160;года.
↑
Christian Johansen.
&#32;
3.1.6. Dependencies
&#32;&#47;&#47;&#32;Test Driven JavaScript Development.&#160;— Addison-Wesley Professional, 2010.&#160;— P.&#160;25.&#160;— (Rough Cuts).&#160;—
ISBN 0-321-68391-9
, 978-0-321-68391-5.
↑
Christian Johansen.
&#32;
3.2.1. YUI Test
&#32;&#47;&#47;&#32;Test Driven JavaScript Development.&#160;— Addison-Wesley Professional, 2010.&#160;— P.&#160;26.&#160;— (Rough Cuts).&#160;—
ISBN 0-321-68391-9
, 978-0-321-68391-5.
↑
Christian Johansen.
&#32;
3.2.2. Other In-Browser Testing Frameworks
&#32;&#47;&#47;&#32;Test Driven JavaScript Development.&#160;— Addison-Wesley Professional, 2010.&#160;— P.&#160;28.&#160;— (Rough Cuts).&#160;—
ISBN 0-321-68391-9
, 978-0-321-68391-5.
↑
Крокфорд, Дуглас
&#32;
Малыш-программист на JavaScript
&#160;
(англ.)
.&#160;— Статья, раскрывающая связь между JavaScript и Scheme.&#32;
Проверено 28 сентября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Толксдорф Р.
&#32;
Языки программирования для JavaScript
&#160;
(англ.)
.&#32; is-research.&#160;— Подборка реализаций языков программирования на JavaScript..&#32;
Проверено 12 октября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
hotruby. Ruby on JavaScript and Flash
&#160;
(англ.)
.&#32;
Проверено 12 октября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Cooper P.
&#32;
HotRuby: A JavaScript &amp; Flash Virtual Machine That Runs Ruby
&#160;
(англ.)
.&#32; Rubi Inside.&#32;
Проверено 12 октября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Шустер В.
&#32;
HotRuby — Ruby 1.9/YARV opcode interpreter in Javascript
&#160;
(англ.)
.&#32; infoQ.&#160;— Описание HotRuby..&#32;
Проверено 12 октября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Formiga, Andrei
&#32;
s-mr. Self-made Rhino
&#160;
(англ.)
.&#32;
Проверено 9 декабря 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Hlavaty, Tom
&#32;
WPS: PostScript for the Web
&#160;
(англ.)
.&#32;
Проверено 12 октября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
6502asm.com — 6502 compatible assembler and emulator in javascript
&#160;
(англ.)
.&#32;
Проверено 12 октября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Cappuccino Web Framework — Build Desktop Class Applications in Objective-J and JavaScript
&#160;
(англ.)
.&#32;
Проверено 12 октября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Yhc/Javascript/Brief overview
&#160;
(англ.)
.&#32;
Проверено 12 октября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Monash Toy Prolog
&#160;
(англ.)
.&#32;
Проверено 12 октября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
ioctl. Prolog in JavaScript
&#160;
(англ.)
.&#32;
Проверено 12 октября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Online Cat Interpreter
&#160;
(англ.)
.&#32;
Проверено 12 октября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
BiwaScheme
&#160;
(англ.)
.&#32;
Проверено 29 марта 2018.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Strom, Nikko
&#32;
About Quite BASIC
&#160;
(англ.)
.&#32;
Проверено 12 октября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Orcutt, Bill
&#32;
About Lily
&#160;
(англ.)
.&#32;
Проверено 12 февраля 2010.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Jacobson, Kyle
&#32;
wForth - A JavaScript Forth Interpreter
&#160;
(англ.)
&#32;(3&#160;December 2008).&#32;
Проверено 12 февраля 2010.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
phype
&#160;
(англ.)
.&#32; code.google.com.&#32;
Проверено 12 февраля 2010.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
phype Licenses
&#160;
(англ.)
.&#32;
Проверено 12 февраля 2010.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
brython
&#160;
(англ.)
.
↑
Oberon 07 compiler
&#160;
(англ.)
.&#32;
Проверено 29 марта 2018.
↑
Package Information: HTML_Javascript
&#160;
(англ.)
.&#32;
PEAR — PHP Extension and Application Repository
.&#32;
Проверено 12 октября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
TCLLIB — Tcl Standard Library: javascript
&#160;
(англ.)
.&#32;
Проверено 12 октября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Data::JavaScript
&#160;
(англ.)
.&#32;
Comprehensive Perl Archive Network
.&#32;
Проверено 12 октября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Zakas N.
&#32;
ECMAScript Support in Web Browsers
&#32;&#47;&#47;&#32;Professional JavaScript for Web Developers.&#160;— 2nd ed.&#160;— USA, Canada: Wiley Publishing, Inc., 2009.&#160;— P.&#160;5, 6.&#160;—
ISBN 978-0-470-22780-0
.
↑
Web Browser ECMAScript Support
&#160;
(англ.)
.&#32;
Проверено 28 октября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Web Browser DOM Support
&#160;
(англ.)
.&#32;
Проверено 28 октября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Krill, Paul
.&#32;
Eich: JavaScript getting faster, could displace Flash
, InfoWorld&#160;(6&#160;ноября 2009).&#32;
Проверено 11 ноября 2009.
↑
Walden, Jeff
&#32;
Check SpiderMonkey correctness on Sputnik test framework
&#160;
(англ.)
.&#32;
Система отслеживания ошибок в продуктах Mozilla
Bugzilla
&#32;(29&#160;June 2009).&#160;— Сообщение об ошибках в
SpiderMonkey
.&#32;
Проверено 27 ноября 2009.
↑
Blandy, Jim
&#32;
Integrate Google Sputnik test suite
&#160;
(англ.)
.&#32;
Система отслеживания ошибок в продуктах Mozilla
Bugzilla
&#32;(30&#160;June 2009).&#160;— Предложение интеграции Sputnik в
инфраструктуру тестирования
(
англ.
)
Mozilla.&#32;
Проверено 27 ноября 2009.
↑
1
2
Hansen, Christian Plesner
&#32;
Launching Sputnik into Orbit
&#160;
(англ.)
&#32;(29&#160;June 2009).&#160;— Анонс Sputnik, инструмента для тестирования соответствия спецификации ECMAScript реализаций языка.&#32;
Проверено 27 ноября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Zaytsev, Juriy
&#32;
Sputniktests web runner
&#160;
(англ.)
&#160;
(недоступная ссылка)
&#32;(9&#160;November 2009).&#160;— Исследование соответствия браузеров спецификации ECMAScript.&#32;
Проверено 27 ноября 2009.
&#32;
Архивировано
13&#160;ноября 2009&#160;года.
↑
djwm.
&#32;
Google launches runnable test suite for browser ECMAScript/JavaScript
&#160;
(англ.)
.&#32; h-online.com&#32;(11&#160;March 2010).&#32;
Проверено 12 марта 2010.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Taft, Darryl K.
&#32;
How Does IE 8 Behave?
&#160;
(англ.)
.&#32; eWeek&#32;(11&#160;March 2010).&#160;— Статья, излагающая результаты исследования инженерами Google, в отношении корректности поддержки браузерами JavaScript, основываясь на тестировании с помощью Sputnik.&#32;
Проверено 12 марта 2010.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
allenwb.
&#32;
ECMAScript 5 Conformance Suite
&#160;
(англ.)
&#32;(1&#160;July 2009).&#32;
Проверено 9 декабря 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Oiaga, Marius
&#32;
Microsoft Releases Tests for the Evolution of JavaScript
&#160;
(англ.)
&#32;(30&#160;June 2009).&#32;
Проверено 9 декабря 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
allenwb.
&#32;
ECMAScript 5 Conformance Suite. Version 0.2. Download page
&#160;
(англ.)
&#32;(13&#160;September 2009).&#32;
Проверено 12 марта 2010.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Clary, Bob
&#32;
JavaScript Test Suite
&#160;
(англ.)
&#32;(3&#160;October 2004).&#32;
Проверено 9 декабря 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Begle, Christine
&#32;
JavaScript Test Library
&#160;
(англ.)
.&#32;
Проверено 9 декабря 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
1
2
Флэнаган Д.
&#32;
13.8.1. Чего не может JavaScript
&#32;&#47;&#47;&#32;JavaScript. Подробное руководство&#32;&#61;&#32;JavaScript. The Definite Guide&#32;&#47;&#32;Перевод А. Киселева.&#160;— 5-е изд.&#160;—
СПб.
:
«Символ-Плюс»
, 2008.&#160;— С.&#160;280, 281.&#160;—
ISBN 5-93286-103-7
.
↑
Флэнаган Д.
&#32;
13.8.2. Политика общего происхождения
&#32;&#47;&#47;&#32;JavaScript. Подробное руководство&#32;&#61;&#32;JavaScript. The Definite Guide&#32;&#47;&#32;Перевод А. Киселева.&#160;— 5-е изд.&#160;—
СПб.
:
«Символ-Плюс»
, 2008.&#160;— С.&#160;281—283.&#160;—
ISBN 5-93286-103-7
.
↑
Mozilla Cross-Site Scripting Vulnerability Reported and Fixed
&#160;
(англ.)
.&#32; MozillaZine&#32;(28&#160;February 2004).&#32;
Проверено 24 ноября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Kottelin, Thor
&#32;
Right-click “protection”? Forget about it
&#160;
(англ.)
&#32;(17&#160;June 2008).&#32;
Проверено 24 ноября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Habryn, Mikolaj J.
&#32;
Buffer overflow in crypto.signText()
&#160;
(англ.)
&#32;(1&#160;March 2006).&#32;
Проверено 24 ноября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Festa, Paul
&#32;
Buffer-overflow bug in IE
&#160;
(англ.)
&#32;(19&#160;August 1998).&#32;
Проверено 24 ноября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Apple Safari JavaScript Buffer Overflow Lets Remote Users Execute Arbitrary Code and HTTP Redirect Bug Lets Remote Users Access Files
&#160;
(англ.)
&#32;(2&#160;March 2006).&#32;
Проверено 24 ноября 2009.
↑
Farrell, Nick
&#32;
Turn off Javascript in IE again
&#160;
(англ.)
&#32;(24&#160;November 2009).&#32;
Проверено 24 ноября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Web User.
&#32;
Microsoft issues IE flaw advice
&#160;
(англ.)
&#160;
(недоступная ссылка&#160;—
история
)
&#32;(24&#160;November 2009).&#32;
Проверено 24 ноября 2009.
↑
hdm.
&#32;
Microsoft WebViewFolderIcon ActiveX Control Buffer Overflow Vulnerability
&#160;
(англ.)
&#32;(17&#160;July 2006).&#32;
Проверено 24 ноября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Macromedia Flash Activex Buffer Overflow
&#160;
(англ.)
&#32;(1&#160;March 2002).&#32;
Проверено 24 ноября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Zero-day vulnerabilities in Firefox extensions discovered
&#160;
(англ.)
&#32;(20&#160;November 2009).&#32;
Проверено 24 ноября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Manion, Art
&#32;
Microsoft Internet Explorer does not properly validate source of redirected frame
&#160;
(англ.)
&#32;(3&#160;June 2004).&#32;
Проверено 24 ноября 2009.
↑
Privilege escalation via DOM property overrides
&#160;
(англ.)
&#32;(2005).&#32;
Проверено 24 ноября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Canavan, John
&#32;
JS.Seeker.K
&#160;
(англ.)
&#32;(1&#160;October 2003).&#32;
Проверено 24 ноября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
Спецификации
[
править
|
править код
]
↑
Standard ECMA-262. 7th edition
&#160;
(англ.)
.&#32; ecma-international.org&#32;(14&#160;June 2016).&#32;
Проверено 23 июня 2016.
↑
TC39.
&#32;
4. Overview
&#32;&#47;&#47;&#32;
ECMAScript Language Specification
.&#160;— 5th ed.&#160;— 2009.&#160;— P.&#160;1, 2.
↑
Document Object Model (DOM) Level 3 Core Specification
&#160;
(англ.)
.&#32; W3C&#32;(7&#160;April 2004).&#32;
Проверено 6 ноября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
HTML5. Draft Standard — 8 December 2009
&#160;
(англ.)
.&#32; W3C&#32;(8&#160;December 2009).&#32;
Проверено 9 декабря 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Window Object 1.0 W3C Working Draft 07 April 2006
&#160;
(англ.)
.&#32; W3C&#32;(7&#160;April 2006).&#32;
Проверено 9 декабря 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
18.2.1 The SCRIPT element
&#160;
(рус.)
.&#32;
Спецификация HTML 5
.&#32; W3C&#32;(18 декабря 2013 г.).&#32;
Проверено 18 июня 2013.
&#32;
Архивировано
18&#160;июня 2013&#160;года.
↑
18.2.3 Intrinsic events
&#160;
(англ.)
.&#32;
Спецификация HTML 4.01
.&#32; W3C&#32;(24 декабря 1999 г.).&#32;
Проверено 15 ноября 2009.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
4.11.1 The script element
&#160;
(англ.)
.&#32;
Спецификация HTML5
.&#32; W3C&#32;(28&#160;October 2014).&#32;
Проверено 11 июня 2015.
↑
TC39.
&#32;
Introduction
&#32;&#47;&#47;&#32;
ECMAScript Language Specification
.&#160;— 5th ed.&#160;— 2009.
Комментарии
[
править
|
править код
]
↑
C#, PHP, Perl, Python, Java.
↑
Имеется в виде отдельной библиотеки
JSAN
(
англ.
)
.
↑
Однако это не мешает рассматривать DOM как составную часть языка, приложения или библиотеки. Так например, при описании целей ES-Harmony Брендан Айх
оговаривает
как одну из целей создания языка, что он должен хорошо подходить для создания библиотек, которые, в том числе, могут включать и DOM.
↑
Проект 'Computer science in JavaScript'
включает набор классических
парадигм
, алгоритмов и подходов, написанных на JavaScript и доступных под
лицензией MIT
.
Ссылки
[
править
|
править код
]
Документация
[
править
|
править код
]
Пятая редакция спецификации ECMA-262
&#160;
(англ.)
Третья редакция спецификации ECMA-262
&#160;
(англ.)
Mozilla. Документация по JavaScript
&#160;
(рус.)
Справочники
[
править
|
править код
]
Поддержка ECMAScript браузерами
&#160;
(англ.)
Поддержка DOM браузерами
&#160;
(англ.)
Тематические ресурсы
[
править
|
править код
]
Крокфорд Д. JavaScript Дугласа Крокфорда
&#160;
(англ.)
Блоги известных авторов книг по JavaScript
[
править
|
править код
]
Блог Николаса Закаса
&#160;
(англ.)
Блог Джона Резига
&#160;
(англ.)
Блог Стояна Стефанова
&#160;
(англ.)
Блог Дэвида Флэнагана
&#160;
(англ.)
JavaScript
Идеи
Библиотека JavaScript
Движок JavaScript
Ненавязчивый JavaScript
Компиляторы
CoffeeScript
TypeScript
Dart
asm.js
Emscripten
Движки
SpiderMonkey
Futhark/Carakan
V8
Chakra
SquirrelFish
Rhino
Nashorn
Библиотеки
и
фреймворки
jQuery
jQuery Mobile
JQuery UI
Yahoo! UI Library
Dojo
MooTools
Prototype
script.aculo.us
Backbone.js
Underscore
AngularJS
ReactJS
Vue.js
Ember.js
Knockout.js
Редакторы
Eclipse
NetBeans
Aptana Studio
WebStorm
Electron
Atom
Visual Studio Code
Инструменты
Firebug
Opera Dragonfly
Venkman
Internet Explorer Developer Tools
JSLint
JSHint
JSDoc
QUnit
Node.js
NPM
Связанные
технологии
AJAX
DHTML
XMLHttpRequest
JSON
DOM
HTML5
WebAssembly
Люди
Дуглас Крокфорд
Брендан Эйх
Джон Резиг
Джереми Ашкенас
Категория
ECMAScript
Диалекты
ActionScript
Caja
JavaScript
(
движки
)
JScript
JScript .NET
Objective-J
QtScript
WMLScript
Движки
(
сравнение
)
Carakan
Futhark
InScript
JavaScriptCore
SquirrelFish
JScript
KJS
Linear B
Narcissus
QtScript
Rhino
YAJI
SpiderMonkey
TraceMonkey
JägerMonkey
Tamarin
V8
Chakra
Nashorn
Фреймворки
,
библиотеки
JavaScript
(
сравнение
)
Client-side
Ample SDK
CougarXML
Dojo
Echo
Ext JS
Google Web Toolkit
jQuery
Lively Kernel
midori
MochiKit
MooTools
OpenLink AJAX
Prototype
Pyjamas
qooxdoo
Rialto
Rico
script.aculo.us
SmartClient
SproutCore
Spry
YUI Library
Server-side
AppJet
Jaxer
Node.js
Библиотеки
(
список
)
SWFObject
SWFAddress
ActionScript
PureMVC
Множественные
реализации
Cappuccino
JavaScript
Objective-J
Люди
Брендан Айк
Дуглас Крокфорд
Джон Резиг
Другое
DHTML
Ecma International
JSAN
JSDoc
JSLint
JSON
JSSS
Sputnik
SunSpider
CommonJS
Языки программирования
Хронология
Ассемблер
BASIC
C
C++
C#
COBOL
Fortran
Go
Java
JavaScript
(JS)
Lisp
Lua
Pascal
Perl
PHP
Python
Ruby
Smalltalk
Visual Basic .NET
(VB.NET)
Категория
Сравнение
Списки:
хронологический
по категориям
Веб
и
веб-сайты
Глобально
Всемирная паутина
Веб 1.0
Веб 2.0
Веб 3.0
Семантическая паутина
Нейронет
Локально
Сайт
Портал
Страница
Служба
Кольцо
Виды сайтов
и сервисов
Виртуальный атлас
Баннерная сеть
Библиотека
Блог
(
платформа
)
Видеохостинг
Вики
Сайт-визитка
Вопрос-ответ
Закладки
Службы знакомств
Браузерная игра
Каталог ресурсов
Интернет-магазин
Микроблог
Новостной сайт
Поисковая система
Порносайт
Веб-почта
Социальная сеть
Тамблелог
BitTorrent-трекер
Файлообменник
Форум
Сервис
Имиджборд
Фотохостинг
Чат
Создание
и обслуживание
Мастер
Разработка
Дизайн
Вёрстка
Программирование
Юзабилити
Опыт взаимодействия
Продвижение сайта
Поисковая оптимизация
(SEO)
Хостинг
Системный администратор
Модератор
Учётная запись
Авторизация
Типы макетов,
страниц, сайтов
Статический
Динамический
Фиксированный
Резиновый
Динамично эластичный
Адаптивный
Техническое
Веб-сервер
(
сравнение
)
Браузер
(
сравнение
)
DNS
CMF
CMS
HTTP
(
ответы
заголовки
)
SPDY
QUIC
CGI
HTML
XHTML
CSS
PHP
JavaScript
DHTML
Cookie
DOM
XML
AJAX
JSON
Flash
RSS
Atom
Информер
Микроформат
favicon
.ico
robots.txt
Sitemaps
Карта сайта
.htaccess
Маркетинг
Интернет-маркетинг
Интернет-реклама
Баннер
Контекстная реклама
Тизер
Киберсквоттинг
Социум и&#160;культура
Блогосфера
Интернет-сообщество
(
районное
)
Сетевая литература
Источник —
https://ru.wikipedia.org/w/index.php?title=JavaScript&amp;oldid=97783784
Категории
:
Языки программирования по алфавиту
Языки программирования, появившиеся в 1995 году
Форматы файлов
JavaScript
Появились в 1995 году
Языки с динамической типизацией
Языки веб-программирования
Высокоуровневые языки программирования
Прототипно-ориентированные языки программирования
Скрытые категории:
Википедия:Статьи с некорректным использованием шаблонов:Cite web (не указан язык)
Страницы, использующие волшебные ссылки ISBN
Википедия:Статьи с переопределением значения из Викиданных
Википедия:Статьи с источниками из Викиданных
ПРО:ИТ:Статьи по алфавиту
ПРО:ИТ:Последняя правка: в текущем году
Статьи со ссылками на Викиучебник
Статьи со ссылками на Викиновости
Википедия:Ссылка на Викиучебник непосредственно в статье
Википедия:Статьи для обновления
Статьи с примерами кода JavaScript
Навигация
Персональные инструменты
Вы не представились системе
Обсуждение
Вклад
Создать учётную запись
Войти
Пространства имён
Статья
Обсуждение
Варианты
Просмотры
Читать
Текущая версия
Править
Править код
История
Ещё
Поиск
Навигация
Заглавная страница
Рубрикация
Указатель А — Я
Избранные статьи
Случайная статья
Текущие события
Участие
Сообщить об ошибке
Сообщество
Форум
Свежие правки
Новые страницы
Справка
Пожертвовать
Инструменты
Ссылки сюда
Связанные правки
Служебные страницы
Постоянная ссылка
Сведения о странице
Элемент Викиданных
Цитировать страницу
Печать/экспорт
Создать книгу
Скачать как PDF
Версия для печати
В других проектах
Викисклад
Викиучебник
Викиновости
Викиверситет
На других языках
Afrikaans
Ænglisc
العربية
Asturianu
Azərbaycanca
Žemaitėška
Беларуская
Беларуская (тарашкевіца)‎
Български
বাংলা
ᨅᨔ ᨕᨘᨁᨗ
Català
Mìng-dĕ̤ng-ngṳ̄
کوردی
Čeština
Чӑвашла
Dansk
Deutsch
Ελληνικά
English
Esperanto
Español
Eesti
Euskara
فارسی
Suomi
Français
Galego
客家語/Hak-kâ-ngî
עברית
हिन्दी
Hrvatski
Magyar
Հայերեն
Interlingua
Bahasa Indonesia
Íslenska
Italiano
日本語
Basa Jawa
ქართული
Taqbaylit
Қазақша
ភាសាខ្មែរ
한국어
Кыргызча
Lingua Franca Nova
Lumbaart
Lietuvių
Latviešu
Македонски
മലയാളം
Монгол
मराठी
Bahasa Melayu
မြန်မာဘာသာ
مازِرونی
नेपाली
Nederlands
Norsk
Polski
Português
Română
Саха тыла
Scots
Srpskohrvatski / српскохрватски
සිංහල
Simple English
Slovenčina
Slovenščina
Shqip
Српски / srpski
Basa Sunda
Svenska
தமிழ்
తెలుగు
Tetun
Тоҷикӣ
ไทย
Türkmençe
Tagalog
Türkçe
Татарча/tatarça
Українська
اردو
Tiếng Việt
吴语
中文
文言
Bân-lâm-gú
粵語
Править ссылки
Эта страница в последний раз была отредактирована 29 января 2019 в 13:34.
Текст доступен по
лицензии Creative Commons Attribution-ShareAlike
; в отдельных случаях могут действовать дополнительные условия.
Подробнее см.
Условия использования
.
Wikipedia® — зарегистрированный товарный знак некоммерческой организации
Wikimedia Foundation, Inc.
Политика конфиденциальности
Описание Википедии
Отказ от ответственности
Свяжитесь с нами
Разработчики
Соглашение о cookie
Мобильная версия
