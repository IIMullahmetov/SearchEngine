Java — Википедия
Java
Материал из Википедии — свободной энциклопедии
Текущая версия страницы пока
не проверялась
опытными участниками и может значительно отличаться от
версии
, проверенной 27 января 2019; 
проверки требуют
4 правки
.
Текущая версия страницы пока
не проверялась
опытными участниками и может значительно отличаться от
версии
, проверенной 27 января 2019; 
проверки требуют
4 правки
.
Перейти к навигации
Перейти к поиску
Java
Класс языка
мультипарадигмальный
:
объектно-ориентированный
,
структурный
,
императивный
,
компонентно-ориентированный
,
обобщённый
,
рефлективный
Появился в
1995
Автор
Джеймс Гослинг
Разработчик
Oracle
(до 2010 —
Sun Microsystems
)
Расширение
файлов
.java
Выпуск
Java Standard Edition 11
&#91;1&#93;
,&#160;(25 сентября 2018 года)
Система типов
статическая
,
именованная
(
англ.
)
,
явная
,
сильная
Основные реализации:
многочисленные
Диалекты
Generic Java
(
англ.
)
,
Pizza
(
англ.
)
Испытал влияние
Objective-C
&#91;2&#93;
,
Ада 83
,
Object Pascal
&#91;3&#93;
,
UCSD Pascal
&#91;4&#93;
,
Oberon
&#91;5&#93;
&#91;6&#93;
,
C++
,
&#91;7&#93;
,
Smalltalk
,
Eiffel
&#91;8&#93;
,
Mesa
(
англ.
)
&#91;9&#93;
,
Modula-3
&#91;10&#93;
,
Generic Java
(
англ.
)
Повлиял на
Ада 2005
,
C#
,
Clojure
,
D
,
ECMAScript
,
Groovy
,
J#
,
VJ#
,
JavaScript
,
PHP
,
Scala
,
Python
,
BeanShell
,
Kotlin
,
Gentee
Лицензия
GNU General Public License
/
Java Community Process
Сайт
java.com
Эта статья&#160;— о&#160;языке программирования. О&#160;прикладной платформе на основе данного языка см.&#160;
Java (программная платформа)
.
Java
&#91;прим. 1&#93;
&#160;— сильно типизированный
объектно-ориентированный язык программирования
, разработанный компанией
Sun Microsystems
(в последующем приобретённой компанией
Oracle
). Приложения Java обычно
транслируются
в специальный
байт-код
, поэтому они могут работать на любой компьютерной архитектуре с помощью
виртуальной Java-машины
. Дата официального выпуска&#160;— 23 мая 1995 года. На 2018 год Java&#160;— один из самых популярных языков программирования
&#91;11&#93;
&#91;12&#93;
.
Содержание
1
История создания
2
Основные особенности языка
3
История версий
3.1
JDK 1.0
3.2
JDK 1.1
3.3
J2SE 1.2
3.4
J2SE 1.3
3.5
J2SE 1.4
3.6
J2SE 5.0
3.7
Java SE 6
3.8
Java FX
3.9
Java ME Embedded
3.10
Java SE 7
3.10.1
Список нововведений
3.11
Java SE 8
3.11.1
Список нововведений
3.12
Java SE 9
3.12.1
Список нововведений
3.13
Java SE 10
3.13.1
Список нововведений
3.14
Java SE 11
3.14.1
Список нововведений
4
Классификация платформ Java
5
Java и Microsoft
6
Java и Android
7
Применения платформы Java
7.1
Производительность
8
Основные возможности
9
Основные идеи
9.1
Примитивные типы
9.1.1
Преобразования при математических операциях
9.2
Объектные переменные, объекты, ссылки и указатели
9.2.1
Дублирование ссылок и клонирование
9.2.2
Инициализация переменных
9.2.3
Сборка мусора
9.3
Классы и функции
9.3.1
Конструкторы
9.3.2
Статические методы и поля
9.3.3
Завершённость (final)
9.3.4
Абстрактность
9.3.5
Интерфейсы
9.3.5.1
Маркерные интерфейсы
9.3.6
Шаблоны в Java (generics)
9.3.7
Проверка принадлежности к классу
9.4
Обработка ошибок
9.5
Пространство имён
10
Примеры программ
11
Средства разработки ПО
12
См. также
13
Примечания
13.1
Комментарии
13.2
Источники
14
Литература
15
Ссылки
История создания
[
править
|
править код
]
Сама идея создания языка принадлежала молодому разработчику компании Sun Microsystems Патрику Нотану. Патрик Нотан был недоволен работой в компании, в которой он проработал чуть менее трёх лет, и объявил о своем желании перейти в компанию  Next. Один из членов совета директоров Скотт МакНилли узнав об этом попросил Нотана изложить на бумаге проблемы работы компании, а так же предложить выход из них. Получив письмо от Патрика Скотт разослал письмо по внутренней почте, письмо вызвало обширный отклик среди сотрудников компании, начался процесс перестраивания компании в целом.
Одно из ключевых требований Нотана стало отделение от основной компании, крупное финансирование и независимость в разработке. Все требования были полностью удовлетворены. Новому проекту,  созданому в 1990 году было присвоено имя "Green", в первый год выделено финансирование в 1 000 000 долларов США. Новый проект ставит перед собой задачу создания "универсального пульта" с графическим интерфейсом, тачскрином и отсутствием кнопок. Но тут возникла проблема програмного и аппаратного обеспечения, ведь каждый бытовой прибор работал на своей программной и железной архитектуре, для решения ее было решено создать программное обеспечение и язык программирования который бы работал на любой архитектуре. В 1991 году к проекту присоединяются Джеймс Гослинг и Майк Шеридан.
Изначально язык назывался Oak («Дуб»), разрабатывался
Джеймсом Гослингом
для программирования бытовых электронных устройств. Из-за того, что язык с таким названием уже существовал, вскоре Oak был переименован в Java
&#91;13&#93;
. Назван в честь марки
кофе
Java, которая, в свою очередь, получила наименование одноимённого острова (
Ява
), поэтому на официальной эмблеме языка изображена чашка с горячим кофе. Существует и другая версия происхождения названия языка, связанная с
аллюзией
на кофе-машину как пример бытового устройства, для программирования которого изначально язык создавался. В соответствии с этимологией в русскоязычной литературе с конца двадцатого и до первых лет двадцать первого века название языка нередко переводилось как Ява, а не транскрибировалось, как это стало общепринятым
&#91;
источник не указан 73 дня
&#93;
позднее.
В результате работы проекта мир увидел принципиально новое устройство, которое опередило свое время более чем на 10 лет. Устройство получило название Star7, но из-за большой стоимости в 50 долларов не смогло  произвести переворот в мире технологии и постепенно забылось.
Star7 не пользовался популярностью в отличии от языка программирования Java и его окружения. Следующий этапом жизни языка стала разработка интерактивного телевидения. В 1994 году стало очевидным, что интерактивное телевидение было ошибкой.
В середине 1994 года широкого распространения набрал WWW (world web wide) где Java смог реализовать свои возможности при построении динамических веб страниц, точнее вставок в них которые получили название servlet. Данная технология имела огромный успех который и сейчас преследует язык.
Впоследствии язык стал использоваться для написания клиентских приложений и
серверного
программного обеспечения.
Основные особенности языка
[
править
|
править код
]
Программы на Java
транслируются
в
байт-код Java
, выполняемый
виртуальной машиной Java
(JVM)&#160;— программой, обрабатывающей байтовый код и передающей инструкции оборудованию как
интерпретатор
.
Дюк, талисман Java
Достоинством подобного способа выполнения программ является полная независимость байт-кода от
операционной системы
и
оборудования
, что позволяет выполнять Java-приложения на любом устройстве, для которого существует соответствующая виртуальная машина. Другой важной особенностью технологии Java является гибкая система безопасности, в рамках которой исполнение программы полностью контролируется виртуальной машиной. Любые операции, которые превышают установленные полномочия программы (например, попытка несанкционированного доступа к данным или соединения с другим компьютером), вызывают немедленное прерывание.
Часто к недостаткам концепции виртуальной машины относят снижение производительности. Ряд усовершенствований несколько увеличил скорость выполнения программ на Java:
применение технологии трансляции байт-кода в машинный код непосредственно во время работы программы (
JIT
-технология) с возможностью сохранения версий класса в машинном коде,
широкое использование
платформенно-ориентированного кода
(native-код) в стандартных библиотеках,
аппаратные средства, обеспечивающие ускоренную обработку байт-кода (например, технология
Jazelle
, поддерживаемая некоторыми процессорами
архитектуры ARM
).
По данным сайта shootout.alioth.debian.org, для семи разных задач время выполнения на Java составляет в среднем в полтора-два раза больше, чем для C/C++, в некоторых случаях Java быстрее, а в отдельных случаях в 7 раз медленнее
&#91;14&#93;
. С другой стороны, для большинства из них потребление памяти Java-машиной было в 10—30 раз больше, чем программой на C/C++. Также примечательно исследование, проведённое компанией
Google
, согласно которому отмечается существенно более низкая производительность и бо́льшее потребление памяти в тестовых примерах на Java в сравнении с аналогичными программами на
C++
&#91;15&#93;
&#91;16&#93;
&#91;17&#93;
.
Идеи, заложенные в концепцию и различные реализации среды виртуальной машины Java, вдохновили множество энтузиастов на расширение перечня языков, которые могли бы быть использованы для создания программ, исполняемых на виртуальной машине
&#91;18&#93;
. Эти идеи нашли также выражение в спецификации общеязыковой инфраструктуры
CLI
, заложенной в основу платформы
.NET
компанией
Microsoft
.
История версий
[
править
|
править код
]
Основная статья:
История версий Java
JDK 1.0
[
править
|
править код
]
Разработка Java началась в 1990 году, первая официальная версия&#160;— Java 1.0,&#160;— была выпущена только 21 января 1996 года.
JDK 1.1
[
править
|
править код
]
Вторая версия была выпущена 19 февраля 1997 года
&#91;19&#93;
.
Библиотека Accessibility.
Java 2D.
Поддержка технологии
drag-and-drop
.
Полная поддержка
Unicode
, включая поддержку ввода на японском, китайском и корейском языках.
Поддержка воспроизведения аудиофайлов нескольких популярных форматов.
Полная поддержка технологии
CORBA
.
JIT-компилятор, улучшенная производительность.
Усовершенствования инструментальных средств JDK, в том числе поддержка профилирования Java-программ.
J2SE 1.2
[
править
|
править код
]
Дата выпуска 8 декабря 1998 года
&#91;20&#93;
. Кодовое имя Playground.
В данном случае встречается путаница. Выпускались книги, например, Beginning Java 2 by Ivor Horton (Mar 1999), фактически по J2SE 1.2 (бывшее название&#160;— Java 2). Вместе с тем по сей день такие книги публикуются, например: Х.&#160;М.&#160;Дейтел, П. Дж. Дейтел, С.&#160;И.&#160;Сантри. Технологии программирования на Java 2. Распределённые приложения (2011).
В то время, когда, как известно, Java 2 была исторически заменена следующими релизами, подобные названия книг дезориентируют в понимании, о какой же версии Java они написаны на самом деле. Если J2SE 1.2 принято считать за Java 2, а авторы книг за Java 2 принимают JDK 7, это приводит к полной путанице.
J2SE 1.3
[
править
|
править код
]
Дата выпуска 8 мая 2000 года. Кодовое имя Kestrel.
J2SE 1.4
[
править
|
править код
]
Дата выпуска 6 февраля 2002 года. Кодовое имя Merlin.
J2SE 5.0
[
править
|
править код
]
Спецификация Java 5.0 была выпущена 30 сентября 2004 года, кодовое имя Tiger. C этой версии изменена официальная индексация, вместо Java 1.5 правильнее называть Java 5.0. Внутренняя же индексация Sun осталась прежней&#160;— 1.x. Минорные изменения теперь включаются без изменения индексации, для этого используется слово «Update» или буква «u», например, Java Development Kit 5.0 Update 22. Предполагается, что в обновления могут входить как исправления ошибок, так и небольшие добавления в API, JVM.
В данной версии разработчики внесли в язык целый ряд принципиальных дополнений:
Перечислимые типы
(
англ.
&#160;
enum
). Ранее отсутствовавшие в Java типы оформлены по аналогии с
C++
, но при этом имеют ряд дополнительных возможностей.
Перечислимый тип является полноценным классом Java, то есть может иметь конструктор, поля, методы, в том числе скрытые и абстрактные.
Перечисление может реализовывать
интерфейсы
.
Для перечислений имеются встроенные методы, дающие возможность получения значений типа по имени, символьных значений, соответствующих именам, преобразования между номером и значением, проверки типа на то, что он является перечислимым.
Аннотации
&#160;— возможность добавления в текст программы метаданных, непосредственно не влияющих на выполнение кода, но допускающих использование для получения различных сведений о коде и его исполнении. Одновременно выпущен инструментарий для использования аннотированного кода. Одно из применений аннотаций&#160;— упрощение создания тестовых модулей для Java-кода.
Средства
обобщённого программирования
(
англ.
&#160;
generics
)&#160;— механизм, аналогичный средствам языков
Ada
&#91;21&#93;
и
Eiffel
(позже также появились и в C#, принципиально отличаются от шаблонов C++), дающий возможность создавать классы и методы с полями и параметрами произвольного объектного типа. С использованием данного механизма реализованы новые версии коллекций стандартной библиотеки Java.
Методы с неопределённым числом параметров.
Autoboxing/Unboxing&#160;— автоматическое преобразование между скалярными типами Java и соответствующими типами-обёртками (например, между int&#160;— Integer). Наличие такой возможности сокращает код, поскольку исключает необходимость выполнения явных преобразований типов в очевидных случаях.
Разрешён импорт статических полей и методов.
В язык введён цикл по коллекции объектов (итератор,
англ.
&#160;
foreach
).
Было введено использование
Javadoc
-комментариев, которые используются для автоматического оформления документации по комментариям в исходном коде.
Java SE 6
[
править
|
править код
]
Релиз версии состоялся 11 декабря 2006 года, кодовое имя Mustang. Изменена официальная индексация&#160;— вместо ожидаемой 6.0 версия значится как 6. Минорные изменения, как и в Java 5.0, вносятся в обычные обновления версии, например, Java Standard Edition Development Kit 6 Update 27. Внесены следующие изменения:
Коллекции&#160;— добавлены интерфейсы для организации очереди, работающей с двух сторон коллекции; организовывающие поиск по ближайшему соответствию; блокирующие себя во время ожидания элемента. Организованы новые классы, реализующие перечисленные интерфейсы.
Добавлена поддержка японского императорского календаря (наряду с уже существующими григорианским и буддийским календарями).
Доступны классы-потоки для чтения и передачи сжатых данных, с возможностью передачи их по сети. Сняты ограничения на количество файлов в архиве (ранее 64 Кб), длину названия файла (ранее 256 символов) и количество одновременно открытых файлов (ранее 2000 шт).
Организована система управления кэшем и добавлена поддержка параметра «no-cache» в HTTP-запросе.
JConsole, графический мониторинг JVM, стала официально поддерживаемой утилитой.
Java HTTP Server, позволяет создать полноценный HTTP-сервер, с минимально необходимыми функциональными свойствами.
Повысилась скорость вычислений на 70&#160;%, скорость операций ввода-вывода возросла в два раза
&#91;22&#93;
.
Swing&#160;— улучшена работоспособность OpenGL и DirectX; обработка текста на LCD; добавлен GifWriter, для работы с файлами формата
GIF
.
Исправлено большое количество ошибок.
Java FX
[
править
|
править код
]
Дата выпуска 8 октября 2013 года.
JavaFX 2.2 вошёл в состав Java SE 7 update 6
&#91;23&#93;
. С 11-й версии модуль поставляется отдельно от JDK
&#91;24&#93;
.
Java ME Embedded
[
править
|
править код
]
Дата выпуска 10 октября 2013 года. Кодовое имя Micro Edition.
Java SE 7
[
править
|
править код
]
Релиз версии состоялся 28 июля 2011 года, кодовое имя Dolphin
&#91;25&#93;
. В финальную версию Java Standard Edition 7 не были включены все ранее запланированные изменения. Согласно плану развития (план «Б»)
&#91;26&#93;
, включение нововведений будет разбито на две части: Java Standard Edition 7 (без
лямбда-исчисления
, проекта Jigsaw, и части улучшений проекта Coin
&#91;27&#93;
) и Java Standard Edition 8 (все остальное), намеченный на конец 2012 года.
В новой версии, получившей название Java Standard Edition 7 (Java Platform, Standard Edition 7), помимо исправления большого количества ошибок, было представлено несколько новшеств. Так, например, в качестве эталонной реализации Java Standard Edition 7 использован не проприетарный пакет
JDK
, а его открытая реализация
OpenJDK
, а сам релиз новой версии платформы готовился при тесном сотрудничестве инженеров
Oracle
с участниками мировой экосистемы Java, комитетом
JCP
(Java Community Process) и сообществом
OpenJDK
. Все поставляемые Oracle бинарные файлы эталонной реализации Java Standard Edition 7 собраны на основе кодовой базы
OpenJDK
, сама эталонная реализация полностью открыта под лицензией
GPLv2
с исключениями
GNU
ClassPath, разрешающими динамическое связывание с проприетарными продуктами. К другим нововведениям относится интеграция набора небольших языковых улучшений Java, развиваемых в рамках проекта Coin, добавлена поддержка языков программирования с динамической типизацией, таких, как
Ruby
,
Python
и
JavaScript
, поддержка загрузки классов по
URL
, обновлённый
XML
-стек, включающий
JAXP
1.4,
JAXB
2.2a и
JAX-WS
2.2 и другие
&#91;28&#93;
.
За 5 дней до выхода релиза Java Standard Edition 7 было обнаружено несколько серьёзных ошибок в горячей оптимизации циклов, которая включена по умолчанию и приводит виртуальную машину Java к краху. Специалисты Oracle найденные ошибки за столь короткий срок исправить не могли, но пообещали, что они будут исправлены во втором обновлении (Java 7 Update 2) и частично в первом
&#91;29&#93;
.
Список нововведений
[
править
|
править код
]
Поддержка динамически-типизированных языков (InvokeDynamic)&#160;— расширение JVM (семантики байт-кода), языка Java
&#91;30&#93;
для поддержки динамически-типизированных языков.
Строгая проверка class-файлов&#160;— class-файлы версии 51 (Java Standard Edition 7) или более поздней версии должны быть проверены typechecking-верификатором; JVM не должна переключаться на старый верификатор.
Изменение синтаксиса языка Java (Project Coin)&#160;— частичные изменения в языке Java, предназначенные для упрощения общих задач программирования:
Использование класса
String
в блоке
switch
.
Закрытие используемых ресурсов в блоке
try
(try-with-resources)&#160;— работает при использовании интерфейса
AutoCloseable
.
Объединённая обработка исключений в блоке
catch
(multi-catch exceptions)&#160;— перечисление обрабатываемых исключений в
catch
(… | … | …).
Повторное выбрасывание исключений (rethrowing exceptions)&#160;— передача возникшего исключения «вверх» по
стеку вызовов
.
Подчёркивания в числовых литералах для лучшего восприятия больших чисел.
Изменение вывода типа в Java generic при создании объекта.
Использование двоичных чисел (binary literals)&#160;—
префикс
0b
укажет, что используется двоичное число.
Упрощение вызова методов varargs&#160;— уменьшение предупреждений при вызове метода с переменным числом входящих переменных.
Модификация загрузчика классов (class-loader)&#160;— избежание тупиковых ситуаций в неиерархической топологии загрузки классов.
Закрытие ресурсов, открытых
URLClassLoader
.
Обновление коллекций (JSR 166).
Поддержка Unicode 6.0.
Отделение языка пользователя и языка пользовательского интерфейса&#160;— обновление обработки языков для отделения локали от языка пользовательского интерфейса.
Новые интерфейсы I/O для платформы Java (nio.2).
Использование JDBC 4.1 и Rowset 1.1.
… (не закончено)
Java SE 8
[
править
|
править код
]
Релиз версии состоялся 19 марта 2014 года. Кодовое имя Octopus.
Список нововведений
[
править
|
править код
]
Полноценная поддержка
лямбда-выражений
.
Ключевое слово
default
в интерфейсах для поддержки функциональности по умолчанию.
Ссылки на методы и конструкторы
&#91;31&#93;
&#91;32&#93;
.
Функциональные интерфейсы (
предикаты
, поставщики и&#160;т.&#160;д.)
Потоки (stream) для работы с коллекциями.
Новый API для работы с датами.
… (не закончено)
Java SE 9
[
править
|
править код
]
В связи со сложностями в реализации модульной системы в рамках проекта Jigsaw, релиз версии, первоначально запланированный 22 сентября
2016 года
, несколько раз откладывался: сначала дата была перенесена на 23 марта
2017 года
, потом&#160;— на 27 июля 2017 года, а затем&#160;— на 21 сентября 2017 года
&#91;33&#93;
&#91;34&#93;
&#91;35&#93;
.
Последняя дата стала официальной датой релиза версии
&#91;36&#93;
.
Список нововведений
[
править
|
править код
]
Интеграция Jigsaw, в рамках которого разработана модульная система для платформы Java 9 и применена к JDK 9
&#91;37&#93;
.
Обновление Process API для улучшения взаимодействия с процессами операционной системы. Обновление мотивировано тем, что разработчикам зачастую приходилось писать платформозависимый код для таких задач
&#91;38&#93;
.
Временно экспериментальный
&#91;39&#93;
&#91;40&#93;
новый HTTP-клиент с поддержкой
HTTP/2
и веб-сокетов; предназначен заменить устаревший класс
HttpURLConnection
&#91;39&#93;
.
Сжатые строки: если содержимое строки позволяет, она может кодироваться в
Latin-1
(один байт на символ); выбор кодировки конкретного экземпляра класса
String
отображается в значении переменной-
флага
, которая теперь есть у всех строк.
&#91;41&#93;
Поддержка указанных в
NIST FIPS 202
алгоритмов хеширования
SHA-3
, кроме SHAKE128 и SHAKE256. Алгоритмы использования SHA-3 в качестве основы для других криптографических функций не реализованы в силу отсутствия соответствующих стандартов
&#91;42&#93;
.
Улучшены средства для пометки
устаревшего
API. В аннотацию
@Deprecated
добавлен параметр, позволяющий указывать версию программы, с которой использование отмеченного элемента не рекомендуется, а также — параметр, позволяющий указать, что запланировано удаление элемента в какой-либо из будущих версий
&#91;43&#93;
.
Поддержка GTK+ 3 на Linux
&#91;44&#93;
.
Прочие нововведения…
Java SE 10
[
править
|
править код
]
Дата релиза: 20 марта 2018 года
&#91;45&#93;
.
Список нововведений
[
править
|
править код
]
Официальный частичный список нововведений и план релиза
расположен на сайте OpenJDK
.
Вывод типов
локальных переменных, помеченных с помощью ключевого слова
var
&#91;46&#93;
.
Создание прозрачного интерфейса сборщика мусора для упрощения разработки новых сборщиков
&#91;47&#93;
.
Уменьшено время задержек многопоточного сборщика мусора G1 за счёт реализации параллельного полного цикла сборки мусора
&#91;48&#93;
.
Возможность выполнять
функции обратного вызова
на потоках, не делая глобальных блокировок
&#91;49&#93;
в рамках всех потоков
&#91;50&#93;
.
Поддержка символов из новых расширений Unicode: cu (тип валюты), fw (первый день недели), rg (двухбуквенные коды стран и регионов), tz (часовой пояс)
&#91;51&#93;
.
HotSpot VM
теперь может выделять память
кучи
для объектов на альтернативных устройствах
оперативной памяти
, в том числе тех, которые обладают
энергонезависимой памятью
, как, например, накопители
Intel Optane Memory
&#91;52&#93;
.
Новый экспериментальный
JIT-компилятор
Graal, предоставляющий возможности
Ahead-of-Time
компиляции; по умолчанию отключён, работает только на Linux/x64
&#91;53&#93;
.
Обновление системы нумерации версий Java SE и JDK с целью приближения к схеме управления версиями по времени
&#91;54&#93;
.
Java SE 11
[
править
|
править код
]
Официальный частичный список нововведений и план релиза
расположен на сайте OpenJDK
. Дата&#160;релиза — 25 сентября 2018 года.
Список нововведений
[
править
|
править код
]
Обновление системы управления доступом, позволяющее вложенным классам обращаться к закрытым (private) методам и полям внешнего класса (и наоборот) без необходимости создания компилятором промежуточных методов с повышением уровня доступа
&#91;55&#93;
.
Epsilon&#160;— новый сборщик мусора, собственно сборкой мусора не занимающийся вообще; при использовании Epsilon превышение предела выделяемой памяти приводит к завершении работы JVM
&#91;56&#93;
.
Стандартизирован клиент HTTP с поддержкой HTTP/2, введённый в Java 9 как экспериментальный
&#91;57&#93;
.
Параметры
лямбда-функций
могут быть
неявно типизированы
путём вывода типов через ключевое слово (
var
) для унификации с синтаксисом локальных переменных, введённым в JDK 10
&#91;58&#93;
.
Поддержка 10-й версии стандарта
Unicode
&#91;59&#93;
.
Поддержка протокола
TLS 1.3
&#91;60&#93;
.
Экспериментальный масштабируемый сборщик мусора ZGC с низкими задержками. По умолчанию отключён, работает только на Linux/x64
&#91;61&#93;
.
Классификация платформ Java
[
править
|
править код
]
Внутри Java существует несколько основных семейств технологий:
Java SE
&#160;— Java Standard Edition, основное издание Java, содержит компиляторы, API,
Java Runtime Environment
; подходит для создания пользовательских приложений, в первую очередь&#160;— для настольных систем.
Java EE
&#160;— Java Enterprise Edition, представляет собой набор спецификаций для создания программного обеспечения уровня предприятия. В 2017-м проект Java EE был передан
Eclipse Foundation
&#91;62&#93;
, после чего был переименован в Jakarta EE
&#91;63&#93;
. Модули Java EE удалены из Java SE, начиная с 11-й версии
&#91;64&#93;
.
Java ME
&#160;— Java Micro Edition, создана для использования в устройствах, ограниченных по вычислительной мощности, например, в
мобильных телефонах
,
КПК
, встроенных системах;
Java Card
&#160;— технология предоставляет безопасную среду для приложений, работающих на смарт-картах и других устройствах с очень ограниченным объёмом памяти и возможностями обработки.
Java и Microsoft
[
править
|
править код
]
Компанией
Microsoft
была разработана собственная реализация
JVM
под названием
Microsoft Java Virtual Machine
&#160;
(англ.)
русск.
(MSJVM)
&#91;65&#93;
, включавшаяся в состав различных
операционных систем
, начиная с
Windows 98
(также входила в
Internet Explorer
от версии 3 и выше, что позволяло использовать MSJVM в ОС
Windows 95
и
Windows NT 4
после установки IE3+ на данные ОС).
MSJVM имела существенные отличия от Sun Java, во многом ломающие основополагающую концепцию переносимости программ между разными платформами:
отсутствие поддержки
программного интерфейса
вызова удаленных методов
(
RMI
);
отсутствие поддержки технологии
JNI
;
наличие нестандартных расширений, таких, как средства интеграции Java и
DCOM
, работающих только на платформе Windows.
Тесная интеграция Java с DCOM и
Win32
поставила под вопрос
кроссплатформенную
парадигму языка. Впоследствии это явилось поводом для судебных исков со стороны
Sun Microsystems
к Microsoft. Суд принял сторону компании Sun Microsystems. В конечном счёте между двумя компаниями была достигнута договорённость о возможности продления срока официальной поддержки пользователей нестандартной Microsoft JVM до конца 2007 года
&#91;65&#93;
.
В 2005 году компанией Microsoft для платформы
.NET
был представлен Java-подобный язык
J#
, не соответствующий официальной спецификации языка Java и исключённый впоследствии из стандартного инструментария разработчика
Microsoft Visual Studio
, начиная с Visual Studio 2008
&#91;66&#93;
.
Java и Android
[
править
|
править код
]
Основная статья:
Android
Язык Java активно используется для создания мобильных приложений под операционную систему Android. При этом программы компилируются в нестандартный байт-код, для использования их виртуальной машиной
Dalvik
(начиная с
Android 5.0 Lollipop
виртуальная машина заменена на
ART
). Для такой компиляции используется дополнительный инструмент, а именно Android SDK (
Software Development Kit
), разработанный компанией
Google
.
Разработку приложений можно вести в среде
Android Studio
,
NetBeans
, в среде
Eclipse
, используя при этом плагин Android Development Tools (ADT), или в
IntelliJ IDEA
. Версия JDK при этом должна быть 5.0 или выше.
8 декабря 2014 года
Android Studio
признана компанией
Google
официальной средой разработки под ОС Android.
Применения платформы Java
[
править
|
править код
]
Следующие успешные проекты реализованы с привлечением Java (
J2EE
) технологий:
RuneScape
,
Amazon
&#91;67&#93;
&#91;68&#93;
,
eBay
&#91;69&#93;
&#91;70&#93;
,
LinkedIn
&#91;71&#93;
,
Yahoo!
&#91;72&#93;
.
Следующие компании в основном фокусируются на Java (
J2EE
) технологиях:
SAP
,
IBM
,
Oracle
. В частности,
СУБД
Oracle Database
включает JVM как свою составную часть, обеспечивающую возможность непосредственного программирования СУБД на языке Java, включая, например,
хранимые процедуры
&#91;73&#93;
.
Производительность
[
править
|
править код
]
Программы, написанные на Java, имеют репутацию более медленных и занимающих больше оперативной памяти, чем написанные на языке C
&#91;14&#93;
. Тем не менее, скорость выполнения программ, написанных на языке Java, была существенно улучшена с выпуском в 1997—1998 годах так называемого JIT-компилятора в версии 1.1 в дополнение к другим особенностям языка для поддержки лучшего анализа кода (такие, как внутренние классы, класс
StringBuffer
, упрощенные логические вычисления и&#160;т.&#160;д.). Кроме того, была произведена оптимизация виртуальной машины Java&#160;— с 2000 года для этого используется виртуальная машина
HotSpot
. По состоянию на февраль 2012 года, код Java 7 приблизительно в 1,8 раза медленнее кода, написанного на языке Си
&#91;74&#93;
.
Некоторые платформы предлагают аппаратную поддержку выполнения для Java
&#91;75&#93;
. К примеру, микроконтроллеры, выполняющие код Java на аппаратном обеспечении вместо программной JVM, а также основанные на ARM процессоры, которые поддерживают выполнение байткода Java через опцию Jazelle.
Основные возможности
[
править
|
править код
]
Автоматическое управление памятью
.
Расширенные возможности обработки исключительных ситуаций.
Богатый набор средств фильтрации ввода-вывода.
Набор стандартных коллекций:
массив
,
список
,
стек
и&#160;т.&#160;п.
Наличие простых средств создания сетевых приложений (в том числе с использованием
протокола
RMI
).
Наличие классов, позволяющих выполнять
HTTP
-запросы и обрабатывать ответы.
Встроенные в язык средства создания многопоточных приложений, которые потом были портированы на многие языки (например
Python
).
Унифицированный доступ к
базам данных
:
на уровне отдельных
SQL
-запросов&#160;— на основе
JDBC
,
SQLJ
;
на уровне концепции объектов, обладающих способностью к хранению в базе данных&#160;— на основе
Java Data Objects
(
англ.
)
и
Java Persistence API
.
Поддержка обобщений (начиная с версии 1.5).
Поддержка лямбд, замыканий, встроенные возможности функционального программирования (с 1.8).
Основные идеи
[
править
|
править код
]
Примитивные типы
[
править
|
править код
]
В языке Java только 8 примитивных (скалярных, простых)
типов
:
boolean
,
byte
,
char
,
short
,
int
,
long
,
float
,
double
. Существует также вспомогательный девятый примитивный тип&#160;—
void
, однако переменные и поля такого типа не могут быть объявлены в коде, а сам тип используется только для описания соответствующего ему класса, для использования при
рефлексии
: например, с помощью класса
Void
можно узнать, является ли определённый метод типа
void
:
Hello.class.getMethod("main", String[].class).getReturnType() == Void.TYPE
.
Длины и диапазоны значений примитивных типов определяются стандартом, а не реализацией, и приведены в таблице. Тип char сделали двухбайтовым для удобства локализации (один из идеологических принципов Java): когда складывался стандарт, уже существовал
Unicode
-16, но не Unicode-32. Поскольку в результате не осталось однобайтового типа, добавили новый тип byte, причём в Java, в отличие от других языков, он не является беззнаковым. Типы
float
и
double
могут иметь специальные значения
+
&#x221E;
{\displaystyle +\infty }
,
&#x2212;
&#x221E;
{\displaystyle -\infty }
и «не число» (
NaN
). Для типа double они обозначаются
Double.POSITIVE_INFINITY
,
Double.NEGATIVE_INFINITY
,
Double.NaN
; для типа
float
&#160;— так же, но с приставкой
Float
вместо
Double
. Минимальные и максимальные значения, принимаемые типами
float
и
double
, тоже стандартизованы.
Тип
Длина (в байтах)
Диапазон или набор значений
boolean
1 в массивах, 4 в переменных
&#91;76&#93;
true, false
byte
1
−128..127
char
2
0..2
16
−1, или 0..65535
short
2
−2
15
..2
15
−1, или −32768..32767
int
4
−2
31
..2
31
−1, или −2147483648..2147483647
long
8
−2
63
..2
63
−1, или примерно −9.2·10
18
..9.2·10
18
float
4
-(2-2
−23
)·2
127
..(2-2
−23
)·2
127
, или примерно −3.4·10
38
..3.4·10
38
, а также
&#x2212;
&#x221E;
{\displaystyle -\infty }
,
&#x221E;
{\displaystyle \infty }
, NaN
double
8
-(2-2
−52
)·2
1023
..(2-2
−52
)·2
1023
, или примерно −1.8·10
308
..1.8·10
308
, а также
&#x2212;
&#x221E;
{\displaystyle -\infty }
,
&#x221E;
{\displaystyle \infty }
, NaN
Такая жёсткая стандартизация была необходима, чтобы сделать язык платформенно-независимым, что является одним из идеологических требований к Java. Тем не менее, одна небольшая проблема с платформенной независимостью всё же осталась. Некоторые процессоры используют для промежуточного хранения результатов 10-байтовые
регистры
или другими способами улучшают точность вычислений. Для того, чтобы сделать Java максимально совместимой между разными системами, в ранних версиях любые способы повышения точности вычислений были запрещены. Однако это приводило к снижению быстродействия. Выяснилось, что ухудшение точности ради платформенной независимости мало кому нужно, тем более если за это приходится платить замедлением работы программ. После многочисленных протестов этот запрет отменили, но добавили ключевое слово
strictfp
, запрещающее повышение точности.
Преобразования при математических операциях
[
править
|
править код
]
В языке Java действуют следующие правила:
Если один
операнд
имеет тип
double
, другой тоже преобразуется к типу
double
.
Иначе, если один операнд имеет тип
float
, другой тоже преобразуется к типу
float
.
Иначе, если один операнд имеет тип
long
, другой тоже преобразуется к типу
long
.
Иначе оба операнда преобразуются к типу
int
.
Данный способ неявного преобразования встроенных типов полностью совпадает с преобразованием типов в
Си
/
C++
&#91;77&#93;
.
Объектные переменные, объекты, ссылки и указатели
[
править
|
править код
]
В языке Java имеются только динамически создаваемые объекты.
Переменные
объектного типа и объекты в Java&#160;— совершенно разные сущности. Переменные объектного типа являются
ссылками
, то есть аналогами
указателей
на динамически создаваемые объекты. Это подчёркивается
синтаксисом
описания переменных. Так, код на
C++
может выглядеть следующим образом::
double
a
[
10
][
20
];
Foo
b
(
30
);
Но то же самое на Java будет выглядеть совсем по-другому:
double
[][]
a
=
new
double
[
10
][
20
];
Foo
b
=
new
Foo
(
30
);
При присваиваниях, передаче в
подпрограммы
и сравнениях объектные переменные ведут себя как указатели, то есть присваиваются, копируются и сравниваются
адреса
объектов. А при доступе с помощью объектной переменной к полям данных или методам объекта не требуется никаких специальных операций
разыменовывания
&#160;— этот доступ осуществляется так, как если бы объектная переменная была самим объектом.
Объектными являются переменные любого типа, кроме примитивного. Явных указателей в Java нет. В отличие от указателей C, C++ и других языков программирования, ссылки в Java в высокой степени безопасны благодаря жёстким ограничениям на их использование.
Нельзя преобразовывать объект типа
int
или любого другого примитивного типа в указатель или ссылку и наоборот.
Над ссылками запрещено выполнять операции
++
,
−−
,
+
,
−
или любые другие арифметические операции.
Преобразование типов между ссылками жёстко регламентировано. За исключением ссылок на массивы, разрешено преобразовывать ссылки только между наследуемым типом и его наследником, причём преобразование наследуемого типа в наследующий должно быть явно задано, а во время выполнения производится проверка его осмысленности. Преобразования ссылок на массивы разрешены лишь тогда, когда разрешены преобразования их базовых типов, а также нет конфликтов размерности.
В Java нет операций взятия адреса (
&amp;
) или взятия объекта по адресу (
*
).
Амперсанд
(
&amp;
) означает всего лишь «побитовое и» (двойной амперсанд&#160;— «логическое и»). Однако для булевых типов одиночный амперсанд означает «логическое и», отличающееся от двойного тем, что цепь проверок не прекращается при получении в выражении значения
false
&#91;78&#93;
. Например,
a == b &amp;&amp; foo() == bar()
не повлечёт вызовов
foo()
и
bar()
в случае, если
a&#160;!= b
, тогда как использование
&amp;
— повлечёт в любом случае.
Благодаря таким специально введенным ограничениям в Java невозможно прямое манипулирование памятью на уровне физических адресов (хотя определено значение ссылки, не указывающей ни на что:
null
).
Если нужен указатель на примитивный тип, используются классы-обёртки примитивных типов:
Boolean
,
Byte
,
Character
,
Short
,
Integer
,
Long
,
Float
,
Double
.
Дублирование ссылок и клонирование
[
править
|
править код
]
Из-за того, что объектные переменные являются ссылочными, при присваивании не происходит копирования объекта. Так, если написать
Foo
foo
,
bar
;
…
bar
=
foo
;
то произойдет копирование адреса из переменной
foo
в переменную
bar
. То есть
foo
и
bar
будут указывать на одну и ту же область памяти, то есть на один и тот же объект; попытка изменить поля объекта, на который ссылается переменная
foo
, будет менять объект, с которым связана переменная
bar
, и наоборот. Если же необходимо получить именно ещё одну
копию
исходного объекта, пользуются или
методом
(функцией-членом, в терминологии C++)
clone ()
, создающим копию объекта, или (реже) копирующим
конструктором
(конструкторы в Java не могут быть виртуальными, поэтому экземпляр класса-потомка будет неправильно скопирован конструктором класса-предка; метод клонирования вызывает нужный конструктор и тем самым позволяет обойти это ограничение).
Метод
clone()
требует, чтобы класс реализовывал
интерфейс
Cloneable
(об интерфейсах см. ниже). Если класс реализует интерфейс
Cloneable
, по умолчанию
clone()
копирует все поля (
мелкая копия
). Если требуется не копировать, а клонировать поля (а также их поля и так далее), надо переопределять метод
clone()
. Определение и использование метода
clone()
часто является нетривиальной задачей
&#91;79&#93;
.
Инициализация переменных
[
править
|
править код
]
Все переменные или требуют явного определения, или автоматически заполняются нулями (0,
null
, массивом нулей). Таким образом, исчезают
гейзенбаги
, связанные со случайным использованием неинициализированной памяти, характерные для низкоуровневых языков вроде
Си
.
Сборка мусора
[
править
|
править код
]
В языке Java невозможно явное удаление объекта из памяти&#160;— вместо этого реализована
сборка мусора
. Традиционным приёмом, дающим сборщику мусора «намёк» на необходимость освобождения памяти, является присваивание переменной пустого значения
null
, что может оказаться эффективным при необходимости освободить более не требующийся объект, ссылка на который хранится в долгоживущем объекте
&#91;80&#93;
. Это, однако, не значит, что объект, заменённый значением
null
, будет непременно и немедленно удалён, но есть гарантия, что этот объект будет удалён именно в будущем. Данный приём всего лишь устраняет ссылку на объект, то есть отвязывает указатель от объекта в памяти. При этом следует учитывать, что объект не будет удалён сборщиком мусора, пока на него указывает хотя бы одна ссылка из используемых переменных или объектов. Существуют также методы для инициации принудительной сборки мусора, но не гарантируется, что они будут вызваны исполняющей средой, и их не рекомендуется использовать для обычной работы.
Классы и функции
[
править
|
править код
]
Java не является процедурным языком: любая функция может существовать только внутри класса. Это подчёркивает терминология языка Java, где нет понятий «функция» или «функция-член» (
англ.
&#160;
member function
), а только
метод
. В методы превратились и стандартные функции. Например, в Java нет функции
sin()
, а есть метод
Math.sin()
класса
Math
(содержащего, кроме
sin()
, методы
cos()
,
exp()
,
sqrt()
,
abs()
и многие другие). Конструкторы в Java не считаются методами. Деструкторов в Java не существует, а метод
finalize()
ни в коем случае нельзя считать аналогом деструктора.
Конструкторы
[
править
|
править код
]
Конструктор&#160;— это специальный метод, который обязательно вызывается при создании нового объекта, то есть объект (экземпляр класса) не может быть создан без вызова конструктора класса. Не всегда удобно инициализировать все переменные класса при создании его экземпляра, поэтому переменные экземпляра часто объявляют внутри тела конструктора, а инициализируют как аргументы конструктора при создании экземпляра класса. Иногда проще, чтобы какие-то значения были бы созданы по умолчанию при создании объекта. В таком случае переменные объявляются и инициализируются внутри тела конструктора.
Конструктор инициализирует объект непосредственно во время создания. Имя конструктора совпадает с именем класса, включая регистр, а по синтаксису конструктор похож на метод без возвращаемого значения.
private
int
Cat
();
// так выглядит метод по имени Cat
Cat
();
// так выглядит конструктор класса Cat
В отличие от метода, конструктор никогда ничего не возвращает.
Конструктор определяет действия, выполняемые при создании объекта класса, и является важной частью класса. Как правило, программисты стараются явно указать конструктор. Если явного конструктора нет, то Java автоматически создаст его (пустым) для использования по умолчанию.
В качестве примера можно рассмотреть некий класс
Box
, представляющий собой описание коробки. Конструктор класса просто установит начальные размеры для коробки.
class
Box
{
int
width
;
// ширина коробки
int
height
;
// высота коробки
int
depth
;
// глубина коробки
// Конструктор
Box
(
int
a
,
int
b
)
{
width
=
a
;
height
=
b
;
depth
=
10
;
}
// вычисляем объём коробки
int
getVolume
()
{
return
width
*
height
*
depth
;
}
}
Статические методы и поля
[
править
|
править код
]
В Java (как и в C++) используются
статические поля и
статические методы
(
англ.
&#160;
static method
&#160;— в теории программирования их также называют методами класса), которые задаются при помощи ключевого слова
static
. Статические поля (переменные класса) имеют тот же смысл, что и в C++: каждое такое поле является собственностью класса, поэтому для доступа к статическим полям не требуется создавать экземпляры соответствующего класса.
Например, математические функции, реализованные в классе
Math
, представляют собой как раз статические методы данного класса. Поэтому их можно вызывать напрямую из класса, не создавая его экземпляра, например:
double
x
=
Math
.
sin
(
1
);
Создание экземпляра статического класса запрещают с помощью приватного конструктора. Например, создание экземпляра класса
Math
приведёт к ошибке на этапе компиляции:
Math
m
=
new
Math
();
// Error: Math() has private access in java.lang.Math
double
x
=
m
.
sin
(
1
);
// Метода sin у объекта не существовало бы, т. к. он статичный
Поскольку статические методы существуют независимо от объектов (экземпляров класса), они не имеют доступа к обычным (не статическим) полям и методам данного класса. В частности, при реализации статического метода недопустимо использовать идентификатор
this
.
Возможность статического импорта позволяет вызывать статические функции и константы без указания класса. Пример без статического импорта:
double
x
=
Math
.
sin
(
Math
.
tan
(
Math
.
sqrt
(
y
))
+
Math
.
floor
(
24.5
))
+
Math
.
cos
(
42
*
Math
.
PI
);
Тот же пример, но со статическим импортом:
import static
java.lang.Math.*
;
...
double
x
=
sin
(
tan
(
sqrt
(
y
))
+
floor
(
24.5
))
+
cos
(
42
*
PI
);
Завершённость (final)
[
править
|
править код
]
Ключевое слово
final
(финальный) имеет разные значения при описании поля, метода или класса.
Финальное
поле
класса инициализируется при описании или в конструкторе класса (а статическое поле&#160;— в статическом блоке инициализации). Впоследствии его значение не может быть изменено. Если статическое поле класса или переменная проинициализированы константным выражением, они рассматриваются компилятором как
именованная константа
; в таком случае их значение может быть использовано в
операторах
switch
(для констант типа
int
), а также для условной компиляции (для констант типа
boolean
) при использовании с
оператором
if
.
Значения
локальных переменных
, а также
параметров метода
, помеченных ключевым словом
final
, не могут быть изменены после присвоения. При этом их значения могут использоваться внутри
анонимных классов
.
Метод
класса, отмеченный словом
final
, не может быть переопределён при наследовании.
Финальный
класс
не может иметь наследников.
Абстрактность
[
править
|
править код
]
В Java методы, не объявленные явно как
static
,
final
или
private
, являются
виртуальными
в терминологии C++: при вызове метода, по-разному определённого в базовом и наследующем классах, всегда производится проверка времени выполнения.
Абстрактным методом
(модификатор
abstract
) в Java называется метод, для которого заданы параметры и тип возвращаемого значения, но не задано тело. Абстрактный метод определяется в классах-наследниках. Аналог абстрактного метода в C++&#160;— чисто виртуальная функция (pure virtual function). Для того чтобы в классе можно было описывать абстрактные методы, сам класс тоже должен быть описан как абстрактный. Объекты абстрактного класса создавать нельзя.
Интерфейсы
[
править
|
править код
]
Высшей степенью абстрактности в Java является интерфейс (модификатор
interface
). Все методы интерфейса абстрактны: описатель
abstract
даже не требуется. Интерфейс в Java не считается классом, хотя, по сути, является полностью абстрактным классом. Класс может наследовать/
расширять
(
extends
) другой класс или
реализовывать
(
implements
) интерфейс. Кроме того, интерфейс может наследовать/расширять другой интерфейс.
В Java класс не может наследовать более одного класса, зато может реализовывать несколько интерфейсов. Множественное наследование интерфейсов не запрещено, то есть один интерфейс может наследоваться от нескольких.
Интерфейсы можно использовать в качестве типов параметров методов. Нельзя создавать экземпляры интерфейсов.
Маркерные интерфейсы
[
править
|
править код
]
В Java есть интерфейсы, которые не содержат методов для реализации, а специальным образом обрабатываются JVM:
java.lang.Cloneable
,
java.io.Serializable
,
java.util.RandomAccess
,
java.rmi.Remote
.
Шаблоны в Java (generics)
[
править
|
править код
]
Начиная с версии Java 5.0 в языке появился механизм
обобщённого программирования
&#160;— шаблоны, внешне близкие к шаблонам C++. С помощью специального синтаксиса в описании классов и методов можно указать параметры-типы, которые внутри описания могут использоваться в качестве типов полей, параметров и возвращаемых значений методов.
// Объявление обобщённого класса
class
GenericClass
&lt;
E
&gt;
{
E
getFirst
()
{
...
}
void
add
(
E
obj
)
{
...
}
}
// Использование обобщённого класса в коде
GenericClass
&lt;
String
&gt;
obj
=
new
GenericClass
&lt;&gt;();
obj
.
add
(
&quot;qwerty&quot;
);
String
p
=
obj
.
getFirst
();
Допускается обобщённое объявление классов, интерфейсов и методов. Кроме того, синтаксис поддерживает ограниченные объявления типов-параметров: указание в объявлении конструкции вида
&lt;T extends A &amp; B &amp; C...&gt;
требует, чтобы тип-параметр T реализовывал интерфейсы A, B, C и так далее.
В отличие от шаблонов C#, шаблоны Java не поддерживаются средой исполнения&#160;— компилятор просто создаёт байт-код, в котором никаких шаблонов уже нет. Реализация шаблонов в Java принципиально отличается от реализации аналогичных механизмов в C++: компилятор не порождает для каждого случая использования шаблона отдельный вариант класса или метода-шаблона, а просто создаёт одну реализацию байт-кода, содержащую необходимые проверки и преобразования типов. Это приводит к ряду ограничений использования шаблонов в программах на Java.
Проверка принадлежности к классу
[
править
|
править код
]
В Java можно явно проверить, к какому классу принадлежит объект. Выражение
foo instanceof Foo
истинно, если объект
foo
принадлежит классу
Foo
или его наследнику, или реализует интерфейс
Foo
(или, в общем виде, наследует класс, который реализует интерфейс, который наследует
Foo
).
Далее функция
getClass()
, определённая для всех объектов, выдаёт объект типа
Class
. Для каждого класса создаётся не более одного описывающего его объекта типа
Class
, поэтому эти объекты можно сравнивать. Так, например,
foo.getClass() == bar.getClass()
будет истинно, если объекты
foo
и
bar
принадлежат к одному классу.
Кроме того, объект типа
Class
любого типа можно получить так:
Integer.class
,
Object.class
.
Прямое сравнение классов не всегда является оптимальным средством проверки на принадлежность к классу. Зачастую вместо него используют функцию
isAssignableFrom()
. Эта функция определена у объекта типа
Class
и принимает объект типа
Class
в качестве параметра. Таким образом, вызов
Foo.class.isAssignableFrom(Bar.class)
вернёт
true
в случае, если
Foo
является предком класса
Bar
. Так как все объекты являются потомками типа
Object
, вызов
Object.class.isAssignableFrom()
всегда вернёт
true
.
В паре с упомянутыми функциями объекта типа
Class
используются также функции
isInstance()
(эквивалентно
instanceof
), а также
cast()
(преобразует параметр в объект выбранного класса).
Обработка ошибок
[
править
|
править код
]
Обработка ошибок в Java похожа на обработку ошибок в
C++
, за исключением необходимости в блоке
finally
. Данное отличие обусловлено тем, что Java не может придерживаться концепции
RAII
из-за наличия сборщика мусора, а автоматическое освобождение ресурсов в деструкторе может идти в непредсказуемом порядке через произвольные промежутки времени.
Осуществляется обработка ошибок с помощью операторов
try
,
catch
и
finally
. Выбрасываемая ошибка описывается объектом определённого класса, реализующего интерфейс
Throwable
и соответствующего типу ошибки.  Внутрь блока
try
помещается код, который может выбросить исключение, а блок
catch
отлавливает заданные программистом типы ошибок. При этом можно указывать более одного блока
catch
для обработки различных классов ошибок. Блок
finally
выполняется независимо от возникновения ошибки и предназначен для освобождения выделенных в ходе работы блока
try
ресурсов.
Начиная с Java 7 поддерживается интерфейс
AutoCloseable
, который позволяет реализовывать классы, автоматически освобождающие ресурсы. Объекты подобных классов требуется создавать в круглых скобках перед блоком
try
. Простым примером автоматического освобождения ресурсом может служить чтение содержимого файла:
1
import
java.io.*
;
2
3
public
class
Main
{
4
public
static
void
main
(
String
[]
args
)
throws
IOException
{
5
if
(
args
.
length
&lt;
2
)
{
6
System
.
err
.
println
(
&quot;Не указано имя файла.&quot;
);
7
return
;
8
}
9
String
filename
=
args
[
1
];
10
// Открытый файл будет автоматически закрыт по ошибке
11
try
(
BufferedReader
reader
=
new
BufferedReader
(
new
FileReader
(
filename
)))
{
12
String
line
;
13
for
(
int
n
=
1
;
(
line
=
reader
.
readLine
())
!=
null
;
++
n
)
{
14
System
.
out
.
println
(
n
+
&quot;: &quot;
+
line
);
15
}
16
}
catch
(
FileNotFoundException
e
)
{
17
System
.
err
.
println
(
&quot;Указанный файл не найден.&quot;
);
18
}
19
}
20
}
Java придерживается концепции обязательного указания классов ошибок, которые может выбросить метод. Делается это с помощью ключевого слово
throws
после описания метода. Если в методе не указать класс исключения (или его предка), которое может быть выброшено из метода, то это вызовет ошибку компиляции. Концепция должна была позволить делать код самодокументируемым, обозначая, какие исключения может выбросить тот или иной метод, но на практике редко себя оправдывает, поскольку в силу разных обстоятельств программист может указать в качестве выбрасываемого исключения класс
Exception
, либо заключить проблемные части метода в блок
try
…
catch
для игнорирования отдельных ошибок, либо — в блок
try
…
finally
, скрывая все возможные ошибки. Недостатком концепции также является и то, что программист сам должен определять и прописывать исключения, которые может выбрасывать метод
&#91;81&#93;
.
Пространство имён
[
править
|
править код
]
Основная статья:
Пространство имён (программирование)
Идея пространств имён воплощена в
Java-пакетах
.
Внутри пакета есть два независимых пространства имен: переменные и методы.
Примеры программ
[
править
|
править код
]
Код программы
«Hello World!»
.
1
class
HelloWorld
{
2
public
static
void
main
(
String
[]
args
)
{
3
System
.
out
.
println
(
&quot;Hello World!&quot;
);
4
}
5
}
Обобщения
:
Пример использования обобщений
import
java.util.List
;
import
java.util.ArrayList
;
public
class
Sample
{
public
static
void
main
(
String
[]
args
)
{
// Создание объекта по шаблону.
List
&lt;
String
&gt;
strings
=
new
ArrayList
&lt;&gt;();
strings
.
add
(
&quot;Hello&quot;
);
strings
.
add
(
&quot;world&quot;
);
strings
.
add
(
&quot;!&quot;
);
for
(
var
string
:
strings
)
{
System
.
out
.
print
(
string
+
&quot; &quot;
);
}
}
}
Рефлексия
:
Пример использования рефлексии
import
java.lang.reflect.Field
;
import
java.lang.reflect.Method
;
class
TestClass
{
private
int
value
;
public
int
getValue
()
{
return
value
;
}
public
void
setValue
(
int
valueIn
)
{
this
.
value
=
valueIn
;
}
}
public
class
Main
{
public
static
void
main
(
String
[]
args
)
{
var
testClass
=
new
TestClass
();
for
(
var
field
:
testClass
.
getClass
().
getDeclaredFields
())
{
System
.
out
.
printf
(
&quot;name:%s, type:%s \n&quot;
,
field
.
getName
(),
field
.
getType
().
getCanonicalName
());
}
for
(
var
method
:
testClass
.
getClass
().
getDeclaredMethods
())
{
System
.
out
.
printf
(
&quot;name:%s, return type:%s  \n&quot;
,
method
.
getName
(),
method
.
getReturnType
().
getCanonicalName
());
}
}
}
Аннотации
:
Пример использования аннотаций
import
java.lang.annotation.ElementType
;
import
java.lang.annotation.Retention
;
import
java.lang.annotation.RetentionPolicy
;
import
java.lang.annotation.Target
;
@Retention
(
RetentionPolicy
.
RUNTIME
)
@Target
(
ElementType
.
TYPE
)
public
@interface
MyAnnotation
{
public
boolean
value
()
default
false
;
}
@MyAnnotation
(
value
=
true
)
public
class
TestClass
{
}
public
class
Main
{
public
static
void
main
(
String
[]
args
)
{
var
testClass
=
new
TestClass
();
var
myAnnotation
=
testClass
.
getClass
().
getAnnotation
(
MyAnnotation
.
class
);
if
(
myAnnotation
!=
null
)
{
System
.
out
.
printf
(
&quot;value:%s \n&quot;
,
myAnnotation
.
value
());
}
}
}
Средства разработки ПО
[
править
|
править код
]
JDK
&#160;— помимо набора библиотек для платформ
Java SE
и
Java EE
, содержит компилятор командной строки javac и набор утилит, также работающих в режиме командной строки.
NetBeans IDE
&#160;— свободная интегрированная среда разработки для всех платформ Java&#160;—
Java ME
,
Java SE
и
Java EE
. Пропагандируется
Oracle
, владельцем технологии Java, как базовое средство для разработки ПО на языке Java и других языках (
C
,
C++
,
PHP
,
Fortran
и др.).
Eclipse IDE
&#160;— свободная интегрированная среда разработки для
Java SE
,
Java EE
и
Java ME
&#91;82&#93;
. Пропагандируется
IBM
, одним из важнейших разработчиков корпоративного ПО, как базовое средство для разработки ПО на языке Java и других языках (
C
,
C++
,
Ruby
,
Fortran
и др.).
IntelliJ IDEA
&#160;— среда разработки для платформ
Java SE
,
Java EE
и
Java ME
. Разработчик&#160;— компания
JetBrains
. Распространяется в двух версиях: свободной бесплатной (Community Edition) и коммерческой проприетарной (Ultimate Edition).
JDeveloper
&#160;— среда разработки для платформ
Java SE
,
Java EE
и
Java ME
. Разработчик&#160;— компания
Oracle
.
BlueJ
&#160;— среда разработки программного обеспечения на языке Java, созданная в основном для использования в обучении, но также подходящая для разработки небольших программ.
Geany
&#160;—
свободная
среда разработки программного обеспечения
, написанная с использованием
библиотеки
GTK2
.
См. также
[
править
|
править код
]
Java
в Викисловаре
Java
в Викиучебнике
Java
на Викискладе
Java
в Викиновостях
Сравнение C# и Java
Список Java API
Java User Groups
Примечания
[
править
|
править код
]
Комментарии
[
править
|
править код
]
↑
Произносится на английском как
/ˈdʒɑːvə/
, в русском языке встречаются транслитерации «Джава» и «Ява», правообладатели торговой марки предпочитают первую транслитерацию.
Источники
[
править
|
править код
]
↑
JDK 11
&#160;
(англ.)
.&#32; openjdk.java.net.&#32;
Проверено 25 сентября 2018.
↑
Java Was Strongly Influenced by Objective-C
↑
White Paper. About Microsoft’s «Delegates»
Официальный сайт
↑
History of Java in Java Application Servers Report
Архивировано
29&#160;декабря 2010&#160;года.
TechMetrix Research, 1999
↑
Идея динамической кодогенерации взята из диссертации ученика Вирта Микаэля Франца (
PC World Russia CD, September 2005
)
↑
Лекция Н. Вирта в Нижегородском государственном университете им. Н.&#160;И.&#160;Лобачевского
&#160;
(неопр.)
&#160;
(недоступная ссылка)
.&#32;
Проверено 29 августа 2011.
&#32;
Архивировано
27&#160;января 2012&#160;года.
↑
В Java 5.0 было добавлено несколько новых особенностей (
foreach
, autoboxing, varargs и
аннотаций
), после того, как они были введены в аналогичный (и конкурирующий) язык
C#
; см.:
http://www.barrycornelius.com/papers/java5/
http://www.levenez.com/lang/
↑
Gosling, McGilton.
&#32;
The Java Language Environment
&#160;
(неопр.)
.&#32; Официальный сайт&#32;(май 1996).&#32;
Проверено&#160;???.
&#32;
Архивировано
21&#160;августа 2011&#160;года.
↑
J. Gosling, B. Joy, G. Steele, G. Brachda.
&#32;
The Java Language Specification, 2nd Edition
&#160;
(неопр.)
.&#32; Официальный сайт.&#32;
Проверено&#160;???.
&#32;
Архивировано
21&#160;августа 2011&#160;года.
↑
The A-Z of Programming Languages: Modula-3&#160;— a-z of programming languages&#160;— Computerworld
Архивировано
5&#160;января 2009&#160;года.
↑
The 2018 Top Programming Languages
&#160;
(англ.)
,
IEEE Spectrum: Technology, Engineering, and Science News
.&#32;
Проверено 19 ноября 2018.
↑
TIOBE Index | TIOBE - The Software Quality Company
&#160;
(неопр.)
.&#32; www.tiobe.com.&#32;
Проверено 19 ноября 2018.
↑
Buyya.
&#32;
Object-oriented Programming with Java: Essentials and Applications
.&#160;— Tata McGraw-Hill Education, 2009.&#160;— 678&#160;с.&#160;—
ISBN 9780070669086
.
↑
1
2
Java 6 -server speed ÷ C++ GNU g++ speed | Computer Language Benchmarks Game
↑
Metz, Cade.
&#32;
Google pits C++ against Java, Scala, and Go
&#160;
(англ.)
.&#32;
The Register
&#32;(3&#160;June 2011).&#32;
Проверено 5 июня 2011.
&#32;
Архивировано
21&#160;августа 2011&#160;года.
↑
Loop Recognition in C++/Java/Go/Scala
&#160;
(
PDF
, 0.3 МБ)
↑
В Google провели сравнение производительности C++, Java, Go и Scala
↑
Robert Tolksdorf.
&#32;
Programming languages for the Java Virtual Machine JVM
&#160;
(англ.)
.&#32; is-research GmbH.&#160;— Онлайн-каталог альтернативных языков и языковых расширений для JVM.&#32;
Проверено 5 июня 2009.
&#32;
Архивировано
21&#160;августа 2011&#160;года.
↑
SUN SHIPS JDK 1.1 -- JAVABEANS INCLUDED
&#160;
(неопр.)
&#32;(10&#160;февраля 2008).&#32;
Проверено 17 ноября 2018.
↑
Java 2 Software
&#160;
(неопр.)
&#32;(19&#160;января 2004).&#32;
Проверено 17 ноября 2018.
↑
Ada 83 LRM, Sec 12.1: Generic Declarations
&#160;
(неопр.)
.&#32; archive.adaic.com.&#32;
Проверено 17 ноября 2018.
↑
Результаты тестов
↑
JavaFX FAQ
&#160;
(неопр.)
.&#32; www.oracle.com.&#32;
Проверено 17 ноября 2018.
↑
Smith, Donald
.&#32;
The Future of JavaFX and Other Java Client Roadmap Updates
.&#32;
Проверено 17 ноября 2018.
↑
план разработки для JDK7
↑
План Б
↑
OpenJDK: Project Coin
&#160;
(неопр.)
.&#32; openjdk.java.net.&#32;
Проверено 17 ноября 2018.
↑
Компания Oracle анонсировала выход Java Standard Edition 7
&#160;
(рус.)
↑
Index corruption and crashes in Apache Lucene Core / Apache Solr with Java 7
&#160;
(англ.)
↑
Акторное расширение языка Java в среде MPS
.&#160;— вестник ИТМО.&#160;— Вып 6 (94)
↑
What's New in JDK 8
&#160;
(неопр.)
.&#32; www.oracle.com.&#32;
Проверено 17 ноября 2018.
↑
Method References
&#160;
(англ.)
.&#32;
The Java™ Tutorials
.&#32; docs.oracle.com.&#32;
Проверено 17 ноября 2018.
↑
JDK 9 release delayed another four months
↑
Java 9 gets a release date: July 27
↑
Java 9 delayed to September 21
↑
Oracle Announces Java SE 9 and Java EE 8. Press Release
&#160;
(англ.)
.&#32;
Oracle
&#32;(Sep 21, 2017).&#32;
Проверено 1 августа 2018.
↑
Project Jigsaw
&#160;
(англ.)
.&#32; openjdk.java.net.&#32;
Проверено 24 ноября 2018.
↑
JEP 102: Process API Updates
&#160;
(англ.)
.&#32;
OpenJDK
.
↑
1
2
JEP 110: HTTP/2 Client (Incubator)
&#160;
(англ.)
.&#32;
OpenJDK
.
↑
JEP 11: Incubator Modules
&#160;
(англ.)
.&#32;
OpenJDK
.
↑
JEP 254: Compact Strings
&#160;
(англ.)
.&#32;
OpenJDK
.
↑
JEP 287: SHA-3 Hash Algorithms
&#160;
(англ.)
.&#32;
OpenJDK
.
↑
JEP 277: Enhanced Deprecation
&#160;
(англ.)
.&#32;
OpenJDK
.
↑
JEP 283: Enable GTK 3 on Linux
&#160;
(неопр.)
.&#32; openjdk.java.net.&#32;
Проверено 25 ноября 2018.
↑
Ошибка в сносках
?
:&#x20;Неверный тег
&lt;ref&gt;
; для сносок
Java-10-032018
не указан текст
↑
JEP 286: Local-Variable Type Inference
&#160;
(англ.)
.&#32; openjdk.java.net.&#32;
Проверено 18 ноября 2018.
↑
JEP 304: Garbage Collector Interface
&#160;
(англ.)
.&#32; openjdk.java.net.&#32;
Проверено 20 ноября 2018.
↑
JEP 307: Parallel Full GC for G1
&#160;
(англ.)
.&#32; openjdk.java.net.&#32;
Проверено 21 ноября 2018.
↑
Алексей Рагозин.
&#32;
Safepoints in HotSpot JVM
&#160;
(англ.)
.&#32; blog.ragozin.info.&#32;
Проверено 24 ноября 2018.
↑
JEP 312: Thread-Local Handshakes
&#160;
(англ.)
.&#32; openjdk.java.net.&#32;
Проверено 24 ноября 2018.
↑
JEP 314: Additional Unicode Language-Tag Extensions
&#160;
(англ.)
.&#32; openjdk.java.net.&#32;
Проверено 22 ноября 2018.
↑
JEP 316: Heap Allocation on Alternative Memory Devices
&#160;
(англ.)
.&#32; openjdk.java.net.&#32;
Проверено 24 ноября 2018.
↑
JEP 317: Experimental Java-Based JIT Compiler
&#160;
(англ.)
.&#32; openjdk.java.net.&#32;
Проверено 22 ноября 2018.
↑
JEP 322: Time-Based Release Versioning
&#160;
(англ.)
.&#32; openjdk.java.net.&#32;
Проверено 22 ноября 2018.
↑
JEP 181: Nest-Based Access Control
&#160;
(англ.)
.&#32; openjdk.java.net.&#32;
Проверено 18 ноября 2018.
↑
JEP 318: Epsilon: A No-Op Garbage Collector (Experimental)
&#160;
(англ.)
.&#32; openjdk.java.net.&#32;
Проверено 18 ноября 2018.
↑
JEP 321: HTTP Client (Standard)
&#160;
(англ.)
.&#32; openjdk.java.net.&#32;
Проверено 18 ноября 2018.
↑
JEP 323: Local-Variable Syntax for Lambda Parameters
&#160;
(англ.)
.&#32; openjdk.java.net.&#32;
Проверено 18 ноября 2018.
↑
JEP 327: Unicode 10
&#160;
(англ.)
.&#32; openjdk.java.net.&#32;
Проверено 18 ноября 2018.
↑
JEP 332: Transport Layer Security (TLS) 1.3
&#160;
(англ.)
.&#32; openjdk.java.net.&#32;
Проверено 18 ноября 2018.
↑
JEP 333: ZGC: A Scalable Low-Latency Garbage Collector (Experimental)
&#160;
(англ.)
.&#32; openjdk.java.net.&#32;
Проверено 18 ноября 2018.
↑
Delabassee, David
.&#32;
Opening Up Java EE - An Update
.&#32;
Проверено 25 ноября 2018.
↑
And the Name Is…
&#160;
(англ.)
,
Life at Eclipse
&#160;(26&#160;февраля 2018).&#32;
Проверено 25 ноября 2018.
↑
JEP 320: Remove the Java EE and CORBA Modules
&#160;
(неопр.)
.&#32; openjdk.java.net.&#32;
Проверено 25 ноября 2018.
↑
1
2
Microsoft Java Virtual Machine Support
&#160;
(англ.)
.&#32; Microsoft&#32;(12 сентября 2003).&#160;— Официальное заявление Microsoft о программе поддержки MSJVM.&#32;
Проверено 9 октября 2010.
&#32;
Архивировано
21&#160;августа 2011&#160;года.
↑
Visual J#
&#160;
(рус.)
.&#32; Microsoft&#32;(ноябрь 2007).&#160;— Официальная информация Microsoft об исключении J# из комплекта Visual Studio 2008.&#32;
Проверено 10 октября 2010.
&#32;
Архивировано
21&#160;августа 2011&#160;года.
↑
Todd Hoff.
&#32;
Amazon Architecture
&#160;
(англ.)
&#32;(18 сентября 2007).&#160;— Обсуждение архитектуры Amazon с использованием Java-технологий.&#32;
Проверено 6 июня 2009.
↑
Amazon Elastic Compute Cloud (Amazon EC2)
&#160;
(англ.)
.&#32; Amazon Web Services LLC.&#160;— Описание технологии и возможностей Amazon EC2 как веб-сервиса.&#32;
Проверено 6 июня 2009.
&#32;
Архивировано
21&#160;августа 2011&#160;года.
↑
Todd Hoff.
&#32;
eBay Architecture
&#160;
(англ.)
&#32;(27 мая 2008).&#160;— Обсуждение архитектуры eBay на платформе Java.&#32;
Проверено 6 сентября 2009.
&#32;
Архивировано
21&#160;августа 2011&#160;года.
↑
Randy Shoup, Dan Pritchett.
&#32;
The eBay Architecture
&#160;
(англ.)
.&#32;
SD Forum 2006
.&#32;&#160;???&#32;(29 ноября 2006).&#160;— Презентация по истории развития архитектуры eBay.&#32;
Проверено 6 июня 2009.
&#32;
Архивировано
21&#160;августа 2011&#160;года.
↑
Brian Guan.
&#32;
The LinkedIn Blog. Blog Archive. Grails at LinkedIn
&#160;
(англ.)
.&#32; LinkedIn.com&#32;(11 июня 2008).&#160;— История создания системы LinkedIn на основе Java-технологии Grails.&#32;
Проверено 5 июня 2009.
&#32;
Архивировано
21&#160;августа 2011&#160;года.
↑
Hadoop and Distributed Computing at Yahoo!
&#160;
(англ.)
.&#32; Yahoo!.&#160;— Стартовая страница Java-технологии распределённого обслуживания Hadoop на портале разработчиков Yahoo!.&#32;
Проверено 21 июня 2009.
&#32;
Архивировано
21&#160;августа 2011&#160;года.
↑
OracleJVM and Java Stored Procedures
&#160;
(англ.)
.&#32; Oracle Inc..&#160;— Раздел портала Oracle, посвящённый технологиям Java в составе сервера СУБД Oracle.&#32;
Проверено 5 июня 2009.
&#32;
Архивировано
21&#160;августа 2011&#160;года.
↑
Ubuntu: Intel® Q6600® quad-core Computer Language Benchmarks
&#160;
(неопр.)
.&#32;
Архивировано
22&#160;июня 2012&#160;года.
↑
Wolfgang Puffitsch, Martin Schoeberl.
&#32;
picoJava-II in an FPGA
&#160;
(англ.)
&#160;// DTU Library.&#160;— 2007.
↑
JVM не имеет поддержки для переменных типа boolean, поэтому они представляются в виде значений типа int. Однако массивы boolean[] поддерживаются.
VM Spec The Structure of the Java Virtual Machine
↑
Бьярн Страуструп
.
&#32;Язык программирования С++&#32;&#61;&#32;The C++ Programming Language.&#160;— М.—СПб.: Бином, Невский диалект, 2008.&#160;— 1104&#160;с.&#160;—
5000 экз.
&#160;—
ISBN 5-7989-0226-2
;
ISBN 5-7940-0064-3
;
ISBN 0-201-70073-5
.
↑
Джеймс Гослинг
, Билл Джой, Гай Стил, Гилад Брача, Алекс Бакли, Даниел Смит.
&#32;
Java Language Specification
.&#32;
Chapter&#160;15.&#160;Expressions
&#160;
(англ.)
.
&#32; docs.oracle.com
.
&#32;
Проверено 1 декабря 2018.
↑
Java API Reference
.&#32;
Class Object
&#160;
(англ.)
.
&#32; docs.oracle.com
.
&#32;
Проверено 26 ноября 2018.
↑
Scott Oaks.
&#32;
Java Performance: The Definitive Guide: Getting the Most Out of Your Code
.&#160;— "O'Reilly Media, Inc.", 2014-04-10.&#160;— 425&#160;с.&#160;—
ISBN 9781449363543
.
↑
The Trouble with Checked Exceptions
&#160;
(неопр.)
.&#32; www.artima.com.&#32;
Проверено 21 декабря 2018.
↑
Pulsar - Eclipse Mobile Tools Platform
&#160;
(англ.)
.&#32; Eclipse.&#160;— Проект eclipse для мобильных разработчиков.&#32;
Проверено 23 марта 2011.
&#32;
Архивировано
21&#160;августа 2011&#160;года.
Литература
[
править
|
править код
]
Герберт Шилдт.
&#32;Java 8. Полное руководство, 9-е издание&#32;&#61;&#32;Java 8. The Complete Reference, 9th Edition.&#160;—
М.
:
«Вильямс»
, 2015.&#160;— 1376&#160;с.&#160;—
ISBN 978-5-8459-1918-2
.
Кей С. Хорстманн.
&#32;Java SE 8. Вводный курс&#32;&#61;&#32;Java SE 8 for the Really Impatient.&#160;—
М.
:
«Вильямс»
, 2014.&#160;— 208&#160;с.&#160;—
ISBN 978-5-8459-1900-7
.
Фрэд Лонг, Дхрув Мохиндра, Роберт С. Сикорд, Дин Ф. Сазерленд, Дэвид Свобода.
&#32;Руководство для программиста на Java: 75 рекомендаций по написанию надежных и защищённых программ&#32;&#61;&#32;Java Coding Guidelines: 75 Recommendations for Reliable and Secure Programs.&#160;—
М.
:
«Вильямс»
, 2014.&#160;— 256&#160;с.&#160;—
ISBN 978-5-8459-1897-0
.
Кей С. Хорстманн, Гари Корнелл.
&#32;Java. Библиотека профессионала, том 1. Основы. 9-е издание&#32;&#61;&#32;Core Java, Volume I: Fundamentals (9th Edition).&#160;—
М.
:
«Вильямс»
, 2013.&#160;— 864&#160;с.&#160;—
ISBN 978-5-8459-1869-7
.
Кей С. Хорстманн.
&#32;Java. Библиотека профессионала, том 1. Основы. 10-е издание&#32;&#61;&#32;Core Java. Volume I - Fundamentals (Tenth Edition).&#160;—
М.
:
«Вильямс»
, 2017.&#160;— 864&#160;с.&#160;—
ISBN 978-5-8459-2084-3
.
Кей С. Хорстманн.
&#32;Java. Библиотека профессионала, том 2. Расширенные средства программирования. 10-е издание&#32;&#61;&#32;Core Java. Volume II - Advanced Feature (Tenth Edition).&#160;—
М.
:
«Вильямс»
, 2017.&#160;— 976&#160;с.&#160;—
ISBN 978-5-9909445-0-3
.
Барри Берд.
&#32;Java 8 для чайников&#32;&#61;&#32;Java For Dummies, 6th edition.&#160;—
М.
:
«Диалектика»
, 2015.&#160;— 400&#160;с.&#160;—
ISBN 978-5-8459-1928-1
.
Джеймс Гослинг, Билл Джой, Гай Стил, Гилад Брача, Алекс Бакли.
&#32;Язык программирования Java SE 8. Подробное описание, 5-е издание&#32;&#61;&#32;The Java Language Specification, Java SE 8 Edition (5th Edition) (Java Series).&#160;—
М.
:
«Вильямс»
, 2015.&#160;— 672&#160;с.&#160;—
ISBN 978-5-8459-1875-8
.
Джошуа Блох.
&#32;Java. Эффективное программирование&#32;&#61;&#32;Effective Java.&#160;—
М.
:
Лори
, 2002.&#160;— 224&#160;с.&#160;—
ISBN 5-85582-169-2
.
Монахов Вадим.
&#32;Язык программирования Java и среда NetBeans.&#160;— 3-е изд.&#160;—
СПб.
:
БХВ-Петербург
, 2011.&#160;— 704&#160;с.&#160;—
ISBN 978-5-9775-0671-7
.
Брюс Эккель.
&#32;Философия Java&#32;&#61;&#32;Thinking in Java.&#160;— 3-е изд.&#160;—
СПб.
:
Питер
, 2003.&#160;— 976&#160;с.&#160;—
ISBN 5-88782-105-1
.
Ссылки
[
править
|
править код
]
Автономный установщик последней версии Java
7 версия Java
Архив всех версий
Официальный сайт
Bruce Eckel’s Free Electronic Books
&#160;
(англ.)
&#160;— свободно распространяемые электронные версии книг Брюса Эккеля по C++ и Java вместе с исходным кодом
W. Kahan, Joseph D. Darcy.
How Java’s Floating-Point Hurts Everyone Everywhere
Java™ Platform, Standard Edition 6 API Specification
Учебник Java 8
Java
Платформы
Java Card
Java ME
Java SE
Java EE
Технологии
Sun
Java
Java Development Kit
OpenJDK
WTK
Java Virtual Machine
JavaFX
JAXP
Squawk
Основные сторонние технологии
GNU Classpath
GNU компилятор для Java
Kaffe
TopLink
Apache Harmony
Apache Struts
Spring Framework
Dalvik
Hibernate
JBoss
Processing
Dozer
AspectJ
История
История версий Java SE
История версий Java EE
Критика Java
Java Community Process
Sun Microsystems
Свободные реализации Java
Свойства языка
Байткод
Синтаксис
Модель памяти
Апплеты
Сервлеты
Мидлеты
JavaServer Pages
Web Start
Enterprise JavaBeans
Скриптовые языки
Java Tcl
Jython
JRuby
BeanShell
Groovy
Judoscript
Sleep
Bean Scripting Framework
Yoix
Rhino
Конференции Java
JavaOne
Joker
JPoint
Языки программирования
Хронология
Ассемблер
BASIC
C
C++
C#
COBOL
Fortran
Go
Java
JavaScript
(JS)
Lisp
Lua
Pascal
Perl
PHP
Python
Ruby
Smalltalk
Visual Basic .NET
(VB.NET)
Категория
Сравнение
Списки:
хронологический
по категориям
Источник —
https://ru.wikipedia.org/w/index.php?title=Java&amp;oldid=98042116
Категории
:
Языки программирования по алфавиту
Языки программирования, появившиеся в 1995 году
Java
Языки веб-программирования
Языки программирования с автоматическим управлением памятью
Скрытые категории:
Страницы с ошибками в примечаниях
Википедия:Статьи с некорректным использованием шаблонов:Cite web (не указан язык)
Википедия:Страницы с неправильно оформленными сносками
Страницы, использующие волшебные ссылки ISBN
Википедия:Статьи с переопределением значения из Викиданных
ПРО:ИТ:Статьи по алфавиту
ПРО:ИТ:Последняя правка: в текущем месяце
Википедия:Нет источников с декабря 2018
Википедия:Статьи без источников (объекты менее указанного лимита: 7)
Википедия:Статьи без источников (тип: язык программирования)
Википедия:Статьи с утверждениями без источников более 14 дней
Статьи со ссылками на Викисловарь
Статьи со ссылками на Викиучебник
Статьи со ссылками на Викиновости
Навигация
Персональные инструменты
Вы не представились системе
Обсуждение
Вклад
Создать учётную запись
Войти
Пространства имён
Статья
Обсуждение
Варианты
Просмотры
Читать
Текущая версия
Править
Править код
История
Ещё
Поиск
Навигация
Заглавная страница
Рубрикация
Указатель А — Я
Избранные статьи
Случайная статья
Текущие события
Участие
Сообщить об ошибке
Сообщество
Форум
Свежие правки
Новые страницы
Справка
Пожертвовать
Инструменты
Ссылки сюда
Связанные правки
Служебные страницы
Постоянная ссылка
Сведения о странице
Элемент Викиданных
Цитировать страницу
Печать/экспорт
Создать книгу
Скачать как PDF
Версия для печати
В других проектах
Викисклад
Викиучебник
Викиновости
На других языках
Acèh
Afrikaans
አማርኛ
Aragonés
العربية
অসমীয়া
Asturianu
Azərbaycanca
تۆرکجه
Žemaitėška
Беларуская
Беларуская (тарашкевіца)‎
Български
বাংলা
Bosanski
ᨅᨔ ᨕᨘᨁᨗ
Català
Mìng-dĕ̤ng-ngṳ̄
کوردی
Corsu
Čeština
Чӑвашла
Cymraeg
Dansk
Deutsch
Ελληνικά
English
Esperanto
Español
Eesti
Euskara
فارسی
Suomi
Français
Gaeilge
Galego
ગુજરાતી
客家語/Hak-kâ-ngî
עברית
हिन्दी
Hrvatski
Kreyòl ayisyen
Magyar
Հայերեն
Interlingua
Bahasa Indonesia
Íslenska
Italiano
日本語
ქართული
Qaraqalpaqsha
Taqbaylit
Қазақша
ಕನ್ನಡ
한국어
Кыргызча
Latina
Ligure
Lumbaart
Lietuvių
Latviešu
Baso Minangkabau
Македонски
മലയാളം
Монгол
मराठी
Bahasa Melayu
မြန်မာဘာသာ
नेपाली
Nederlands
Norsk nynorsk
Norsk
Occitan
ଓଡ଼ିଆ
ਪੰਜਾਬੀ
Polski
Português
Română
Саха тыла
Scots
سنڌي
Srpskohrvatski / српскохрватски
සිංහල
Simple English
Slovenčina
Slovenščina
Soomaaliga
Shqip
Српски / srpski
Svenska
தமிழ்
తెలుగు
Тоҷикӣ
ไทย
Tagalog
Türkçe
Татарча/tatarça
Українська
Oʻzbekcha/ўзбекча
Vèneto
Tiếng Việt
Winaray
吴语
中文
Bân-lâm-gú
粵語
Править ссылки
Эта страница в последний раз была отредактирована 11 февраля 2019 в 10:29.
Текст доступен по
лицензии Creative Commons Attribution-ShareAlike
; в отдельных случаях могут действовать дополнительные условия.
Подробнее см.
Условия использования
.
Wikipedia® — зарегистрированный товарный знак некоммерческой организации
Wikimedia Foundation, Inc.
Политика конфиденциальности
Описание Википедии
Отказ от ответственности
Свяжитесь с нами
Разработчики
Соглашение о cookie
Мобильная версия
