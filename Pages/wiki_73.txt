Ruby — Википедия
Ruby
Материал из Википедии — свободной энциклопедии
Текущая версия страницы пока
не проверялась
опытными участниками и может значительно отличаться от
версии
, проверенной 22 сентября 2018; 
проверки требуют
6 правок
.
Текущая версия страницы пока
не проверялась
опытными участниками и может значительно отличаться от
версии
, проверенной 22 сентября 2018; 
проверки требуют
6 правок
.
Перейти к навигации
Перейти к поиску
Ruby
Класс языка
мультипарадигмальный
:
динамический
,
объектно-ориентированный
,
рефлективный
,
императивный
,
функциональный
Тип исполнения
интерпретируемый
Появился в
1995
&#91;1&#93;
Автор
Юкихиро Мацумото
Расширение
файлов
.rb, .rbw
&#91;2&#93;
Выпуск
2.6.0
&#91;3&#93;
&#160;(
25 декабря
2018
)
Тестовая версия
2.6.0-preview3
&#91;4&#93;
(
6 ноября
2018
)
Система типов
строгая
,
динамическая
(
утиная
)
Основные реализации:
Ruby MRI
(
англ.
)
,
JRuby
,
Rubinius
Испытал влияние
Perl
,
Smalltalk
,
Eiffel
,
Ada
,
Lisp
&#91;1&#93;
,
Python
,
Dylan
,
CLU
,
C++
,
Lua
Повлиял на
Groovy
,
Amber
,
CoffeeScript
,
Perl 6
,
Elixir
,
Crystal
Лицензия
Лицензия Ruby
&#91;5&#93;
,
Лицензия BSD
или
GNU GPL
v2
&#91;6&#93;
&#91;7&#93;
Сайт
ruby-lang.org
Ruby
(
англ.
&#160;
ruby
&#160;—
рубин
, произносится
['ru:bɪ]
&#160;—
ру́би
)&#160;—
динамический
,
рефлективный
,
интерпретируемый
высокоуровневый язык программирования
&#91;8&#93;
&#91;9&#93;
. Язык обладает независимой от
операционной системы
реализацией
многопоточности
, сильной
динамической типизацией
,
сборщиком мусора
и многими другими возможностями
[⇨]
. По особенностям
синтаксиса
он близок к языкам
Perl
и
Eiffel
, по объектно-ориентированному подходу&#160;— к
Smalltalk
. Также некоторые черты языка взяты из
Python
,
Lisp
,
Dylan
и
Клу
.
Кроссплатформенная
реализация
интерпретатора
языка является
полностью свободной
&#91;6&#93;
.
Содержание
1
История создания и развития
2
Хронология выхода версий
3
Философия
4
Семантика
5
Возможности Ruby
6
Примеры
6.1
Контейнеры
6.2
Процедурные объекты и итераторы
6.3
Классы, примеси, методы, перегрузка операторов
6.4
Исключения
7
Реализация
7.1
Интерактивный Ruby
8
Поддержка интегрированных сред разработки
9
Библиотеки
9.1
Стандартная библиотека
9.2
Расширения
10
Документация
11
Использование
12
Разработка мобильных приложений
13
См. также
14
Примечания
15
Литература
16
Ссылки
История создания и развития
[
править
|
править код
]
Создатель Ruby&#160;—
Юкихиро Мацумото (Matz)
&#160;— интересовался
языками программирования
, ещё будучи студентом, но идея о разработке нового языка появилась позже. Ruby начал разрабатываться
23 февраля
1993 года
и вышел в свет в
1995 году
.
Название навеяно языком
Perl
, многие особенности
синтаксиса
и
семантики
из которого заимствованы в Ruby:
англ.
&#160;
pearl
&#160;— «жемчужина»,
ruby
&#160;— «рубин».
Целью разработки было создание «настоящего
объектно-ориентированного
», лёгкого в разработке,
интерпретируемого языка программирования
. Из письма автора
&#91;10&#93;
:
Ruby родился 23 февраля 1993 года. В тот день я беседовал со своим коллегой о возможности существования объектно-ориентированного
сценарного языка
. Я знал
Perl
(Perl4, а не Perl5), но он мне не нравился&#160;— был в нём некий привкус игрушечного языка (да и поныне есть). А объектно-ориентированный интерпретируемый язык казался многообещающим. В то время я знал
Python
. Но он мне не нравился потому, что я не считал его настоящим объектно-ориентированным языком. Его OO свойства казались надстройкой над языком. Мне, как языковому маньяку и фанату объектно-ориентированного программирования с пятнадцатилетним стажем, очень, очень хотелось, чтобы был истинно объектно-ориентированный, простой в использовании язык. Я пытался найти такой язык, но его не было.
Тогда я решил его создать. Прошло несколько месяцев, прежде чем
интерпретатор
заработал. Я добавил в мой язык то, что мне хотелось&#160;—
итераторы
,
обработку исключений
, автоматическую
сборку мусора
. Затем я переорганизовал свойства Perl и реализовал их как
библиотеку
классов
. В декабре
1995 года
я опубликовал Ruby 0.95 в японских новостных группах. С тех пор появились сайты, списки рассылок. В списках рассылок идут жаркие обсуждения. Самый старый список сейчас содержит 14 789 писем.
В Японии Ruby стал популярным с момента появления первой общедоступной версии в
1995 году
, однако наличие документации только на японском языке сдерживало его дальнейшее распространение. Лишь в
1997 году
появилось описание Ruby на английском языке, а в 1998 году открылся форум «ruby-talk». Это положило начало росту известности языка в остальном мире. Издано несколько
книг
на различных языках, в том числе на
русском
. Сейчас Ruby входит в большинство
дистрибутивов
ОС
Linux
, поставляется вместе с Mac OS X, доступен пользователям других операционных систем.
24 февраля 2014 года исполнился 21 год с момента анонса языка программирования Ruby. Такое событие разработчики решили отметить выпуском патча для Ruby 2.1, который назвали Ruby 2.1.1
&#91;11&#93;
.
Хронология выхода версий
[
править
|
править код
]
В списке ниже перечислены лишь наиболее крупные обновления
&#91;12&#93;
.
Название версии
Дата выхода
Примечания
0.06
7 января 1994
Первая версия, указанная в Changelog’ах
1.0-961225
25 декабря 1996
Данная версия следовала сразу за версией 0.99.4-961224, выпущенной накануне. Номер после числа 1.0&#160;— дата выпуска версии. Новые версии линейки 1.0 выходили ещё год (до 1.0-971225).
1.1 alpha0
13 августа 1997
Альфа-версии выходили вплоть до 7 октября 1997 (1.1 alpha9)
1.1b0
4 декабря 1997
Следующая версия после 1.1 alpha9. 27 февраля 1998 вышла версия 1.1b9, затем вплоть до середины 1998 выходили экспериментальные выпуски с обозначением вида 1.1b9_31 (версия 1.1b9_31 была выпущена, но в документации не отмечена).
1.1c0
17 июля 1998
Данная версия следовала за версией 1.1b9_31. Модификации этой версии выходили вплоть до 26 ноября 1998 (1.1c9).
1.1d0 (pre1.2)
16 декабря 1998
Данная версия следовала за версией 1.1c9. 22 декабря 1998 была выпущена экспериментальная версия 1.1d1, завершившая данную линейку.
1.2 (stable)
25 декабря 1998
В дальнейшем выходили модификации данной версии вплоть до версии 1.2.5, выпущенной 13 апреля 1999 года. 21 июня 1999 года была выпущена версия 1.2.6, объявленная как финальная версия 1.2 (1.2 final). 15 июля 1999 года вышла переупакованная (repacked) версия 1.2.6.
1.3 (development)
24 декабря 1998
Отдельная ветка модификаций, разрабатываемая независимо от линейки 1.2 (по аналогии с ядром ОС Linux). Первая версия была объявлена как версия для разработки (development version) и следовала за версией 1.1d1. В дальнейшем последовало множество промежуточных модификаций: ruby-1.3.1-990215&#160;— ruby-1.3.4-990625, после чего от указания даты в номере отказались и выпустили 1.3.5&#160;— 1.4 alpha (15 июля 1999), 1.3.6&#160;— 1.4 alpha (28 июля 1999), 1.3.7&#160;— 1.4 beta (6 августа 1999).
1.4.0 (stable)
13 августа 1999
Данная версия появилась через несколько дней после выхода 1.3.7&#160;— 1.4 beta. В дальнейшем выходили новые модификации вплоть до версии 1.4.6, вышедшей 16 августа 2000 года.
1.5.0 (development)
20 ноября 1999
Данная линейка предназначалась исключительно для проверки различных нововведений при разработке. Модификации данной линейки доступны исключительно в репозитории проекта и, соответственно, сборки данной версии на официальный сервер не выкладывались.
1.6.0 (stable)
19 сентября 2000
В дальнейшем выпускались модификации этой версии вплоть до версии 1.6.8 (24 декабря 2002). 21 сентября 2005 года был выпущен патч для версии 1.6.8.
1.7.0 (development)
24 февраля 2001
Данная линейка предназначалась исключительно для проверки различных нововведений при разработке. Модификации данной линейки доступны исключительно в репозитории проекта и, соответственно, сборки данной версии на официальный сервер не выкладывались.
1.8.0 (stable)
4 августа 2003
В дальнейшем последовало большое число модификаций, которые выходят до сих пор (1 января 2011 года), например, промежуточная версия 1.8.7-p330 вышла 24 декабря 2010 года.
1.9.0 (development)
25 декабря 2007
Изначально экспериментальная ветка, созданная для практической проверки ряда нововведений.
1.9.3 (stable)
31 октября 2011
Отличия от 1.9.2&#160;— существенны.
2.0.0 (stable)
24 февраля 2013
2.1.0 (stable)
25 декабря 2013
2.2.0 (stable)
25 декабря 2014
Поддержка Unicode 7.0, добавлена
сборка мусора
для объектов типа Symbol.
2.3.0 (stable)
25 декабря 2015
Добавлен новый оператор «&amp;.» для упрощения обработки значений nil при обращении к объектам. Реализована новая экспериментальная прагма frozen-string-literal, позволяющая заморозить состояние строковых литералов в исходных текстах.
2.4.0 (stable)
25 декабря 2016
Объединение Fixnum и Bignum в Integer. Поддержка изменения регистра знаков юникода для String. Улучшения хеш-таблиц (st_table). Интерактивные сессии binding.irb. Добавлен метод Regexp#match?. Оптимизация Array#max, Array#min.
2.5.0 (stable)
25 декабря 2017
В блоках do/end теперь допустимо напрямую использовать секции   rescue, else и ensure.
Определён метод yield_self для выполнение операции yield с блоком в его контексте. В отличие от tap, метод возвращает результат выполнения блока.
Поддержка измерения покрытия тестовым кодом веток и методов.
Добавлены новые методы  Hash#slice и Hash#transform_keys.
Включена автоматическая загрузка библиотеки pp.rb без необходимости указания в коде 'require "pp"'.
Изменён на обратный порядок вывод трассировки и сообщения об ошибке (вначале идут вызовы, начиная со старых и заканчивая свежими, а в конце выводится сообщение об ошибке).
&#91;13&#93;
2.6.0 (stable)
25 декабря 2018
Добавлена поддержка  JIT компиляции от Владимира Макарова;
Добавлен новый модуль RubyVM::AbstractSyntaxTree&#160;;
Новый алиас в ядре, Kernel#then алиас на Kernel#yield_self;
Добавлены бесконечные интервалы (1..);
Философия
[
править
|
править код
]
Мацумото
, фанат объектно-ориентированного программирования, мечтал о языке, более мощном, чем Perl, и более объектно-ориентированном, чем Python. Основное назначение Ruby&#160;— создание простых и в то же время понятных программ, где важна не скорость работы программы, а малое время разработки, понятность и простота синтаксиса.
Язык следует
принципу «наименьшей неожиданности»
: программа должна вести себя так, как ожидает
программист
. Однако в контексте Ruby это означает наименьшее удивление не при знакомстве с языком, а при его основательном изучении.
Сам Мацумото утверждает, что целью разработки была минимизация неожиданностей при программировании для
него
, но после распространения языка он с удивлением узнал, что мышление программистов похоже, и для многих из них принцип «наименьшей неожиданности» совпал с его принципом.
Ruby также унаследовал идеологию языка программирования
Perl
в части предоставления программисту возможностей достижения одного и того же результата несколькими различными способами. Люди различны, и им для свободы необходима возможность выбирать. «Я предпочитаю обеспечить много путей, если это возможно, но поощрять или вести пользователей, чтобы выбрать лучший путь, если это возможно»
&#91;14&#93;
.
Одной из основных целей разработки было освобождение программистов от рутинной работы, которую
компьютер
может выполнять быстрее и качественнее. Особое внимание, в частности, уделялось будничным рутинным занятиям (обработка текстов, администрирование), и для них язык настроен особенно хорошо.
В противовес машинно-ориентированным языкам, работающим быстрее, целью этой разработки был язык, наиболее близкий к человеку. Любая работа с компьютером выполняется людьми и для людей, и необходимо заботиться в первую очередь о затрачиваемых усилиях людей. Язык позволяет максимально быстро и просто для человека выполнить задачу, хотя, возможно, это и потребует дополнительного времени работы компьютера.
Принципы программирования и устройства языка иногда выделяются в термин «Путь Ruby» (
англ.
&#160;
Ruby Way
). Хэл Фултон выделяет
&#91;15&#93;
такие принципы, как «просто, но не слишком просто», «принцип наименьшего удивления», вторичность скорости работы программы, динамичность, простые строгие правила, выполнение которых не доходит до педантизма, потребность создавать полезные и красивые программы как причина программирования. В целом они не имеют точной формулировки и иногда этот термин используется для критики
&#91;16&#93;
.
Семантика
[
править
|
править код
]
Ruby&#160;— полностью
объектно-ориентированный язык
. В нём все данные являются
объектами
, в отличие от многих других языков, где существуют
примитивные типы
. Каждая функция&#160;—
метод
.
Ruby использует
вызов по соиспользованию
(
call-by-sharing
), хотя в сообществе Ruby часто говорят, что он использует
вызов по ссылке
. Для программиста, привыкшего к распространённым гибридным языкам программирования, некоторые эффекты такого решения могут показаться неожиданными. Например:
a
=
&quot;abcdefg&quot;
b
=
a
b
#=&gt; &quot;abcdefg&quot;
a
[
3
]
=
&#39;R&#39;
b
#=&gt; &quot;abcRefg&quot;
то есть при изменении значения переменной
a
неявно изменилось и значение
b
, так как они содержат ссылку на один объект. То есть механизм присваивания действует одинаково для всех объектов, в отличие от языков типа
C
,
Object Pascal
, где
присваивание
может означать как копирование значения, так и копирование ссылки на значение.
Ruby не поддерживает
множественное наследование
, но вместо него есть мощный механизм
примесей
. Все классы (напрямую или через другие классы) выведены из класса
Object
, следовательно, любой объект может использовать определённые в нём методы (например,
class
,
to_s
,
nil?
). Процедурный стиль также поддерживается, но все глобальные процедуры неявно являются закрытыми методами класса
Object
.
Ruby является
мультипарадигменным языком
: он поддерживает
процедурный
стиль (определение функций и переменных вне классов),
объектно-ориентированный
(всё&#160;— объект),
функциональный
(
анонимные функции
,
замыкания
, возврат значения всеми инструкциями, возврат функцией последнего вычисленного значения). Он поддерживает
рефлексию
,
метапрограммирование
, информацию о
типах
переменных на стадии выполнения (см.
динамическая идентификация типа данных
).
Возможности Ruby
[
править
|
править код
]
Имеет лаконичный и простой синтаксис, частично разработанный под влиянием
Ада
,
Eiffel
и
Python
.
Позволяет обрабатывать
исключения
в стиле
Java
и
Python
.
Позволяет
переопределять операторы
, которые на самом деле являются
методами
.
Полностью
объектно-ориентированный
язык программирования
. Все данные в Ruby являются объектами в понимании
Smalltalk
. Например, число «1» — это экземпляр класса
Integer
. Единственное исключение&#160;— управляющие конструкции, которые в Ruby, в отличие от Smalltalk, не являются объектами. Также поддерживается добавление методов в класс и даже в конкретный экземпляр во время выполнения программы.
Не поддерживает
множественное наследование
, но вместо него может использоваться концепция «
примесей
», основанная в данном языке на механизме модулей.
Содержит автоматический
сборщик мусора
. Он работает для всех объектов Ruby, в том числе для внешних библиотек.
Создавать расширения для Ruby на
Си
очень просто частично из-за сборщика мусора, частично из-за несложного и удобного
API
.
Поддерживает
замыкания
с полной привязкой к переменным.
Поддерживает
блоки кода
(код заключается в
{
…
}
или
do
…
end
). Блоки могут использоваться в методах или преобразовываться в замыкания.
Целые переменные в Ruby автоматически конвертируются между типами
Fixnum
(32-разрядные) и
Bignum
(больше 32 разрядов) в зависимости от их значения, что позволяет производить целочисленные математические расчёты со сколь угодно большой точностью.
Не требует предварительного объявления переменных, но для интерпретатора желательно, чтобы переменным присваивалось пустое значение nil (тогда интерпретатор знает, что идентификатор обозначает переменную, а не имя метода). Язык использует простые соглашения для обозначения области видимости. Пример: просто
var
&#160;— локальная переменная,
@var
&#160;— переменная экземпляра (член или поле объекта класса),
@@var
&#160;— переменная класса,
$var
&#160;— глобальная переменная.
В Ruby непосредственно в языке реализованы многие
шаблоны проектирования
, так, например, «
одиночка
» (singleton) может быть (хотя и не обязан) реализован добавлением необходимых методов к одному конкретному объекту (
см. ниже
).
Может динамически загружать расширения, если это позволяет
операционная система
.
Имеет независимую от ОС поддержку невытесняющей
многопоточности
.
Перенесён на множество платформ. Он разрабатывался на
Linux
, но работает на многих версиях
Unix
,
DOS
,
Microsoft Windows
(в частности,
Win32
),
Mac OS
,
BeOS
,
OS/2
и&#160;т.&#160;д.
Примеры
[
править
|
править код
]
В Ruby есть немало оригинальных решений, редко или вообще не встречающихся в распространённых языках программирования. Можно добавлять методы не только в любые классы, но и в любые объекты. Например, вы можете добавить к некоторой строке произвольный метод.
# всё от символа # и до конца строки - комментарий
# = является оператором присваивания,
# символы в «&quot;» - строка, которой можно манипулировать средствами языка
str
=
&quot;Привет&quot;
# здесь создаётся переменная str, типа String
# def - ключевое слово для объявления функции
def
str
.
bye
# str. указывает, кому принадлежит метод (по умолчанию Object)
# bye - имя метода, за ним может следовать необязательный, заключённый в
# круглые скобки список параметров функции
&quot;Пока!&quot;
# из метода возвращается последнее вычисленное значение (здесь - строка)
end
# ключевым словом end заканчиваются практически все инструкции Ruby
# puts - метод,
# str.bye - обращение к методу bye объекта str
# значение, полученное из метода bye, передаётся методу puts,
# который выводит на экран информацию
puts
str
.
bye
#=&gt; Пока!
Этот пример также демонстрирует, как в Ruby можно использовать
синглетон
.
В этом примере синглетоном является объект
str
.
Любая конструкция в Ruby возвращает значение. Например:
# конструкция if вычисляет выражение после него, и, если оно истинно,
# возвращает результат выражения между then и else, иначе между else и end
puts
(
if
5
&gt;
3
then
&quot;Одно&quot;
else
&quot;Другое&quot;
end
)
#=&gt; Одно
# происходит присваивание значения переменной var, и операция присваивания
# возвращает значение переменной var, которая выводится на экран
puts
(
var
=
5
)
#=&gt; 5
Контейнеры
[
править
|
править код
]
Работа с
массивами
&#160;— одна из сильных сторон Ruby. Они автоматически изменяют размер, могут содержать любые элементы, а язык предоставляет мощные средства для их обработки.
# создаём массив
a
=
[
1
,
&#39;hi&#39;
,
3
.
14
,
1
,
2
,
[
4
,
5
]
*
3
]
# =&gt; [1, &quot;hi&quot;, 3.14, 1, 2, [4, 5, 4, 5, 4, 5]]
# обращение по индексу
a
[
2
]
# =&gt; 3.14
# «разворачиваем» все внутренние массивы, удаляем одинаковые элементы
a
.
flatten
.
uniq
# =&gt; [1, &#39;hi&#39;, 3.14, 2, 4, 5]
# пытаемся найти индекс элемента со значением 6
a
.
index
(
6
)
# =&gt; nil
# неудача: возвращается значение nil
# почти для всех функций предоставляется
# аналог с тем же названием, но заканчивающийся на «!»,
# который модифицирует контейнер
a
.
flatten!
# =&gt; [1, &quot;hi&quot;, 3.14, 1, 2, 4, 5, 4, 5, 4, 5]
# находим индекс первого элемента со значением 4
a
.
index
(
4
)
# =&gt; 5
Процедурные объекты и итераторы
[
править
|
править код
]
В языке есть 2 эквивалентных способа записи
блоков кода
:
{
puts
&quot;Hello, World!&quot;
}
do
puts
&quot;Hello, World!&quot;
end
Сопрограммы
применяются с большинством встроенных методов:
File
.
open
(
&#39;file.txt&#39;
,
&#39;w&#39;
)
{
|
file
|
# открытие файла «file.txt» для записи («w» - write)
file
.
puts
&#39;Wrote some text.&#39;
}
# Конструкция устраняет неопределённость с закрытием файла: закрывается здесь при любом исходе
Следующий пример показывает использование сопрограмм и
итераторов
для работы с массивами, который показывает краткость записи на Ruby многих достаточно сложных действий (случайно выбираем из последовательности квадратов чисел от «0» до «10» и распечатываем вместе с индексами):
# Для работы требуется Ruby 1.9
(
0
..
10
)
.
collect
{
|
v
|
v
**
2
}
.
select
{
rand
(
2
)
.
zero?
}
.
map
.
with_index
{
|*
v
|
v
}
Классы, примеси, методы, перегрузка операторов
[
править
|
править код
]
Следующий пример определяет
класс
с именем
Person
, предназначенный для хранения информации об имени и возрасте некоторой персоны.
class
Person
&lt;
Object
# объявление класса начинается с ключевого слова class, за которым
# следует имя, класс Person наследуется от Object
include
Comparable
# подмешиваются к классу методы экземпляра
mix
MyModel
# подмешивание без наложения имен
extend
MyModel
# методы класса
# и добавляет методы &lt;, &lt;=, ==, &gt;=, &gt; и between?
# с использованием нижеопределённого
# в классе &lt;=&gt;
#
@variable
# переменная экземпляра
@@count_obj
=
0
# переменная класса для подсчёта числа созданных объектов
#
# конструктор для создания объектов с помощью new
def
initialize
(
name
,
age
)
# name, age - параметры метода
# название переменных объекта начинается с @
@name
,
@age
=
name
,
age
# создаём объекты
@@count_obj
+=
1
# увеличиваем счётчик на 1
end
def
&lt;=&gt;
(
person
)
# переопределение оператора &lt;=&gt;
# (это даёт возможность использовать метод sort)
@age
&lt;=&gt;
person
.
age
# из метода возвращается последнее вычисленное выражение,
end
def
to_s
# для форматированного вывода информации puts
&quot;
#{
@name
}
(
#{
@age
}
)&quot;
# конструкция #{x} в 2-х кавычках замещается в Ruby значением x
end
def
inspect
# похож на to_s, но используется для диагностического вывода
&quot;&lt;
#{
@@count_obj
}
:
#{
to_s
}
&gt;&quot;
end
# пример метапрограммирования: добавляет методы для доступа к
# переменным объекта
attr_reader
:name
,
:age
end
# создаём массив объектов
group
=
[
Person
.
new
(
&quot;John&quot;
,
20
),
Person
.
new
(
&quot;Markus&quot;
,
63
),
Person
.
new
(
&quot;Ash&quot;
,
16
)
]
# =&gt; [&lt;3:John (20)&gt;, &lt;3:Markus (63)&gt;, &lt;3:Ash (16)&gt;]
# здесь при работе с irb автоматически вызывается метод inspect
# вызываем методы массива сортировка и разворачивание его в обратном порядке
puts
group
.
sort
.
reverse
# Печатает:
# Markus (63)
# John (20)
# Ash (16)
# обращаемся к функции, которая была добавлена
# автоматически (используя &lt;=&gt;) при включении Comparable
group
[
0
].
between?
(
group
[
2
]
,
group
[
1
]
)
# =&gt; true
Исключения
[
править
|
править код
]
Исключения
возбуждаются с помощью конструкции
raise
(или
fail
), опционально могут быть добавлены текст с сообщением, тип исключения и информация о
стеке вызовов
:
raise
ArgumentError
,
&quot;Неверный аргумент&quot;
,
caller
# caller - метод, возвращающий текущий стек выполнения
Обрабатываются исключения с использованием конструкции
rescue
. Опционально можно указать тип обрабатываемого исключения (по умолчанию обрабатываются все) и получение информации. Также можно добавлять блоки
else
(выполняется, если исключения отсутствовали) и
ensure
(выполняется в любом случае).
begin
# ...
rescue
RuntimeError
=&gt;
e
# обрабатываем конкретный тип ошибок
puts
e
# напечатаем сообщение об ошибке
rescue
# можно писать rescue =&gt; e, чтобы получить объект исключения
# обрабатываем все исключения
else
# сработает, если исключений не было
ensure
# сработает в любом случае
end
Реализация
[
править
|
править код
]
Для Ruby существуют несколько реализаций: официальный
интерпретатор
, написанный на
Си
,
JRuby
&#160;— реализация для
Java
, интерпретатор для платформы
.NET
IronRuby
,
Rubinius
&#160;— написанная в основном на Ruby и базирующаяся на идеях
Smalltalk
-80 VM
&#91;17&#93;
, MagLev&#160;— другая базирующаяся на Smalltalk разработка от компании Gemstone
&#91;18&#93;
,
Blue Ruby
&#160;— реализация Ruby для виртуальной машины
ABAP
&#91;19&#93;
,
MacRuby
&#160;— реализация для
Mac OS
с фокусом на максимальную интеграцию с возможностями операционной системы
&#91;20&#93;
,
mruby
&#160;— реализация для встраивания в программы
&#91;21&#93;
.
Официальный интерпретатор портирован под большинство платформ, включая
Unix
,
Microsoft Windows
(в том числе
Windows CE
),
DOS
,
Mac OS X
,
OS/2
,
Amiga
,
BeOS
,
Syllable
,
Acorn RISC OS
и другие. Для Windows существует специализированный установщик RubyInstaller и есть возможность запуска под
Cygwin
для большей совместимости с
Unix
&#91;22&#93;
.
Интерактивный Ruby
[
править
|
править код
]
С официальной версией интерпретатора Ruby поставляется командная оболочка Ruby (
Interactive Ruby Shell
). Запускаемая командой
irb
в окне терминала (
интерфейсе командной строки
), она позволяет
тестировать
код программы очень быстро (построчно):
$ irb
 irb(main):001:0&gt; "Hello, World"
 =&gt; "Hello, World"
 irb(main):002:0&gt; 2 ** 256             # ** - оператор возведения в степень
 =&gt; 115792089237316195423570985008687907853269984665640564039457584007913129639936
Программа
irb
выводит результат каждой строки после символов
=&gt;
. В приведённых выше примерах для наглядности применяется аннотирование&#160;— результаты строк программы записываются в комментариях после
=&gt;
.
Имитацию
irb
можно запустить непосредственно в
браузере
.
В поставке дистрибутива One-Click Installer для Windows, начиная с версии 1.8.2-15, поставляется утилита
fxri
, которая включает в себя справочную систему (
ri
) и интерактивный интерпретатор (
irb
).
Поддержка интегрированных сред разработки
[
править
|
править код
]
Базовые возможности редактирования добавляются ко многим
редакторам
(
Emacs
,
Bred
,
vim
,
jEdit
,
nano
,
SciTE
,
Kate
и др.), здесь перечислены только
IDE
, предоставляющие обширный набор функций.
Название
Лицензия
Платформы
Ссылка
ActiveState Komodo IDE
Проприетарная
Linux, Mac OS X, Solaris, Windows
[1]
Arachno Ruby IDE
Проприетарная
Win 2000/XP, Linux
[2]
Aptana
(
RadRails
+
RDT
)
GPL
, APL +
CPL
Java
[3]
EasyEclipse for Ruby and Rails
Win 2000/XP, Linux, Mac OS X
[4]
Eclipse
+
RDT
EPL
+
CPL
Java
[5]
Embarcadero
TurboRuby
Проприетарная
Windows, OS X, Linux
[6]
FreeRIDE
Ruby License
Windows, OS X, POSIX
[7]
IntelliJ IDEA
+ Ruby plugin
Проприетарная
(на
IDEA
),
Apache 2.0
(на сам plugin)
Java,
JRuby
Ruby plugin
KDevelop
GNU GPL
Linux
[8]
Komodo Edit
Проприетарная
Windows, Mac, Linux
[9]
Mondrian Ruby IDE
разработка прекращена, доступна старая версия
MIT
Ruby (+
FOX toolkit
)
[10]
NetBeans IDE
(версия 6.9.1 и более ранние)
CDDL
Java
[11]
RDE
Ruby License
Windows
[12]
Ruby in steel
Проприетарная
Visual Studio 2005
[13]
RubyMine
Проприетарная
(на базе
IDEA
)
Java
[14]
Visual Studio
(реализация
IronRuby
)
Проприетарная
Windows
[15]
Xcode
3.1
Проприетарная
Mac OS X
10.5
[16]
Библиотеки
[
править
|
править код
]
Стандартная библиотека
[
править
|
править код
]
Кроме мощных возможностей, встроенных в язык, Ruby поставляется с большой стандартной
библиотекой
.
Это, прежде всего, библиотеки для работы с различными
сетевыми протоколами
на стороне
сервера
и
клиента
, средства для работы с различными форматами представления данных (
XML
,
XSLT
,
YAML
,
PDF
,
RSS
,
CSV
,
WSDL
).
Кроме встроенных в язык средств отладки, с Ruby поставляются библиотеки для
модульного тестирования
, журналирования,
профилирования
. Также есть библиотеки для работы с
архивами
, датами,
кодировками
,
матрицами
, средства для системного администрирования, распределённых вычислений, поддержки многопоточности и&#160;т.&#160;д.
Основные встроенные классы Ruby
Название
Описание
Версия
&#91;23&#93;
Object
Вершина иерархии классов Ruby.
1.0
Array
Динамический массив для хранения произвольных объектов, индексируемый с 0.
1.0
Binding
Объекты сохраняют контекст выполнения некоторого участка кода (значение переменных, методов и&#160;т.&#160;д.). Может позже использоваться для выполнения вычислений в этом контексте.
1.2
Continuation
Объект сохраняет адрес возврата и контекст выполнения, позволяя выполнить переход в точку создания из любого места программы (т.&#160;н. нелокальный переход).
1.4
Data
Обёртка вокруг
указателя
Си
, используется в основном при написании расширений.
1.0
Dir
Представление каталогов файловой системы. Предоставляет возможности для просмотра каталогов и их атрибутов.
1.0
Exception
Базовый класс всех исключений (образует вершину иерархии более чем 30 исключений).
1.0
FalseClass
Глобальная переменная
false
является единственным экземпляром этого класса и представляет логическую ложь в булевских выражениях.
1.0
Hash
Коллекция пар ключ-значение; порядок обхода не зависит от порядка вставки.
1.0
IO
Базовые возможности ввода-вывода.
1.0
File
Класс для доступа к файлам.
1.0
MatchData
(до 1.6
MatchingData
)
Результат применения регулярного выражения. Обычно используется не напрямую, а через специальные переменные
$&amp;
,
$'
,
$`
,
$1
,
$2
и&#160;т.&#160;д.
1.0
Method
Метод, ассоциированный с конкретным объектом (не с классом). Может использоваться для вызова этого метода без наличия объекта.
1.2
Module
Класс модулей.
1.0
Class
Класс классов; классы в Ruby являются объектами, а Class является классом этих объектов (метаклассом).
1.0
NilClass
Единственным экземпляром класса является переменная
nil
. Только
nil
и
false
представляют ложь в программах. Любой другой объект представляет собой истину.
1.0
Numeric
Абстрактный класс чисел.
1.0
Integer
Абстрактный класс целых чисел. Может трактоваться как бесконечная битовая строка для битовых операций.
1.0
Bignum
Целые числа, ограниченные только количеством памяти. Конвертируется в
Fixnum
автоматически, если значение может быть размещено в них, и наоборот. (До версии 2.4)
1.0
Fixnum
Целые числа, которые могут быть размещены в машинном слове (32 бита для большинства машин). Если результат операции выходит за рамки, автоматически преобразуется в
Bignum
. (До версии 2.4)
1.0
Float
Числа с плавающей запятой.
1.0
Proc
Блок кода
со связанным с ним контекстом (
замыкание
), который может выполняться неоднократно в других контекстах.
1.0
Range
Интервал: множество значений, заданных с начальным и конечным элементами.
1.0
Regexp
Регулярное выражение.
1.0
String
Строка байт произвольной длины.
1.0
Struct
Предоставляет простой способ связывания атрибутов вместе без написания кода класса напрямую; генерирует специальные классы, содержащие множество переменных и методов доступа.
1.0
Symbol
Представляет имя и создаётся при использовании синтаксиса
:name
. Все объекты с данным именем, созданные в программе,&#160;— ссылки на один объект.
1.6
Thread
Инкапсулирует информацию о потоке, включая основной поток скрипта Ruby.
1.0
ThreadGroup
Предоставляет способ управления группой потоков. Поток может принадлежать только к одной
ThreadGroup
. Добавление потока к новой группе удаляет его из любой предыдущей.
1.6
Time
Дата и время.
1.0
TrueClass
Глобальная переменная
true
является единственной переменной класса и представляет логическую истину в булевских выражениях.
1.0
UnboundMethod
Метод, не связанный с конкретным объектом. Может привязываться к объекту и вызываться как
Method
.
1.6
Расширения
[
править
|
править код
]
В языке Ruby осуществлён простой и удобный механизм для расширения языка с помощью библиотек, написанных на
Си
, позволяющий легко разрабатывать дополнительные библиотеки
&#91;24&#93;
&#91;25&#93;
.
Для унифицированного доступа к
базам данных
разработана библиотека
Ruby DBI
(поддерживает
SQLite
,
Oracle Database
,
ODBC
,
MySQL
,
DB2
,
MS SQL
,
InterBase
,
ADO
и др.). Также существуют библиотеки для конкретных баз данных, поддерживающих специфические для них операции. Для реализации
ORM
существуют несколько библиотек, такие, как ActiveRecord, Mongoid, DataMapper или Sequel.
Среди графических библиотек&#160;— FxRuby&#160;(интерфейс к графической библиотеке
FOX
), графический пакет разработчика wxRuby (интерфейс к кроссплатформенному пакету
wxWidgets
на
C++
), QtRuby/Korundum (привязка к
Qt
и
KDE
соответственно), графические библиотеки для работы с
Tk
&#91;26&#93;
и
Gtk
.
Также реализована библиотека для работы с
OpenGL
, позволяющая программировать
трёхмерную графику
.
Win32utils&#160;— позволяет обращаться к специфическим возможностям
Win32 API
.
Rmagick&#160;— библиотека для работы с изображениями, поддерживающая более 90 форматов (основана на
ImageMagick
и
GraphicsMagick
).
Библиотека Ruport (Ruby reports) предназначена для лёгкой реализации отчётов и создания диаграмм на основе данных из БД или прямо из текстовых файлов
CSV
. Причём результаты можно сохранять в форматах
PDF
,
HTML
, CSV и TXT.
RuTils&#160;— обработчик русского текста на Ruby. Позволяет реализовать сумму прописью и выбор числительного. Например, 231.propisju(2) =&gt; «двести тридцать одна» или 341.propisju_items(1, «чемодан», «чемодана», «чемоданов») =&gt; «триста сорок один чемодан». А также перевод в
транслит
и работу с датами.
Для управления библиотеками и программами Ruby в виде самодостаточных пакетов предназначена система управления пакетами
RubyGems
(
англ.
&#160;
gems, gem
&#160;— драгоценный камень).
Существует всемирный
репозиторий
программного обеспечения Ruby
RAA
(Ruby Application Archive).
Репозиторий по состоянию на сентябрь
2007 года
насчитывает более полутора тысяч проектов.
Большое количество программного обеспечения, написанного на Ruby, пользуются
хостингом
проекта
RubyForge
,
созданного специально с этой целью. 15 мая 2014&#160;года RubyForge закрыт, архив программ при этом останется доступен для скачивания.
FreeRIDE&#160;—
IDE
для Ruby, реализованная с использованием библиотеки FxRuby.
Большинство расширений распространяются под свободными лицензиями (
LGPL
, лицензия Ruby) и могут быть использованы в любом проекте практически без ограничений.
Документация
[
править
|
править код
]
Система
RDoc
предназначена для
автоматического извлечения
документации
из
исходных кодов
и программ на Ruby
и её дальнейшей обработки.
Является стандартом де-факто для подготовки документации по программному обеспечению, написанному на Ruby.
Для доступа к документации Ruby из
командной строки Unix
разработана программа
ri
.
С её помощью можно получить информацию о модулях, классах и методах Ruby.
Использование
[
править
|
править код
]
Ruby используется в
NASA
,
NOAA
(национальная администрация по океану и атмосфере),
Motorola
и других крупных организациях
&#91;27&#93;
. Следующие программы используют Ruby как скриптовый язык для расширения возможностей программы или написаны на нём (частично или полностью).
RPG Maker
(
RPG Maker XP
)&#160;— RGSS (Ruby Game Scripting System)
Amarok
SketchUp
Inkscape
&#160;— скрипты для обработки векторных изображений
Metasploit
Chef
,
Puppet
&#160;— системы управления конфигурациями
Redmine
&#160;— багтрекер
XChat
Для
KOffice
разрабатывается проект
Kross
&#160;— механизм для поддержки скриптов, который включает Ruby.
WATIR
(
англ.
&#160;
Web Application Testing in Ruby
)&#160;—
свободное
средство для автоматического тестирования веб-приложений в
браузере
.
Toptal используется Ruby, чтобы создать архитектуру microservices
&#91;28&#93;
Vagrant
Travis CI
Github
Разработка мобильных приложений
[
править
|
править код
]
Titanium Studio&#160;— среда разработки мобильных приложений на HTML5, CSS3, Javascript, Ruby, Rails, Python, PHP
Ruboto&#160;— среда разработки Android приложений на Ruby
RubyMotion&#160;— среда разработки iOS приложений на Ruby
MobiRuby&#160;— инструмент разработки Android и iOS приложений на Ruby
Rhodes
&#160;
(англ.)
русск.
&#160;— фреймворк для разработки Enteprise Mobility приложений для смартфонов и устройств Motorola
&#91;29&#93;
См. также
[
править
|
править код
]
Портал
«
Свободное программное обеспечение
»
Ruby
в Викиучебнике
Ruby
в Викитеке
Ruby
на Викискладе
Ruby
в Викиновостях
Interactive Ruby Shell
Ruby on Rails
&#160;—
фреймворк
для создания веб-приложений
RubyGems
&#160;—
менеджер пакетов
для Ruby
IronRuby
&#160;— реализация языка программирования Ruby на платформе Microsoft .NET
Сравнение языков программирования
Примечания
[
править
|
править код
]
↑
1
2
О
Ruby
.
↑
Расширения файлов
Ruby
:
.rb
&#160;— исходный код.
.rbw
&#160;— исходный код для выполнения программ с графическим интерфейсом в Windows, файлы с таким расширением будут выполнены интерпретатором
rubyw
без запуска консоли.
↑
Ruby 2.6.0 Released
&#160;
(неопр.)
.&#32; www.ruby-lang.org.&#32;
Проверено 26 декабря 2018.
↑
Ruby 2.6.0-preview3 Released
&#160;
(неопр.)
.&#32; www.ruby-lang.org.&#32;
Проверено 9 ноября 2018.
↑
https://www.ruby-lang.org/en/about/license.txt
↑
1
2
Лицензия Ruby
&#160;
(англ.)
&#32;(TXT).&#32;
Проверено 14 августа 2006.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
Перевод лицензии Ruby
в
Викитеке
.
↑
COPYING.txt на официальном сайте
Ruby
.
↑
Е. А. Роганов, Н. А. Роганова.
&#32;
Программирование на языке Ruby. Учебное пособие
(PDF, 425 Кбайт).&#160;—
М.
:
МГИУ
, 2008.&#160;— 56&#160;с.&#160;—
ISBN 978-5-2760-1495-1
.
↑
Брюс Тэйт
Практическое использование Rails: Часть 4. Стратегии тестирования в Ruby on Rails.
01.07.2008.
↑
Письмо Юкихиро Мацумото в рассылку ruby-talk
ruby-talk:00382
от 4 июня 1999 года. Есть
перевод всего письма на русский
↑
Ruby 2.1.1 is released
↑
Информация взята из сопроводительных текстовых файлов Changelog. Документы различных версий различаются между собой, порой учитывая лишь версии, относящиеся к линейке, сопровождаемой данным документом.
↑
Ruby 2.5.0 Released
&#160;
(неопр.)
.&#32;
www.ruby-lang.org
&#32;(25 Декабря 2017).
↑
Интервью Юкихиро Мацумото
&#160;
(англ.)
↑
Хэл Фултон.
&#32;Программирование на языке Ruby.&#160;— 2-е изд.&#160;—
М.
: ДМК Пресс, 2007.&#160;— С.&#160;24—27.
↑
5 things I hate about Ruby
&#160;
(англ.)
&#32;(25 октября 2005).&#32;
Проверено 30 июля 2007.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Rubinius Home
↑
MagLev /măg-lĕv/
↑
Blue Ruby&#160;— New Exploratory Research
↑
MacRuby
↑
mruby github repository
↑
Cygwin and Ruby Windows
↑
Из-за слабой документированности Ruby в ранних версиях информация получена напрямую из исходников (
helium.ruby-lang.org/ftp://ruby
&#160;
(англ.)
&#160;
(недоступная ссылка&#160;—
история
)
.&#32;
Проверено 16 августа 2006.
). Указаны только стабильные (чётные) версии.
↑
Thomas, Dave.
&#32;
Extending Ruby
&#160;
(англ.)
&#160;
(недоступная ссылка)
.&#32;
Programming Ruby&#160;— The Pragmatic Programmer’s Guide
.&#32; Addison Wesley Longman, Inc.&#32;
Проверено 30 октября 2006.
&#32;
Архивировано
19&#160;марта 2006&#160;года.
↑
Rooney, Garrett.
&#32;
Extending Ruby with C
&#160;
(англ.)
.&#32; O’Reilly Media&#32;(
18 ноября
2004
).&#32;
Проверено 30 октября 2006.
&#32;
Архивировано
22&#160;августа 2011&#160;года.
↑
Ruby/Tk Tutorial
↑
Хэл Фултон.
&#32;Программирование на языке Ruby.&#160;— 2-е изд.&#160;—
М.
: ДМК Пресс, 2007.&#160;— С.&#160;21.
↑
How to Set up a Microservices Architecture in Ruby: A Step by Step Guide
,
Toptal
&#160;(March 2, 2017).
↑
Rhodes на сайте Motorola
Литература
[
править
|
править код
]
На русском языке
Д. Флэнаган,
Ю. Мацумото
.
&#32;Язык программирования Ruby&#32;&#61;&#32;The Ruby Programming Language&#32;&#47;&#32;пер. с англ. Н. Вильчинский.&#160;— 1-е изд.&#160;—
СПб.
:
Питер
, 2011.&#160;— 496&#160;с.&#160;— (Бестселлеры
O’Reilly
).&#160;—
ISBN 978-5-459-00562-2
.
Х. Фултон.
&#32;Программирование на языке Ruby&#32;&#61;&#32;The Ruby Way&#32;&#47;&#32;пер. с англ. А. Слинкин.&#160;— 2-е изд.&#160;—
М.
: ДМК Пресс, 2007.&#160;— 688&#160;с.&#160;— (Языки программирования).&#160;—
ISBN 5-94074-357-9
.
М. Фитцджеральд.
&#32;Изучаем Ruby&#32;&#61;&#32;Learning Ruby&#32;&#47;&#32;пер. с англ. Н. Гаврилова.&#160;— 1-е изд.&#160;—
СПб.
:
БХВ-Петербург
, 2008.&#160;— 336&#160;с.&#160;—
ISBN 978-5-9775-0225-2
.
Д. Х. Спольски.
&#32;Лучшие примеры разработки ПО&#32;&#61;&#32;The Best Software Writing&#32;&#47;&#32;пер. с англ. Е. Матвеев.&#160;—
СПб.
:
Питер
, 2007.&#160;— 208&#160;с.&#160;— (Библиотека программиста).&#160;—
ISBN 5-469-01291-3
.
В электронном формате:
Ю. Мацумото
Ruby&#160;— Руководство пользователя
=
Ruby User’s Guide
/ пер. на русский Александр Мячков на
OpenNET
&#160;— 2005—2008.
К. Пайн
Учись программировать
=
Learn to Program
/ пер. на русский Михаил Шохирев&#160;— 2003—2009.
Е. Охотников
Ruby&#160;— новые грани.
Из журнала
RSDN
Magazine №&#160;4/2006.
Е. А. Роганов, Н. А. Роганова.
&#32;Программирование на языке Ruby. Учебное пособие (
PDF, 425 Кбайт
,
источник
).&#160;—
М.
:
МГИУ
, 2008.&#160;— 56&#160;с.&#160;—
ISBN 978-5-2760-1495-1
.
Образовательный ресурс, посвящённый
Ruby
, на сайте
МФТИ
.
На английском языке
David Thomas, Chad Fowler, Andrew Hunt.
&#32;Programming Ruby: The Pragmatic Programmer’s Guide, Second Edition.&#160;— Boston: Addison-Wesley, 2004.&#160;— 864&#160;с.&#160;—
ISBN 978-0-9745-1405-5
.
Dave Thomas, Chad Fowler, Andy Hunt.
&#32;Programming Ruby 1.9: The Pragmatic Programmers’ Guide.&#160;— Dallas: Pragmatic Bookshelf, 2009.&#160;— 944&#160;с.&#160;—
ISBN 978-1-93435-608-1
.
Yukihiro Matsumoto
.
&#32;Ruby in a Nutshell.&#160;— Sebastopol, CA:
O’Reilly
, 2001.&#160;— 224&#160;с.&#160;—
ISBN 978-0-596-00214-5
.
Peter Cooper.
&#32;Beginning Ruby.&#160;— 3-изд.&#160;—
Нью-Йорк
:
Apress
, 2016.&#160;— 476&#160;с.&#160;—
ISBN 978-1484212790
.&#160;—
ISBN 1484212797
.
Malay Mandal.
&#32;Ruby Recipes: A Problem-Solution Approach.&#160;— 1-е изд.&#160;—
Apress
, 2016.&#160;— 226&#160;с.&#160;—
ISBN 978-1484224687
.&#160;—
ISBN 148422468X
.
Leonard Richardson, Lucas Carlson.
&#32;Ruby Cookbook: Recipes for Object-Oriented Scripting.&#160;— 2-е изд.&#160;— Sebastopol, CA:
O’Reilly_Media
, 2015.&#160;— 992&#160;с.&#160;—
ISBN 978-1449373719
.&#160;—
ISBN 1449373712
.
В электронном формате:
Programming Ruby. The Pragmatic Programmer’s Guide
&#160;— часто упоминаемая книга по Ruby, охватывающая основные стороны программирования на этом языке.
The Little Book Of Ruby. 2006—2008 (PDF).
Ссылки
[
править
|
править код
]
Официальный сайт
Ruby
.
&#160;
(англ.)
Репозиторий пакетов .gem
для менеджера пакетов
RubyGems
.
Ruby
в каталоге ссылок
Open Directory Project
(dmoz)
Ruby
IDE
ActiveState Komodo
Eric
RubyForge
RadRails
RubyMine
Реализации
Ruby MRI
YARV
JRuby
IronRuby
Rubinius
XRuby
MacRuby
RubyJS
HotRuby
Приложения
RubyGems
Rake
Interactive Ruby Shell
Capistrano
Hackety Hack
Библиотеки
и
фреймворки
Adhearsion
Camping
eRuby (RHTML)
Hanami
Hobo
Merb
Nitro
RubyCocoa
Ruby on Rails
Ramaze
Sinatra
Padrino
QtRuby
Серверное ПО
Mongrel
Phusion Passenger (mod_rails/mod_rack)
WEBrick
mod_ruby
Прочее
Application Archives
Document format
Book Guides
Ruby Central
RubyKaigi
Категория
Языки программирования
Хронология
Ассемблер
BASIC
C
C++
C#
COBOL
Fortran
Go
Java
JavaScript
(JS)
Lisp
Lua
Pascal
Perl
PHP
Python
Ruby
Smalltalk
Visual Basic .NET
(VB.NET)
Категория
Сравнение
Списки:
хронологический
по категориям
Источник —
https://ru.wikipedia.org/w/index.php?title=Ruby&amp;oldid=97563861
Категории
:
Языки программирования по алфавиту
Языки программирования, появившиеся в 1995 году
Ruby
Языки веб-программирования
Скриптовые языки
Объектно-ориентированные языки программирования
Языки с динамической типизацией
Свободные компиляторы и интерпретаторы
Высокоуровневые языки программирования
Скрытые категории:
Википедия:Статьи с некорректным использованием шаблонов:Cite web (не указан язык)
Страницы, использующие волшебные ссылки ISBN
Википедия:Статьи с переопределением значения из Викиданных
ПРО:ИТ:Статьи по алфавиту
ПРО:ИТ:Последняя правка: в текущем году
Статьи со ссылками на Викиучебник
Статьи со ссылками на Викиновости
Википедия:Ссылка на Викитеку непосредственно в статье
Википедия:Ссылка на Викиучебник непосредственно в статье
Навигация
Персональные инструменты
Вы не представились системе
Обсуждение
Вклад
Создать учётную запись
Войти
Пространства имён
Статья
Обсуждение
Варианты
Просмотры
Читать
Текущая версия
Править
Править код
История
Ещё
Поиск
Навигация
Заглавная страница
Рубрикация
Указатель А — Я
Избранные статьи
Случайная статья
Текущие события
Участие
Сообщить об ошибке
Сообщество
Форум
Свежие правки
Новые страницы
Справка
Пожертвовать
Инструменты
Ссылки сюда
Связанные правки
Служебные страницы
Постоянная ссылка
Сведения о странице
Элемент Викиданных
Цитировать страницу
Печать/экспорт
Создать книгу
Скачать как PDF
Версия для печати
В других проектах
Викисклад
Викиучебник
Викиновости
На других языках
Aragonés
العربية
Asturianu
Azərbaycanca
تۆرکجه
Žemaitėška
Беларуская
Български
বাংলা
Bosanski
Català
کوردی
Čeština
Dansk
Deutsch
Ελληνικά
English
Esperanto
Español
Eesti
Euskara
فارسی
Suomi
Français
Galego
עברית
Hrvatski
Magyar
Հայերեն
Interlingua
Bahasa Indonesia
Italiano
日本語
ქართული
한국어
Кыргызча
Lumbaart
Lietuvių
Latviešu
മലയാളം
मराठी
Bahasa Melayu
မြန်မာဘာသာ
Nederlands
Norsk nynorsk
Norsk
ଓଡ଼ିଆ
ਪੰਜਾਬੀ
Polski
Português
Română
Scots
Srpskohrvatski / српскохрватски
Simple English
Slovenčina
Shqip
Српски / srpski
Svenska
தமிழ்
తెలుగు
Тоҷикӣ
ไทย
Türkçe
Татарча/tatarça
Українська
اردو
Tiếng Việt
吴语
中文
粵語
Править ссылки
Эта страница в последний раз была отредактирована 18 января 2019 в 13:44.
Текст доступен по
лицензии Creative Commons Attribution-ShareAlike
; в отдельных случаях могут действовать дополнительные условия.
Подробнее см.
Условия использования
.
Wikipedia® — зарегистрированный товарный знак некоммерческой организации
Wikimedia Foundation, Inc.
Политика конфиденциальности
Описание Википедии
Отказ от ответственности
Свяжитесь с нами
Разработчики
Соглашение о cookie
Мобильная версия
