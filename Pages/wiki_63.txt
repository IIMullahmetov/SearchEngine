PHP — Википедия
PHP
Материал из Википедии — свободной энциклопедии
Перейти к навигации
Перейти к поиску
У этого термина существуют и другие значения, см.
PHP (значения)
.
PHP
Семантика
мультипарадигменный
Класс языка
сценарный язык
&#91;6&#93;
,&#32;
процедурный язык программирования
[d&#x5d;
,&#32;
объектно-ориентированный язык программирования
,&#32;
мультипарадигмальный язык программирования
,&#32;
императивный язык программирования
[d&#x5d;
,&#32;
интерпретируемый язык программирования
,&#32;
транслятор
&#32;и&#32;
язык программирования
Тип исполнения
интерпретатор компилирующего типа
&#91;1&#93;
&#91;2&#93;
Появился в
1995
&#91;3&#93;
Автор
Расмус Лердорф
Разработчик
Лердорф, Расмус
&#91;4&#93;
,&#32;
Гутманс, Энди
&#91;4&#93;
,&#32;
PHP Group
[d]
,&#32;
Zend Technologies
&#91;5&#93;
&#32;и&#32;
Сураски, Зеев
Расширение
файлов
.php
,&#32;
.phtml
,&#32;
.php4
,&#32;
.php3
,&#32;
.php5
,&#32;
.phps
или
.phar
Выпуск
PHP 5: 5.6.38 (13 сентября 2018), PHP 7: 7.3.0 (6 декабря 2018)
Система типов
слабая
динамическая
Испытал влияние
Perl
,
C
,
C++
,
Java
,
Tcl
&#91;3&#93;
Лицензия
PHP License
&#91;7&#93;
ОС
кроссплатформенность
Сайт
php.net
PHP
(
/pi:.eɪtʃ.pi:/
англ.
&#160;
PHP: Hypertext Preprocessor
&#160;— «PHP:
препроцессор
гипертекста
»; первоначально
Personal Home Page Tools
&#91;8&#93;
&#160;— «Инструменты для создания персональных веб-страниц»)&#160;—
скриптовый язык
&#91;9&#93;
общего назначения, интенсивно применяемый для разработки веб-приложений. В настоящее время поддерживается подавляющим большинством
хостинг-провайдеров
и является одним из лидеров среди языков, применяющихся для создания
динамических веб-сайтов
&#91;10&#93;
.
Язык и его интерпретатор (
Zend Engine
) разрабатываются группой энтузиастов в рамках проекта с
открытым кодом
&#91;11&#93;
. Проект распространяется под
собственной лицензией
, несовместимой с
GNU GPL
.
Содержание
1
Область применения
1.1
Создание GUI-приложений
2
История
2.1
PHP 7
3
Синтаксис
3.1
Типы данных
3.2
Обращение к переменным и функциям
3.3
Суперглобальные массивы
3.4
Объектно-ориентированное программирование
4
Фреймворки и системы управления содержимым
5
Особенности интерпретатора
5.1
Расширения
5.2
Параметры настройки
5.3
Режимы запуска интерпретатора (SAPI)
5.4
Пасхальные яйца
5.5
Альтернативные реализации
6
Лицензирование
7
Приложения PHP
7.1
Библиотека PEAR
7.2
Популярные веб-приложения
7.3
Вспомогательные каркасы
8
Интегрированные среды разработки для PHP
9
Критика
9.1
Отсутствие обратной совместимости между версиями языка
9.2
Отсутствие поддержки многобайтовых кодировок в ядре языка
9.3
Отсутствие поддержки многопоточности
10
См. также
11
Примечания
12
Литература
13
Ссылки
Область применения
[
править
|
править код
]
В области веб-программирования, в частности серверной части, PHP&#160;— один из популярных
сценарных языков
(наряду с
JSP
,
Perl
и языками, используемыми в
ASP.NET
).
Популярность в области построения
веб-сайтов
определяется наличием большого набора встроенных средств и дополнительных модулей для разработки веб-приложений
&#91;12&#93;
. Основные из них:
автоматическое извлечение
POST
и
GET
-параметров, а также переменных окружения веб-сервера в предопределённые массивы;
взаимодействие с большим количеством различных систем управления базами через дополнительные модули (
MySQL
,
MySQLi
,
SQLite
,
PostgreSQL
,
Oracle (OCI8
),
Oracle
,
Microsoft SQL Server
,
Sybase
,
ODBC
,
mSQL
,
IBM DB2
,
Cloudscape
и
Apache Derby
,
Informix
,
Ovrimos SQL
,
Lotus Notes
,
DB++
,
DBM
,
dBase
,
DBX
,
FrontBase
,
FilePro
,
Ingres II
,
SESAM
,
Firebird
/
InterBase
,
Paradox File Access
,
MaxDB
,
Интерфейс
PDO
),
Redis
;
автоматизированная отправка
HTTP-заголовков
;
работа с HTTP-авторизацией;
работа с
cookies
и сессиями;
работа с локальными и удалёнными файлами,
сокетами
;
обработка файлов, загружаемых на сервер;
работа с
XForms
.
В настоящее время PHP используется сотнями тысяч разработчиков. Согласно рейтингу корпорации TIOBE, базирующемся на данных поисковых систем, в мае 2016 года PHP находился на 6 месте среди языков программирования
&#91;10&#93;
. К крупнейшим сайтам, использующим PHP, относятся
Facebook
,
Wikipedia
и др.
Входит в
LAMP
&#160;— распространённый набор программного обеспечения для создания и
хостинга
веб-сайтов
(
Linux
,
Apache
,
MySQL
, PHP).
Создание GUI-приложений
[
править
|
править код
]
Скриншот редактора форм
WinBinder
Хотя PHP и не слишком распространён в данной области, его можно использовать и для создания
GUI
-приложений.
Для создания кроссплатформенных приложений служат пакеты
PHP-GTK
и
PHP-Qt
, представляющие собой обёртки для соответствующих популярных библиотек
виджетов
. Также существует среда разработки кроссплатформенных приложений Devel Next
&#91;13&#93;
.
Для создания графических приложений для
Windows
существуют свободные пакеты WinBinder (написан на Си, фактически&#160;— обёртка для
WinAPI
),
PQBuilder
(написан на PHP с использованием библиотеки
PHPQt5
), а также предшественник Devel Next&#160;— среда
быстрой разработки
Devel Studio
&#91;14&#93;
.
Кроме этого существует реализация PHP для
.NET
/
Mono
&#160;—
Phalanger
и для
JVM
&#160;—
JPHP
, результатом компиляции PHP-кода в Phalanger может быть любое .NET-приложение, в то же время JPHP поддерживает расширение
Swing
, почти полностью портированное из среды Java.
История
[
править
|
править код
]
Основная статья:
История PHP
В
1994 году
датский
программист
Расмус Лердорф
разработал на
C
&#91;15&#93;
набор
CGI-скриптов
для учёта посетителей его
онлайн
-
резюме
, обрабатывающий шаблоны
HTML
-документов. Лердорф назвал набор
Personal Home Page Tools
(Инструменты для
Личной Домашней Страницы
). Вскоре функциональности перестало хватать, и Лердорф разработал новый интерпретатор шаблонов
PHP/FI
(
англ.
&#160;
Personal Home Page / Forms Interpreter
&#160;— «персональная домашняя страница / интерпретатор форм»)
&#91;16&#93;
.
8 июня 1995 года, вышел Personal Home Page (PHP Tools) version 1.0&#160;— первый публичный релиз.
В
1997 году
после длительного
бета-тестирования
вышла вторая версия обработчика, написанного на
C
&#160;— PHP/FI 2.0. Её использовали около 1&#160;% (приблизительно 50 тысяч) всех
интернет-доменов
мира
&#91;8&#93;
.
Версия PHP 3.0 подверглась значительной переработке, определившей современный облик и стиль языка программирования. В
1997 году
два
израильских
программиста
,
Энди Гутманс
и
Зеев Сураски
, полностью переписали код интерпретатора. PHP 3.0 был официально выпущен в июне
1998 года
.
&#91;8&#93;
Одной из сильнейших сторон PHP 3.0 была возможность расширения ядра дополнительными модулями. Впоследствии интерфейс написания расширений привлёк к PHP множество сторонних разработчиков, работающих над своими модулями, что дало PHP возможность работать с огромным количеством
баз данных
,
протоколов
, поддерживать большое число
API
. Большое количество разработчиков привело к быстрому развитию языка и стремительному росту его популярности. С этой версии акроним php расшифровывается как «PHP: hypertext Preprocessor», вместо устаревшего «Personal Home Page».
К зиме
1998 года
, практически сразу после официального выхода PHP 3.0, Энди Гутманс и Зеев Сураски начали переработку ядра PHP. В задачи входило увеличение производительности сложных приложений и улучшение модульности базиса кода PHP. Новый движок, названный
Zend Engine
, успешно справлялся с поставленными задачами и впервые был представлен в середине
1999 года
. PHP 4.0, основанный на этом движке и принёсший с собой набор дополнительных функций, официально вышел в мае
2000 года
. В дополнение к улучшению производительности, PHP 4.0 имел ещё несколько ключевых нововведений, таких как поддержка сессий,
буферизация
вывода, более безопасные способы обработки вводимой пользователем информации и несколько новых языковых конструкций.
Пятая версия PHP была выпущена разработчиками
13 июля
2004 года
. Изменения включают обновление ядра Zend (Zend Engine 2), что существенно увеличило эффективность
интерпретатора
. Введена поддержка языка разметки
XML
. Полностью переработаны функции
ООП
, которые стали во многом схожи с моделью, используемой в
Java
. В частности, введён
деструктор
,
открытые, закрытые и защищённые члены и методы
, окончательные члены и методы,
интерфейсы
и клонирование объектов. В последующих версиях также были введены
пространства имён
,
замыкания
и целый ряд достаточно серьёзных изменений, количественно и качественно сравнимых с теми, которые появились при переходе на PHP 5.0.
Шестая версия PHP разрабатывалась
&#91;17&#93;
с
октября 2006
года. Было сделано
&#91;18&#93;
&#91;19&#93;
множество нововведений, как, например, исключение из ядра регулярных выражений
POSIX
и «длинных» суперглобальных массивов, удаление директив
safe_mode
,
magic_quotes_gpc
и
register_globals
из конфигурационного файла php.ini. Одним из основных новшеств должна была стать поддержка
Юникода
.
&#91;20&#93;
. Однако в
марте 2010
года разработка PHP6 была признана бесперспективной
&#91;21&#93;
из-за сложностей с поддержкой
Юникода
. Исходный код PHP6 перемещён на
ветвь
, а основной линией разработки стала версия 5.4.
PHP 7
[
править
|
править код
]
В 2014 году было проведено голосование, по результатам которого следующая версия получила название PHP 7
&#91;22&#93;
. Выход новой версии планировался в середине октября 2015 года
&#91;23&#93;
. В марте 2015 года
Zend
представили
инфографику
, в которой описаны основные нововведения PHP 7
&#91;24&#93;
.
3 декабря 2015 года было объявлено о выходе PHP версии 7.0.0.
&#91;25&#93;
Новая версия основывается на экспериментальной
ветви
PHP, которая изначально называлась
phpng
(
PHP Next Generation&#160;— следующее поколение
), и разрабатывалась с упором на увеличение производительности и уменьшение потребления памяти
&#91;26&#93;
. В новой версии добавлена возможность указывать тип возвращаемых из функции данных
&#91;27&#93;
, добавлен контроль передаваемых типов для данных
&#91;28&#93;
, а также новые операторы.
Синтаксис
[
править
|
править код
]
Имеется
викиучебник
по&#160;теме
«
PHP
»
Синтаксис PHP подобен синтаксису языка
Си
. Некоторые элементы, такие как
ассоциативные массивы
и цикл
foreach
, заимствованы из
Perl
.
Для написания простейшего скрипта не требуется описывать какие-либо переменные, используемые модули и&#160;т.&#160;п. Любой скрипт может начинаться непосредственно с оператора PHP.
Простейшая
программа Hello world
на PHP выглядит следующим образом:
&lt;?php
echo
&#39;Hello, world!&#39;
;
?&gt;
Также возможен более короткий вариант вывода строки:
&lt;?=
&#39;Hello, world!&#39;
?&gt;
Открывающий тег вида
&lt;?=
используется для сокращённой записи конструкций используемых для вывода строки.
PHP исполняет код, находящийся внутри ограничителей, таких как
&lt;?php&#160;?&gt;
. Всё, что находится вне ограничителей, выводится без изменений. В основном это используется для вставки PHP-кода в HTML-документ, например, так:
&lt;
html
&gt;
&lt;
head
&gt;
&lt;
title
&gt;
Тестируем PHP
&lt;/
title
&gt;
&lt;/
head
&gt;
&lt;
body
&gt;
&lt;?php
echo
&quot;Привет мир!&quot;
;
?&gt;
&lt;/
body
&gt;
&lt;/
html
&gt;
Помимо ограничителей
&lt;?php&#160;?&gt;
, допускается использование сокращённого варианта
&lt;?&#160;?&gt;
. Кроме того, до версии 7.0 допускалось использование ограничителей
языка программирования ASP
&lt;%&#160;%&gt;
и
&lt;script language="php"&gt; &lt;/script&gt;
. Работа сокращённых конструкций определяется в конфигурационном файле php.ini.
Имена переменных начинаются с символа
$
, тип переменной объявлять не нужно. Имена переменных и констант чувствительны к регистру символов. Имена классов, методов классов и функций к регистру символов не чувствительны. Переменные обрабатываются в
строках
, заключённых в двойные кавычки, и
heredoc
-строках (строках, созданных при помощи оператора &lt;&lt;&lt;). Переменные в строках, заключённых в одинарные кавычки, не обрабатываются.
PHP рассматривает переход на новую строку как пробел, так же как HTML и другие языки со свободным форматом. Инструкции разделяются с помощью
точки с запятой
(
;
), за исключением некоторых случаев, после объявления конструкции if/else и циклов.
Переменные в функцию можно передавать как по значению, так и по ссылке (используется знак
&amp;
).
PHP поддерживает три типа комментариев: в стиле языка
Си
(ограниченные
/*&#160;*/
),
C++
(начинающиеся с
//
и идущие до конца строки) и
оболочки UNIX
(с
#
до конца строки).
Типы данных
[
править
|
править код
]
PHP является языком программирования с
динамической типизацией
, не требующим указания типа при объявлении переменных, равно как и самого объявления переменных. Преобразования между скалярными типами зачастую осуществляются неявно без дополнительных усилий (впрочем, PHP предоставляет широкие возможности и для явного преобразования типов).
К скалярным типам данных относятся:
целочисленный тип
(integer)
число с плавающей точкой
(float, double)
логический тип
(boolean)
строковый тип
(string)
К нескалярным типам относятся:
массив
(array)
объект
(object)
внешний ресурс (resource)
неопределенное значение (null)
К псевдотипам
&#91;29&#93;
относятся:
mixed
любой тип
number
число (integer либо float)
callback
(string или
анонимная функция
)
void
отсутствие параметров
Диапазон целых чисел (integer) в PHP зависит от
платформы
(обычно, это диапазон 32-битных знаковых целых чисел, то есть, от −2 147 483 648 до 2 147 483 647). Числа можно задавать в десятичной,
восьмеричной
и
шестнадцатеричной
системах счисления. Диапазон вещественных чисел (double) также зависит от платформы (для 32-битной архитектуры диапазон позволяет оперировать числами от ±1.7×10
−308
до ±1.7×10
+308
).
PHP предоставляет разработчикам
логический тип
(boolean), способный принимать только два значения
TRUE
(«истина») и
FALSE
(«ложь»). При преобразовании в логический тип число 0, пустая строка, ноль в строке «0»,
NULL
и пустой массив считаются равными
FALSE
. Все остальные значения автоматически преобразуются в
TRUE
.
Специальный тип null предназначен для переменных без определённого значения. Единственным значением данного типа является константа
NULL
. Тип null принимают неинициализированные переменные, переменные инициализированные константой
NULL
, а также переменные, удалённые при помощи конструкции
unset()
.
Ссылки на внешние ресурсы имеют тип «ресурс» (resource). Переменные данного типа, как правило, представляют собой
дескриптор
, позволяющий управлять внешними объектами, такими как файлы, динамические изображения, результирующие таблицы базы данных и&#160;т.&#160;п.
Массивы
(array) поддерживают числовые и строковые ключи и являются
гетерогенными
. Массивы могут содержать значения любых типов, включая другие массивы. Порядок элементов и их ключей сохраняется. Не совсем корректно называть php-массивы массивами, на самом деле это, скорее всего, упорядоченный
хеш
. Возможно неожиданное поведение при использовании цикла
for
со счетчиком вместо
foreach
. Так, например, при сортировке массива с численными индексами функциями из стандартной библиотеки, сортируются и ключи тоже.
Указатель на функцию в PHP может быть представлен замыканием или псевдотипом
callback
. Замыкание доступно с версии 5.3 и в коде выглядит как простое определение функции, в которую можно явно пробросить значения из контекста, например:
function
(
$args
,
$argsN
)
use
(
$ctxVar
,
$ctxVar1
)
{
...
}
callback тип может быть представлен:
строкой (интерпретируется как название функции);
массивом где нулевой и первый элемент&#160;— строки (интерпретируется как название статической функции класса);
массивом где нулевой элемент&#160;— объект, а первый&#160;— строка (интерпретируется как метод у объекта).
Для проверки является ли значение вызываемым следует использовать
is_callable($var)
Обращение к переменным и функциям
[
править
|
править код
]
Обращение к переменным осуществляется с помощью символа
$
, за которым следует имя переменной. Данная конструкция может быть применена также для создания динамических переменных и функций.
&#91;30&#93;
Например:
$a
=
&#39;I am a&#39;
;
// Запись значения в переменную $a
echo
$a
;
// Вывод переменной $а
$b
=
&#39;a&#39;
;
echo
$$b
;
// Вывод переменной $а (дополнительный $ перед переменной $b)
echo
$
{
&#39;a&#39;
};
// Вывод переменной $a
function_name
();
// Вызов функции function_name
$c
=
&#39;function_name&#39;
;
$c
();
//Вызов функции function_name
$d
=
&#39;Class_name&#39;
;
$obj
=
new
Class_name
;
// Создание объекта класса Class_name
$obj
=
new
$d
();
// Создание объекта класса Class_name
$obj
-&gt;
b
;
// Обращение к свойству b объекта
$obj
-&gt;
c
();
// Вызов метода c() объекта
$obj
-&gt;
$b
;
// Обращение к свойству a объекта, так как $b = &#39;a&#39;
$obj
-&gt;
$c
();
// Вызов метода function_name() объекта, так как $c = &#39;function_name&#39;
В PHP
echo
и
print
не являются функциями
&#91;31&#93;
(хотя
print
имеет возвращаемое значение), а являются синтаксическими единицами. При их использовании можно опустить скобки.
Суперглобальные массивы
[
править
|
править код
]
Суперглобальными массивами (
англ.
&#160;
Superglobal arrays
) в PHP называются предопределённые массивы, имеющие глобальную область видимости без использования директивы
global
. Большая часть этих массивов содержит входные данные запроса пользователя (параметры
GET
-запроса, поля форм при посылке методом
POST
,
куки
и&#160;т.&#160;п.).
Все суперглобальные массивы, кроме
$GLOBALS
и
$_REQUEST
, имеют устаревшие аналоги с длинными именами, которые доступны вплоть до версии 5.3. х (начиная с 5.4.0 были удалены). Таким образом, обращения
$_GET['year']
и
$HTTP_GET_VARS['year']
идентичны (за исключением области видимости: массивы с «длинными» именами не являются суперглобальными).
$GLOBALS
Массив всех глобальных переменных (в том числе и пользовательских).
$_SERVER
(аналог для устаревшего&#160;—
$HTTP_SERVER_VARS
)
Содержит переменные окружения, которые операционная система передаёт серверу.
$_ENV
(уст.
$HTTP_ENV_VARS
)
Текущие
переменные среды
(
англ.
&#160;
Environment variables
). Их набор специфичен для платформы, на которой выполняется скрипт.
$_GET
(уст.
$HTTP_GET_VARS
)
Содержит параметры GET-запроса, переданные в URI после знака вопроса «
?
».
$_POST
(уст.
$HTTP_POST_VARS
)
Ассоциативный массив значений полей HTML-формы при отправке методом POST. Индексы элементов соответствуют значению свойства
name
объектов(кнопки, формы, радио-кнопки, флажки и&#160;т.&#160;д.) HTML-формы.
$_FILES
(уст.
$HTTP_POST_FILES
)
Ассоциативный массив со сведениями об отправленных методом POST файлах. Каждый элемент имеет индекс, идентичный значению атрибута «name» в форме, и, в свою очередь, также является массивом со следующими элементами:
['name']
&#160;— исходное имя файла на компьютере пользователя.
['type']
&#160;— указанный агентом пользователя
MIME
-тип файла. PHP не проверяет его, и поэтому нет никаких гарантий, что указанный тип соответствует действительности.
['size']
&#160;— размер файла в байтах.
['tmp_name']
&#160;— полный путь к файлу во временной папке. Файл необходимо переместить оттуда функцией
move_uploaded_file
. Загруженные файлы из временной папки PHP удаляет самостоятельно.
['error']
&#160;— код ошибки. Если файл удачно загрузился, то этот элемент будет равен 0 (
UPLOAD_ERR_OK
).
$_COOKIE
(уст.
$HTTP_COOKIE_VARS
)
Ассоциативный массив с переданными агентом пользователя значениями
куки
.
$_REQUEST
Содержит элементы из массивов
$_GET
,
$_POST
,
$_COOKIE
. С версии PHP 4.1 включает
$_FILES
.
$_SESSION
(уст.
$HTTP_SESSION_VARS
)
Содержит данные сессии.
Объектно-ориентированное программирование
[
править
|
править код
]
Ключевое слово
class
было зарезервировано ещё в третьей версии языка.
В четвёртой версии стало возможно создавать классы и объекты на их основе. Однако принципы ООП поддерживались лишь частично, так например, все члены (переменные и методы) были открыты. К тому же создание объектов было дорогой операцией и работали они медленно.
Начиная с пятой версии PHP обладает полной поддержкой
ООП
. Работа с классами была оптимизирована и теперь такой код работает достаточно быстро.
Класс
в PHP объявляется с помощью ключевого слова
class
. Методы и свойства класса могут быть общедоступными (
public
, по умолчанию), защищёнными (
protected
) и скрытыми (
private
). PHP поддерживает все три основных механизма ООП&#160;—
инкапсуляцию
,
полиморфизм подтипов
и
наследование
(родительский класс указывается с помощью ключевого слова
extends
после имени класса). Поддерживаются
интерфейсы
(ставятся в соответствие с помощью
implements
). Разрешается объявление
финальных
,
абстрактных методов
и классов.
Множественное наследование
классов не поддерживается, однако класс может реализовывать несколько интерфейсов. Для обращения к методам родительского класса используется ключевое слово
parent
.
Начиная с версии 5.4.0 множественное наследование может быть реализовано с помощью механизма
особенностей
(
англ.
&#160;
trait
). Особенности похожи на примеси (
англ.
&#160;
mixins
), за исключением того что для них нельзя напрямую создать экземпляр. Повторное использование кода заключено в использовании кода особенности в нескольких классах. Допускается использовать в одном классе несколько особенностей. Механизм особенностей имеет средства разрешения конфликтов имён. При запуске программы код особенности будет «вкомпилирован» в код содержащего его класса.
Классы в PHP имеют ряд «магических» методов (
англ.
&#160;
magic methods
), начинающихся с двух символов подчёркивания. Особо стоит отметить
конструктор
(
__construct()
, в версиях до 5.0 конструктором служил метод, одноимённый с классом) и
деструктор
(
__destruct()
), а также методы чтения (
__get()
) и записи (
__set()
), свёртывания (
__sleep()
) и развёртывания (
__wakeup()
), клонирования (
__clone()
) и др. Эти методы являются достаточно гибким инструментом: переопределяя их, можно добиться существенного изменения поведения объекта.
Все функции-члены реализованы виртуальными и потому все они являются методами.
Экземпляры класса создаются с помощью ключевого слова
new
, обращение к свойствам и методам объекта производится с использованием оператора
-&gt;
. Для доступа к членам класса из его методов используется переменная
$this
.
class
C1
extends
C2
implements
I1
,
I2
{
private
$a
;
protected
$b
;
function
__construct
(
$a
,
$b
)
{
parent
::
__construct
(
$a
,
$b
);
$this
-&gt;
a
=
$a
;
$this
-&gt;
b
=
$b
;
}
public
function
plus
()
{
return
$this
-&gt;
a
+
$this
-&gt;
b
;
}
/* ............... */
}
$d
=
new
C1
(
1
,
2
);
echo
$d
-&gt;
plus
();
// 3
Начиная с пятой версии PHP, объекты передаются по ссылке:
class
a
{
public
$color
=
&#39;red&#39;
;
}
$a
=
new
a
();
echo
$a
-&gt;
color
;
// red
$b
=
$a
;
$b
-&gt;
color
=
&#39;blue&#39;
;
echo
$a
-&gt;
color
;
// blue
«Paamayim Nekudotayim»
(
иврит
: פעמיים נקודתיים) или просто «двойное двоеточие». Используя эту
лексему
, программист может обращаться к константам, статическим или перегруженным свойствам или методам класса.
При обращении к этим элементам извне класса программист должен использовать имя этого класса.
«Paamayim Nekudotayim» на первый взгляд может показаться странным словосочетанием для обозначения двойного двоеточия. Однако во время создания Zend Engine версии 0.5 (который входил в PHP3), Andi и Zeev выбрали
&#91;32&#93;
именно это обозначение. «Paamayim Nekudotayim» действительно значит «двойное двоеточие» (дословно: «два раза двоеточие») на иврите. Это обозначение не менялось ни разу в течение всего времени разработки PHP
&#91;33&#93;
.
&lt;?php
class
MyClass
{
const
CONST_VALUE
=
&#39;Значение константы&#39;
;
}
// Использование :: вне объявления класса
echo
MyClass
::
CONST_VALUE
;
?&gt;
Фреймворки и системы управления содержимым
[
править
|
править код
]
Список примеров в этом разделе не основывается на
авторитетных источниках
, посвящённых непосредственно предмету статьи или её раздела.
Добавьте
ссылки на источники
, предметом рассмотрения которых является тема настоящей статьи (или раздела) в целом, а не отдельные элементы списка. В противном случае раздел может быть удалён.
Самые современные и наиболее популярные:
Phalcon
Symfony
Laravel
Kohana
Yii
Codeigniter
Zend Framework
CakePHP
FuelPHP
Drupal
WordPress
Joomla
MODX
Fat Free Framework
OpenCart
Magento
Особенности интерпретатора
[
править
|
править код
]
PHP-скрипты обычно обрабатываются
интерпретатором
в порядке
&#91;1&#93;
, обеспечивающем
кроссплатформенность
разработанного приложения:
лексический анализ
исходного кода
и генерация
лексем
,
синтаксический анализ
полученных лексем,
генерация
байт-кода
,
выполнение байт-кода интерпретатором (без создания
исполняемого файла
).
Для увеличения быстродействия приложений возможно использование специального
программного обеспечения
, так называемых
акселераторов
. Принцип их работы заключается в
кэшировании
однажды сгенерированного байт-кода в
памяти
и/или на
диске
, таким образом, из процесса работы приложения исключаются этапы 1—3, что в общем случае ведёт к значительному ускорению работы.
Важной особенностью является то, что разработчику нет необходимости заботиться о распределении и
освобождении
памяти. Ядро PHP реализует средства для автоматического управления памятью; вся выделенная память возвращается системе после завершения работы скрипта
&#91;34&#93;
.
Расширения
[
править
|
править код
]
Интерпретатор состоит из
ядра
и подключаемых
модулей
,
«расширений»
, представляющих собой динамические
библиотеки
. Расширения позволяют дополнить базовые возможности языка, предоставляя возможности для работы с
базами данных
,
сокетами
, динамической
графикой
,
криптографическими
библиотеками, документами формата
PDF
и тому подобным. Любой желающий может разработать своё собственное расширение и подключить его. Существует огромное количество расширений, как стандартных, так и созданных сторонними компаниями и энтузиастами, однако в стандартную поставку входит лишь несколько десятков хорошо зарекомендовавших себя. Множество расширений доступно в репозитории
PECL
.
Параметры настройки
[
править
|
править код
]
Интерпретатор PHP имеет специальный
конфигурационный файл
&#160;—
php.ini
, содержащий множество настроек, изменение которых влияет на поведение интерпретатора
&#91;35&#93;
. Имеется возможность отключить использование ряда функций, изменить ограничения на используемую скриптом оперативную память, время выполнения, объём загружаемых файлов, настроить журналирование ошибок, работу с сессиями и почтовыми сервисами, подключить дополнительные расширения, а также многое другое. Возможно дробление большого конфигурационного файла на части. Например, широко распространена практика вынесения настроек расширений в отдельные файлы. Параметры интерпретатора могут быть переопределены в файлах конфигурации
HTTP-сервера
(например,
.htaccess
в
Apache
) или в самом скрипте во время выполнения при помощи команды
ini_set
&#91;36&#93;
.
Режимы запуска интерпретатора (SAPI)
[
править
|
править код
]
SAPI&#160;— это внешний
уровень абстракции
, предназначенный для встраивания интерпретатора в другие приложения и отвечает за его работу (запуск, остановка, передача скриптов на исполнение, доступ к внешним данным). Существует несколько основных SAPI определяющих способы запуска и использования PHP:
В качестве модуля к
веб-серверу
(например, для
Apache
модуль
mod_php
). В этом случае интерпретатор PHP выполняется в
окружении
процесса
веб-сервера. Веб-сервер управляет количеством запущенных процессов PHP и сообщает им какие скрипты требуется исполнить.
CGI
SAPI. Использование CGI подразумевает запуск нового процесса для обработки каждого запроса. Для исполнения PHP скрипта веб-сервер запускает
./php-cgi /path/to/script.php
. Сам принцип такого использования подразумевает, что интерпретатор PHP исполняет только один скрипт, после чего заканчивает свою работу. Затраты на запуск процесса интерпретатора и его инициализацию очень часто сопоставимы или даже превышают затраты на исполнение PHP скрипта. Для решения этой проблемы в CGI SAPI был введён режим FastCGI. В этом режиме PHP интерпретатор запускается как независимый сервер, обрабатывающий входящие запросы на исполнение PHP скриптов по протоколу FastCGI, что позволяет ему работать с любым веб-сервером поддерживающим этот протокол.
FPM SAPI, известный как php-fpm&#160;— это другая реализация протокола FastCGI. Создан изначально Андреем Нигматулиным как отдельный патч для использования в социальной сети Badoo. Данная реализация решала ряд проблем, которые мешали использованию CGI/FastCGI SAPI. В частности, появилась возможность перезапуска пула интерпретаторов PHP без потери запросов, запуск нескольких пулов под разными пользователями, аварийный перезапуск интерпретаторов в случае проблем с ними и ещё несколько приятных дополнений. В дальнейшем над патчем работали несколько человек, был добавлен режим динамического управления числом запущенных процессов PHP (по принципу управления числом процессов в веб-сервере Apache), и начиная с версии PHP 5.3.3 php-fpm был включён в PHP как отдельное SAPI.
В качестве
скрипта командной строки
(CLI SAPI), являющегося
исполняемым файлом
, который вызывается пользователем из
командной строки
; скрипт выполняется в окружении вызвавшего пользователя. В этом случае возможно использование PHP для создания клиентских
GUI
-приложений
&#91;37&#93;
и решения административных задач в
операционных системах
UNIX
,
Linux
,
Microsoft Windows
,
Mac OS X
и
AmigaOS
. Однако в таком качестве он не получил распространение, отдавая пальму первенства
Perl
,
Python
и
VBScript
.
Начиная с версии PHP 5.4.0 в CLI SAPI появилась возможность запуска PHP как отдельного HTTP сервера. Однако этот режим предназначен исключительно для разработки, так как запускает только один процесс интерпретатора и выполняет все запросы исключительно последовательно.
Пасхальные яйца
[
править
|
править код
]
PHP имеет несколько
пасхальных яиц
(шуток). Передача специальных GET-параметров любому php-скрипту приводит к выводу различных изображений.
Например:
любой_сценарий.php?=PHPE9568F36-D428-11d2-A769-00AA001ACF42
введя это значение в адресную строку браузера можно увидеть различные изображения, в зависимости от версии интерпретатора:
фотография
Thies Arntzen
(версии 4.1.2, 4.2.2)
фотография
таксы
(владелец
Stig Bakken
) (версии 4.3.2, 4.3.3, 4.3.8&#160;— 4.3.10)
фотография чёрного
терьера
(владелец
Zeev Suraski
) (версии 4.3.11, 4.4.0&#160;— 4.4.4, 5.1.0, 5.1.2)
фотография
кролика
(версии 4.3.1, 5.0.0, 5.0.3)
искажённый логотип PHP (версии 5.1.3&#160;— 5.2.13)
&#91;38&#93;
фотография игрушечного синего слона с надписью PHP (начиная с версии 5.3.0)
&#91;38&#93;
Следующие два значения позволят увидеть стандартный логотип PHP и ZEND, соответственно
&#91;38&#93;
:
любой_сценарий.php?=PHPE9568F34-D428-11d2-A769-00AA001ACF42
любой_сценарий.php?=PHPE9568F35-D428-11d2-A769-00AA001ACF42
Эти значения можно получить и непосредственно в PHP-скрипте с помощью функций
php_logo_guid
и
zend_logo_guid
для логотипа Zend.
Также имеется специальное значение для отображения списка всех авторов PHP (4,5)
&#91;38&#93;
:
любой_сценарий.php?=PHPB8B5F2A0-3C92-11d3-A3A9-4C7B08C10000
Альтернативные реализации
[
править
|
править код
]
В силу популярности языка PHP и желания увеличить быстродействие основанных на нём
веб-приложений
создано несколько альтернативных
компиляторов
, близких к PHP-языку. Так в феврале
2010&#160;года
компания
Facebook
открыла
&#91;39&#93;
&#91;40&#93;
свой компилятор PHP&#160;—
HipHop
(HPHP, Hyper-PHP) генерирующий код на
C++
, с последующей компиляцией в машинный код с помощью
gcc
. В июле 2013 года
российская
компания
ВКонтакте
анонсировала похожий продукт&#160;—
KPHP
&#91;41&#93;
.
В таблице представлен список существующих на сегодняшний момент альтернативных реализаций.
Название
Версия PHP (примерно)
Лицензия
Результат компиляции
HipHop
5.4
PHP License
C++
,
машинный код
Roadsend PHP
5.3
GPL
/
LGPL
C
,
машинный код
Phalanger
5.5
Ms SS-PL
&#91;42&#93;
(
Shared source
)
Microsoft IL
Quercus
(в составе
веб-сервера
Resin
)
5.2
GPL
или коммерческая
JVM
PHC
5.2
BSDL
C
,
машинный код
Pipp
&#91;43&#93;
5.3
Artistic License
и
GNU GPL
Parrot
JPHP
&#91;44&#93;
5.6 (частично 7.0 и 7.1)
&#91;45&#93;
Apache 2.0
JVM
PHPPHP
5.4
MIT
PHP
PH7
5.5
Своя (Symisc Public License)
C
,
машинный код
HippyVM
5.6
MIT
RPython/PyPy
На сайте phpclasses.org доступен сравнительный анализ некоторых компиляторов:
PHP compiler performance
.
Лицензирование
[
править
|
править код
]
Основная статья:
Лицензия PHP
Приложения PHP
[
править
|
править код
]
Библиотека PEAR
[
править
|
править код
]
Основная статья:
PEAR
Популярные веб-приложения
[
править
|
править код
]
Список примеров в этом разделе не основывается на
авторитетных источниках
, посвящённых непосредственно предмету статьи или её раздела.
Добавьте
ссылки на источники
, предметом рассмотрения которых является тема настоящей статьи (или раздела) в целом, а не отдельные элементы списка. В противном случае раздел может быть удалён.
С использованием PHP разработано множество приложений, которые широко используются на различных
сайтах
,
форумах
и
блогах
.
Drupal
,
Typo3
,
Joomla
,
Wordpress
&#160;—
системы управления содержимым (CMS)
;
Magento
,
osCommerce
,
OpenCart
&#160;— системы для Интернет-коммерции;
Coppermine
,
Gallery Project
,
4images
&#160;— галереи изображений;
MediaWiki
,
DokuWiki
&#160;— вики-движки;
phpBB
,
SMF
,
vBulletin
,
Invision Power Board
&#160;—
форумные
движки;
phpMyAdmin
,
phpPgAdmin
,
Adminer
&#160;— утилиты администрирования
СУБД
;
eyeOS
&#160;— удалённая
операционная система
, основанная на принципе Desktop Operating System.
Вспомогательные каркасы
[
править
|
править код
]
Для
быстрой разработки приложений
на PHP было создано множество
фреймворков
, наиболее популярными из которых являются
Zend Framework
,
CakePHP
,
Symfony
,
Laravel
,
CodeIgniter
,
Kohana
,
Phalcon
и
Yii
&#91;46&#93;
. Основные преимущества такой разработки&#160;— это предоставление возможности строить проект при помощи паттерна
MVC
.
Список примеров в этом разделе не основывается на
авторитетных источниках
, посвящённых непосредственно предмету статьи или её раздела.
Добавьте
ссылки на источники
, предметом рассмотрения которых является тема настоящей статьи (или раздела) в целом, а не отдельные элементы списка. В противном случае раздел может быть удалён.
Интегрированные среды разработки для PHP
[
править
|
править код
]
Название
Лицензия
Сайт
Codelobster
Freeware
http://www.codelobster.com
Komodo
Mozilla tri-license
(
MPL
/
LGPL
/
GPL
)
&#91;47&#93;
http://www.activestate.com
JetBrains PhpStorm
Proprietary software
http://www.jetbrains.com/phpstorm/
PHP Development Tools
Eclipse Public License
http://www.eclipse.org/pdt/
Zend Studio
Shareware
http://www.zend.com/products/zend_studio/
Aptana Studio
GNU GPL
https://web.archive.org/web/20141028160346/http://aptana.org/
phpDesigner
Shareware
http://www.mpsoftware.eu/
PHP Expert Editor
Shareware
&#91;48&#93;
http://www.phpexperteditor.com/
NetBeans IDE
CDDL
http://www.netbeans.org/
RadPHP XE
Trial
https://web.archive.org/web/20101225190602/http://www.embarcadero.com/products/radphp
NuSphere
Trial
http://www.nusphere.com/
KDevelop
&#91;49&#93;
GNU GPL
http://www.kdevelop.org/
Microsoft WebMatrix
Freeware
http://www.microsoft.com/web/webmatrix/
Notepad++
GNU GPL
http://notepad-plus-plus.org/
Sublime Text 2
Proprietary software
http://www.sublimetext.com/
VS.Php for Visual Studio
Proprietary software
http://www.jcxsoftware.com/jcx/vsphp/home
PHP Tools for Visual Studio
Trial
http://www.devsense.com
DevelNext
MPL-2.0
http://develnext.org/
jEdit
GNU GPL
-2.0
http://jedit.org/
Критика
[
править
|
править код
]
Сторонники языка PHP в качестве основных его преимуществ называют широкую распространённость, востребованность PHP-разработчиков на рынке труда и простоту изучения. К достоинствам языка относится и его достаточно быстрая эволюция. В то же время язык часто критикуют за несогласованный синтаксис функций и не
ортогональность
дизайна. Такие претензии суммированы в известной блогозаписи «PHP: фрактал плохого дизайна»
&#91;50&#93;
&#91;51&#93;
, опубликованной в 2012 году. Её автор пишет, что «
Фактически каждая деталь PHP в какой-то мере поломана. Язык, структура, экосистема: всё плохо
». Среди недостатков языка он называет запутанную систему типов данных, основанную на
слабой типизации
а в качестве причин всеобщей несогласованности называет отсутствие чёткой философии, при разработке языка. Ранние версии PHP ориентировались на
Perl
, стандартная библиотека — на
язык C
, а реализация
объектно-ориентированной парадигмы
— на
C++
и
Java
. Эту критику признают отчасти справедливой (хотя и гипертрофированной) и некоторые участники сообщества PHP-разработчиков
&#91;52&#93;
.
Отсутствие обратной совместимости между версиями языка
[
править
|
править код
]
В связи с развитием PHP и избавлением его от
устаревшего наследия
[en]
ранних версий языка, код, созданный для более ранних версий языка, зачастую не работает или работает некорректно с более поздними версиями языка
&#91;53&#93;
. В более поздних версиях исключаются конструкции, методики, функции, применявшиеся ранее. В результате, приложения, созданные несколько лет назад, практически теряют работоспособность для современных версий языка и требуют значительной модификации. Такие изменения обусловлены двумя факторами: устранением несогласованного синтаксиса и устранением конструкций, поощряющих создание небезопасного кода.
В версиях линейки 5.3.x большое количество функций было признано устаревшими, их поддержка не планируется в новых версиях языка
&#91;54&#93;
, что вызывает несовместимость со скриптами, которые используют устаревшие функции.
Надо отметить, что противоречие между обратной совместимостью и процессом развития&#160;— одна из ключевых проблем в разработке программного и аппаратного обеспечения. При работе над
скриптовыми языками
время от времени происходит резкая смена его
архитектуры
(а порой и
парадигмы
), обычно сопровождающаяся сменой первой цифры в номере версии. Так, в настоящее время идёт постепенный переход на новую ветвь языка Python&#160;— 3.x, в стадии тестирования находится
Perl 6
, являющийся, по сути, новым perl-подобным языком. При этом принято выпускать переходные версии, в которых постепенно вводятся новые конструкции, а использование устаревших вызывает вывод предупреждений. К таким переходным версиям относится и PHP 5.3.
7 марта 2013 года
Zend Technologies
объявили, что в версию PHP 5.5, когда она будет выпущена, решено интегрировать Zend Optimizer+, который включает в себя кэш опкодов и оптимизатор кода.
Отсутствие поддержки многобайтовых кодировок в ядре языка
[
править
|
править код
]
Поддержка
строк с многобайтовыми кодировками
, такими, как
UTF-8
, реализуется через отдельные расширения
mbstring
и
iconv
, на уровне ядра поддержка отсутствует, однако с версии PHP 4.2.0 есть возможность переопределять стандартные функции работы со строками, подменяя их на аналоги из mbstring.
Поддержка многобайтовых кодировок во всех строковых функциях стала доступна с версии 5.4.0 (март 2012 года).
Отсутствие поддержки многопоточности
[
править
|
править код
]
В языке не предусмотрена возможность создания
многопоточных
приложений и отсутствует поддержка синхронизированного доступа к ресурсам, однако реализуема при помощи расширения PCNTL
&#91;55&#93;
. Однако следует отметить, что использование PCNTL или
P
rocess
C
o
nt
ro
l
не подходит для решения специфических задач.
Хотя есть возможность установить расширение
pthreads
для «честных» потоков, но для этого интерпретатор должен быть скомпилирован с флагом thread safety.
См. также
[
править
|
править код
]
PHP
в Викиучебнике
PHP
в Викицитатнике
PHP
на Викискладе
PHP
в Викиновостях
Стандартная библиотека PHP
PEAR
PECL
PHP-Qt
PHP-GTK
Акселератор PHP
PHP-инъекция
phpDocumentor
Composer
Примечания
[
править
|
править код
]
↑
1
2
PHP Compiler Internals
&#160;
(англ.)
.&#32;
Проверено 17 ноября 2009.
&#32;
Архивировано
21&#160;августа 2011&#160;года.
↑
PHP: Zend API: Hacking the Core of PHP&#160;— Manual
↑
1
2
Rasmus Lerdorf began assembling C code originally written for CGI scripts into a library and accessing the library's functions, including SQL queries, through HTML-embedded commands in 1994;
Lerdorf, Rasmus
&#32;
PHP on Hormones – history of PHP presentation by Rasmus Lerdorf given at the MySQL Conference in Santa Clara, California
&#160;
(неопр.)
&#32;(mp3).&#32; The Conversations Network&#32;(26&#160;апреля 2007).&#160;— «Every day I would change the language drastically, and it didn't take very long, so by 1995, mid-1995 or so, PHP looked like
this
. This isn't that far from what PHP looks like today, actually.».&#32;
Проверено 11 декабря 2009.
&#32;
Архивировано
25&#160;февраля 2013&#160;года.
↑
1
2
3
4
http://php.net/manual/en/history.php.php
↑
1
2
https://www.technotification.com/2018/04/best-php-frameworks.html
↑
http://php.net/
↑
http://php.net/license/
↑
1
2
3
PHP: History of PHP&#160;— Manual
↑
PHP: Preface&#160;— Manual
&#160;
(англ.)
.&#32;
Архивировано
21&#160;августа 2011&#160;года.
↑
1
2
TIOBE Software: Tiobe Index
↑
History of PHP and related projects
&#160;
(англ.)
.&#32;
Архивировано
21&#160;августа 2011&#160;года.
↑
PHP: Отличительные особенности&#160;— Manual
&#160;
(рус.)
&#32;(21 июня 2009).&#32;
Проверено 13 ноября 2009.
&#32;
Архивировано
21&#160;августа 2011&#160;года.
↑
Devel Next
↑
Devel Studio
↑
Rasmus Lerdorf.
&#32;
I wonder why people keep writing that PHP was ever written in Perl. It never was. #php
&#160;
(англ.)
.&#32; @rasmus&#32;(20&#160;July 2012).&#32;
Проверено 8 января 2019.
↑
Савельева Н.
Лекция 1: Введение в PHP / Язык программирования PHP.
Интуит, 2005.
ISBN 978-5-9556-0026-0
↑
Количество переписанных функций с поддержкой Юникода
↑
Файл news.txt из дистрибутива PHP 6
↑
Текущий список выполненных и невыполненных работ по PHP 6
↑
Полный список изменений, которые были запланированы в декабре 2005 года
↑
Как умер PHP6
↑
PHP RFC: Name of Next Release of PHP
↑
PHP RFC: PHP 7.0 timeline
↑
PHP 7 Coolest Features: Space Ships, Type Hints, 2X Speed
&#160;
(англ.)
.&#32; www.zend.com.&#32;
Проверено 6 июля 2017.
↑
PHP: News Archive&#160;— 2015
↑
PHP: rfc:phpng
&#160;
(неопр.)
.&#32;
php.net
.&#32;
Проверено 16 декабря 2014.
↑
RFC: Return Types
&#160;
(неопр.)
.&#32;
php.net
.
↑
RFC: Scalar Type Declarations
&#160;
(неопр.)
.&#32;
php.net
.
↑
PHP: Pseudo-types and variables used in this documentation&#160;— Manual
↑
PHP: Variable variables&#160;— Manual
↑
PHP: echo&#160;— Manual
↑
По-видимому, позаимствовали из языка
C++
, где это бинарная форма
указания области видимости
, конструкция с ним,
квалифицированным именем
, в данном случае константы.
↑
http://php.net/manual/en
↑
PHP: Basic memory management&#160;— Manual
&#160;
(рус.)
&#32;(13 ноября 2009).&#32;
Проверено 17 ноября 2009.
&#32;
Архивировано
21&#160;августа 2011&#160;года.
↑
PHP: php.ini directives&#160;— Manual
&#160;
(англ.)
&#32;(6 ноября 2009).&#32;
Проверено 13 ноября 2009.
&#32;
Архивировано
21&#160;августа 2011&#160;года.
↑
PHP: List of php.ini directives&#160;— Manual
&#160;
(англ.)
&#32;(6 ноября 2009).&#32;
Проверено 13 ноября 2009.
&#32;
Архивировано
21&#160;августа 2011&#160;года.
↑
PHP: Использование PHP в командной строке&#160;— Manual
&#160;
(рус.)
&#32;(21 июня 2009).&#32;
Проверено 13 ноября 2009.
&#32;
Архивировано
21&#160;августа 2011&#160;года.
↑
1
2
3
4
PHP Easter Egg
&#160;
(англ.)
.&#32;
Проверено 16 ноября 2009.
&#32;
Архивировано
21&#160;августа 2011&#160;года.
↑
HipHop for PHP: Move Fast
↑
Компания Facebook открыла код высокопроизводительного PHP транслятора
↑
Павел Дуров с коллегами разработали улучшенную версию PHP
↑
Текст лицензии
&#160;
(англ.)
↑
Проект находится в экспериментальной стадии
↑
Проект находится в экспериментальной стадии. Последняя версия 0.9.3 (по состоянию на апрель 2018 года)
↑
jphp-group/jphp
&#160;
(англ.)
.&#32; GitHub.&#32;
Проверено 18 ноября 2018.
↑
Merkel, Dirk.
&#32;Chapter 6: PHP Frameworks&#160;//&#32;Expert PHP 5 Tools.&#160;— Packt Publishing, 2010.&#160;—
ISBN 978-1-847198-38-9
.
↑
Komodo IDE is a Professional Development Environment for Perl, Python, Tcl | ActiveState
↑
Предусмотрена бесплатная регистрация для граждан exUSSR
↑
PHP support for KDevelop 4 (and eventually Quanta+) | Milian Wolff
↑
Eevee.
&#32;
PHP: a fractal of bad&#160;design
&#160;
(англ.)
.&#32;
fuzzy notepad
.&#32; eev.ee&#32;(9&#160;April 2012).&#32;
Проверено 16 января 2019.
↑
PHP: фрактал плохого дизайна
&#160;
(рус.)
.&#32;
habr.com
&#32;(16&#160;апреля 2012).&#32;
Проверено 16 января 2019.
↑
Paul Krill.
&#32;
Why developers love and hate PHP
.&#32;
The language has a substantial stake in Web development, but it is marred by design flaws
&#160;
(англ.)
.
&#32;
InfoWorld
[en]
&#32;(12 2014)
.
↑
PHP: Backward Incompatible Changes&#160;— Manual
↑
PHP: Deprecated features in PHP 5.3.x
&#160;
(неопр.)
.&#32; php.net Team.&#32;
Архивировано
21&#160;августа 2011&#160;года.
↑
PCNTL
Литература
[
править
|
править код
]
Дмитрий Котеров, Алексей Костарев.
&#32;PHP.&#160;—
СПб.
: «
БХВ-Петербург
», 2005.&#160;— С.&#160;1120.&#160;— (В подлиннике).&#160;—
ISBN 5-94157-245-X
.
Костарев А. Ф.
&#32;PHP 5.&#160;—
СПб.
: «
БХВ-Петербург
», 2008.&#160;— С.&#160;1104.&#160;—
ISBN 978-5-9775-0315-0
.
Мэтт Зандстра.
&#32;PHP: объекты, шаблоны и методики программирования&#32;&#61;&#32;PHP Objects, Patterns and Practice, Third Edition.&#160;— 3-е издание.&#160;—
М.
: «
Вильямс
», 2010.&#160;— С.&#160;560.&#160;—
ISBN 978-5-8459-1689-1
.
Кристиан Дари, Эмилиан Баланеску.
&#32;PHP и MySQL: создание интернет-магазина&#32;&#61;&#32;Beginning PHP and MySQL E-Commerce: From Novice to Professional.&#160;—
М.
: «
Вильямс
», 2010.&#160;—
ISBN 978-5-8459-1602-0
.
Джейсон Ленгсторф.
&#32;PHP и jQuery для профессионалов&#32;&#61;&#32;Pro PHP and jQuery.&#160;—
М.
: «
Вильямс
», 2010.&#160;— С.&#160;352.&#160;—
ISBN 978-5-8459-1693-8
.
Стив Суэринг, Тим Конверс, Джойс Парк.
&#32;PHP и MySQL&#32;&#61;&#32;PHP 6 and MySQL 6 Bible.&#160;— 2-е издание.&#160;—
М.
: «
Диалектика
», 2010.&#160;— С.&#160;912.&#160;— (Библия программиста).&#160;—
ISBN 978-5-8459-1640-2
.
Квентин Зервас.
&#32;Web 2.0: создание приложений на PHP&#32;&#61;&#32;Practical Web 2.0 Applications with PHP.&#160;—
М.
: «
Вильямс
», 2009.&#160;— С.&#160;544.&#160;—
ISBN 978-5-8459-1590-0
.
Кузнецов Максим, Симдянов Игорь.
&#32;PHP 5/6.&#160;—
СПб.
: «
БХВ-Петербург
», 2009.&#160;— С.&#160;1024.&#160;—
ISBN 978-5-9775-0304-4
.
Кузнецов Максим, Симдянов Игорь.
&#32;Объектно-ориентированное программирование на PHP.&#160;—
СПб.
: «
БХВ-Петербург
», 2007.&#160;— С.&#160;608.&#160;—
ISBN 978-5-9775-0142-2
.
Эд Леки-Томпсон, Алек Коув, Стивен Новицки, Хьяо Айде-Гудман.
&#32;PHP 5 для профессионалов&#32;&#61;&#32;Professional PHP 5.&#160;—
М.
: «
Диалектика
», 2006.&#160;— С.&#160;608.&#160;—
ISBN 0-7645-7282-2
.
Кузнецов Максим, Симдянов Игорь.
&#32;Самоучитель PHP 5/6.&#160;— 3-е изд., перераб. и доп.&#160;—
СПб.
: «
БХВ-Петербург
», 2009.&#160;— С.&#160;672.&#160;—
ISBN 978-5-9775-0409-6
.
Кузнецов Максим, Симдянов Игорь.
&#32;PHP. Практика создания Web-сайтов.&#160;— 2-е изд. перераб. и доп.&#160;—
СПб.
: «
БХВ-Петербург
», 2008.&#160;— С.&#160;1264.&#160;—
ISBN 978-5-9775-0203-0
.
Кузнецов Максим, Симдянов Игорь.
&#32;Головоломки на PHP для хакера.&#160;— 2-е изд. перераб. и доп.&#160;—
СПб.
: «
БХВ-Петербург
», 2008.&#160;— С.&#160;544.&#160;—
ISBN 978-5-9775-0204-7
.
Кузнецов Максим, Симдянов Игорь.
&#32;PHP на примерах.&#160;— 2-е изд. перераб. и доп.&#160;—
СПб.
: «
БХВ-Петербург
», 2011.&#160;— С.&#160;400.&#160;—
ISBN 978-5-9775-0445-4
.
PHP для начинающих
ООП в PHP
Ссылки
[
править
|
править код
]
Официальный сайт
PHP
&#160;
(англ.)
Руководство по PHP
&#160;
(рус.)
(включая FAQ)
Книги по PHP
&#160;
(рус.)
(включая английсскую литературу)
Для улучшения этой статьи
желательно
:
Проставив
сноски
, внести более точные указания на источники.
PHP
Люди
Энди Гутманс
Расмус Лердорф
Зеев Сураски
Ресурсы
Composer
Zend Engine
Библиотеки
PEAR
Редакторы
Акселератор
Реализации
HHVM
[en]
HPHPc
Quercus
Project Zero
[en]
Phalanger
Parrot
kPHP
Фреймворки
Akelos
BlueShoes
CakePHP
Canvas
CodeIgniter
Cotonti
Drupal
Joomla!
Kohana
Laravel
LiveStreet
Lumen
MODX
PHP For Applications
PHPOpenbiz
PHPixie
Phalcon
Qcodo
Seagull
SilverStripe
Solar
Symfony
TYPO3
XOOPS
Yii
Zend
eZ publish
F3
[en]
FuelPHP
[en]
Horde
[en]
Lithium
[en]
Midgard
[en]
Nette Framework
[en]
PRADO
[en]
Silex
[en]
Тестирование
PHPUnit
[en]
PHP Unit Testing Framework
[en]
SimpleTest
lime
[en]
Behat
[en]
ORM
Propel
Doctrine
IDE
Eclipse PDT
Aptana Studio
PhpStorm
NetBeans
RadPHP
PHPEdit
[en]
Zend Studio
Codelobster
Компилятор
Phalanger
Widget toolkit
[en]
wxPHP
[en]
PHP-Qt
PHP-GTK
Категория
Языки программирования
Хронология
Ассемблер
BASIC
C
C++
C#
COBOL
Fortran
Go
Java
JavaScript
(JS)
Lisp
Lua
Pascal
Perl
PHP
Python
Ruby
Smalltalk
Visual Basic .NET
(VB.NET)
Категория
Сравнение
Списки:
хронологический
по категориям
Свободное и открытое программное обеспечение
Главное
Копилефт
СПО
Определение
Критерии Debian
Сообщество
Движение
Gratis versus libre
Сравнение хостингов СПО
Открытое ПО
Определение
Определение свободных произведений культуры
Список FOSS-пакетов
Дистрибутив Linux
История
GNU
Linux
Конфликт SCO — Linux
Mozilla
Application Suite
Firefox
Thunderbird
Организации
ASF
AOSP
Blender Foundation
Eclipse Foundation
FreeBSD Foundation
freedesktop.org
FSF
FSMI
GNOME Foundation
Проект GNU
Google Code
KDE e.V.
Linux Foundation
Mozilla Foundation
OSGF
OSI
ReactOS Foundation
Software Freedom Conservancy
SourceForge
Symbian Foundation
The Document Foundation
Xiph.Org
XMPP Standards Foundation
X.Org Foundation
Лицензии
Apache
Artistic
Beerware
BSD
GNU GPL
GNU LGPL
ISC
MIT
MPL
Ms-PL/RL
zlib
Public domain
/
CC0
WTFPL
Лицензии, одобренные FSF
Разрешительные лицензии
Проблемы
Разнообразие лицензий
Безопасность
(
англ.
)
Блоб
Программные патенты
DRM
Тивоизация
Trusted Computing
Графическое оборудование и СПО
Прочее
Сообщество
Форк
Microsoft Open Specification Promise
Сравнение open source и закрытых исходников
Проприетарное ПО
Собор и Базар
Ради удовольствия
Revolution OS
Книга
Категория
Викисклад
Портал
Веб
и
веб-сайты
Глобально
Всемирная паутина
Веб 1.0
Веб 2.0
Веб 3.0
Семантическая паутина
Нейронет
Локально
Сайт
Портал
Страница
Служба
Кольцо
Виды сайтов
и сервисов
Виртуальный атлас
Баннерная сеть
Библиотека
Блог
(
платформа
)
Видеохостинг
Вики
Сайт-визитка
Вопрос-ответ
Закладки
Службы знакомств
Браузерная игра
Каталог ресурсов
Интернет-магазин
Микроблог
Новостной сайт
Поисковая система
Порносайт
Веб-почта
Социальная сеть
Тамблелог
BitTorrent-трекер
Файлообменник
Форум
Сервис
Имиджборд
Фотохостинг
Чат
Создание
и обслуживание
Мастер
Разработка
Дизайн
Вёрстка
Программирование
Юзабилити
Опыт взаимодействия
Продвижение сайта
Поисковая оптимизация
(SEO)
Хостинг
Системный администратор
Модератор
Учётная запись
Авторизация
Типы макетов,
страниц, сайтов
Статический
Динамический
Фиксированный
Резиновый
Динамично эластичный
Адаптивный
Техническое
Веб-сервер
(
сравнение
)
Браузер
(
сравнение
)
DNS
CMF
CMS
HTTP
(
ответы
заголовки
)
SPDY
QUIC
CGI
HTML
XHTML
CSS
PHP
JavaScript
DHTML
Cookie
DOM
XML
AJAX
JSON
Flash
RSS
Atom
Информер
Микроформат
favicon
.ico
robots.txt
Sitemaps
Карта сайта
.htaccess
Маркетинг
Интернет-маркетинг
Интернет-реклама
Баннер
Контекстная реклама
Тизер
Киберсквоттинг
Социум и&#160;культура
Блогосфера
Интернет-сообщество
(
районное
)
Сетевая литература
Источник —
https://ru.wikipedia.org/w/index.php?title=PHP&amp;oldid=98038978
Категории
:
Языки программирования по алфавиту
Языки программирования, появившиеся в 1995 году
PHP
Скриптовые языки
Языки веб-программирования
Свободные компиляторы и интерпретаторы
Гипертекст
Высокоуровневые языки программирования
Языки с динамической типизацией
Скрытые категории:
Википедия:Статьи с некорректным использованием шаблонов:Cite web (не указан язык)
Страницы, использующие волшебные ссылки ISBN
Википедия:Статьи с источниками из Викиданных
Википедия:Статьи с переопределением значения из Викиданных
ПРО:ИТ:Статьи по алфавиту
ПРО:ИТ:Последняя правка: в текущем месяце
Википедия:Статьи со списками примеров без авторитетных источников
Статьи со ссылками на Викиучебник
Статьи со ссылками на Викиновости
Википедия:Статьи без сносок
Статьи с примерами кода PHP
Навигация
Персональные инструменты
Вы не представились системе
Обсуждение
Вклад
Создать учётную запись
Войти
Пространства имён
Статья
Обсуждение
Варианты
Просмотры
Читать
Править
Править код
История
Ещё
Поиск
Навигация
Заглавная страница
Рубрикация
Указатель А — Я
Избранные статьи
Случайная статья
Текущие события
Участие
Сообщить об ошибке
Сообщество
Форум
Свежие правки
Новые страницы
Справка
Пожертвовать
Инструменты
Ссылки сюда
Связанные правки
Служебные страницы
Постоянная ссылка
Сведения о странице
Элемент Викиданных
Цитировать страницу
Печать/экспорт
Создать книгу
Скачать как PDF
Версия для печати
В других проектах
Викисклад
Викиучебник
Викиновости
Викицитатник
Викиверситет
На других языках
Afrikaans
Alemannisch
Aragonés
العربية
Asturianu
Azərbaycanca
Boarisch
Žemaitėška
Беларуская
Беларуская (тарашкевіца)‎
Български
भोजपुरी
বাংলা
Brezhoneg
Bosanski
Català
Mìng-dĕ̤ng-ngṳ̄
Нохчийн
Cebuano
کوردی
Čeština
Cymraeg
Dansk
Deutsch
Ελληνικά
English
Esperanto
Español
Eesti
Euskara
فارسی
Suomi
Võro
Français
Galego
ગુજરાતી
客家語/Hak-kâ-ngî
עברית
हिन्दी
Hrvatski
Magyar
Հայերեն
Interlingua
Bahasa Indonesia
Ido
Íslenska
Italiano
日本語
Basa Jawa
ქართული
Taqbaylit
Қазақша
ភាសាខ្មែរ
ಕನ್ನಡ
한국어
Kurdî
Кыргызча
Latina
Lëtzebuergesch
Lingua Franca Nova
Lumbaart
Lietuvių
Latviešu
मैथिली
Malagasy
Македонски
മലയാളം
Монгол
मराठी
Bahasa Melayu
မြန်မာဘာသာ
Plattdüütsch
नेपाली
Nederlands
Norsk nynorsk
Norsk
Occitan
Polski
Português
Română
संस्कृतम्
Саха тыла
Scots
Srpskohrvatski / српскохрватски
සිංහල
Simple English
Slovenčina
Slovenščina
Shqip
Српски / srpski
Svenska
தமிழ்
తెలుగు
Тоҷикӣ
ไทย
Türkmençe
Tagalog
Türkçe
Українська
اردو
Oʻzbekcha/ўзбекча
Tiếng Việt
West-Vlams
Winaray
Wolof
吴语
ייִדיש
中文
Bân-lâm-gú
粵語
Править ссылки
Эта страница в последний раз была отредактирована 11 февраля 2019 в 07:35.
Текст доступен по
лицензии Creative Commons Attribution-ShareAlike
; в отдельных случаях могут действовать дополнительные условия.
Подробнее см.
Условия использования
.
Wikipedia® — зарегистрированный товарный знак некоммерческой организации
Wikimedia Foundation, Inc.
Политика конфиденциальности
Описание Википедии
Отказ от ответственности
Свяжитесь с нами
Разработчики
Соглашение о cookie
Мобильная версия
